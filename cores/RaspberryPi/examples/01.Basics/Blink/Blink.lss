/home/matt/.uecide/compilers/avr-gcc/bin/avr-objdump -h -S /tmp/build-4ebda168-235b-4791-8f8d-7fedc88bd74c/Blink.elf 

/tmp/build-4ebda168-235b-4791-8f8d-7fedc88bd74c/Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000043a  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000043a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  0000043c  000004b0  2**0
                  ALLOC
  3 .stab         00002244  00000000  00000000  000004b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003fcb  00000000  00000000  000026f4  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__ctors_end>
   4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   8:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
   c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  10:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  14:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  18:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  1c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  20:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  24:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  28:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  2c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  30:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  34:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  38:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  3c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  40:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_16>
  44:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  48:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  4c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  54:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  58:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  5c:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  60:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>
  64:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__bad_interrupt>

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_end>:
  c2:	11 24       	eor	r1, r1
  c4:	1f be       	out	0x3f, r1	; 63
  c6:	cf ef       	ldi	r28, 0xFF	; 255
  c8:	d8 e0       	ldi	r29, 0x08	; 8
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	cd bf       	out	0x3d, r28	; 61

000000ce <__do_copy_data>:
  ce:	11 e0       	ldi	r17, 0x01	; 1
  d0:	a0 e0       	ldi	r26, 0x00	; 0
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	ea e3       	ldi	r30, 0x3A	; 58
  d6:	f4 e0       	ldi	r31, 0x04	; 4
  d8:	02 c0       	rjmp	.+4      	; 0xde <.do_copy_data_start>

000000da <.do_copy_data_loop>:
  da:	05 90       	lpm	r0, Z+
  dc:	0d 92       	st	X+, r0

000000de <.do_copy_data_start>:
  de:	a2 30       	cpi	r26, 0x02	; 2
  e0:	b1 07       	cpc	r27, r17
  e2:	d9 f7       	brne	.-10     	; 0xda <.do_copy_data_loop>

000000e4 <__do_clear_bss>:
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	a2 e0       	ldi	r26, 0x02	; 2
  e8:	b1 e0       	ldi	r27, 0x01	; 1
  ea:	01 c0       	rjmp	.+2      	; 0xee <.do_clear_bss_start>

000000ec <.do_clear_bss_loop>:
  ec:	1d 92       	st	X+, r1

000000ee <.do_clear_bss_start>:
  ee:	ab 30       	cpi	r26, 0x0B	; 11
  f0:	b1 07       	cpc	r27, r17
  f2:	e1 f7       	brne	.-8      	; 0xec <.do_clear_bss_loop>
  f4:	0e 94 0c 02 	call	0x418	; 0x418 <main>
  f8:	0c 94 1b 02 	jmp	0x436	; 0x436 <_exit>

000000fc <__bad_interrupt>:
  fc:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000100 <loop>:
 100:	80 91 00 01 	lds	r24, 0x0100
 104:	61 e0       	ldi	r22, 0x01	; 1
 106:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <digitalWrite>
 10a:	68 ee       	ldi	r22, 0xE8	; 232
 10c:	73 e0       	ldi	r23, 0x03	; 3
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 78 01 	call	0x2f0	; 0x2f0 <delay>
 116:	80 91 00 01 	lds	r24, 0x0100
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <digitalWrite>
 120:	68 ee       	ldi	r22, 0xE8	; 232
 122:	73 e0       	ldi	r23, 0x03	; 3
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 78 01 	call	0x2f0	; 0x2f0 <delay>
 12c:	08 95       	ret

0000012e <setup>:
 12e:	80 91 00 01 	lds	r24, 0x0100
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	0e 94 9d 00 	call	0x13a	; 0x13a <pinMode>
 138:	08 95       	ret

0000013a <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 13e:	48 2f       	mov	r20, r24
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	ca 01       	movw	r24, r20
 144:	86 56       	subi	r24, 0x66	; 102
 146:	9f 4f       	sbci	r25, 0xFF	; 255
 148:	fc 01       	movw	r30, r24
 14a:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
 14c:	4a 57       	subi	r20, 0x7A	; 122
 14e:	5f 4f       	sbci	r21, 0xFF	; 255
 150:	fa 01       	movw	r30, r20
 152:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 154:	88 23       	and	r24, r24
 156:	69 f1       	breq	.+90     	; 0x1b2 <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	fc 01       	movw	r30, r24
 160:	e8 59       	subi	r30, 0x98	; 152
 162:	ff 4f       	sbci	r31, 0xFF	; 255
 164:	a5 91       	lpm	r26, Z+
 166:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
 168:	fc 01       	movw	r30, r24
 16a:	ee 58       	subi	r30, 0x8E	; 142
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	c5 91       	lpm	r28, Z+
 170:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
 172:	66 23       	and	r22, r22
 174:	51 f4       	brne	.+20     	; 0x18a <pinMode+0x50>
		uint8_t oldSREG = SREG;
 176:	2f b7       	in	r18, 0x3f	; 63
                cli();
 178:	f8 94       	cli
		*reg &= ~bit;
 17a:	8c 91       	ld	r24, X
 17c:	93 2f       	mov	r25, r19
 17e:	90 95       	com	r25
 180:	89 23       	and	r24, r25
 182:	8c 93       	st	X, r24
		*out &= ~bit;
 184:	88 81       	ld	r24, Y
 186:	89 23       	and	r24, r25
 188:	0b c0       	rjmp	.+22     	; 0x1a0 <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 18a:	62 30       	cpi	r22, 0x02	; 2
 18c:	61 f4       	brne	.+24     	; 0x1a6 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
 18e:	2f b7       	in	r18, 0x3f	; 63
                cli();
 190:	f8 94       	cli
		*reg &= ~bit;
 192:	8c 91       	ld	r24, X
 194:	93 2f       	mov	r25, r19
 196:	90 95       	com	r25
 198:	89 23       	and	r24, r25
 19a:	8c 93       	st	X, r24
		*out |= bit;
 19c:	88 81       	ld	r24, Y
 19e:	83 2b       	or	r24, r19
 1a0:	88 83       	st	Y, r24
		SREG = oldSREG;
 1a2:	2f bf       	out	0x3f, r18	; 63
 1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
 1a6:	9f b7       	in	r25, 0x3f	; 63
                cli();
 1a8:	f8 94       	cli
		*reg |= bit;
 1aa:	8c 91       	ld	r24, X
 1ac:	83 2b       	or	r24, r19
 1ae:	8c 93       	st	X, r24
		SREG = oldSREG;
 1b0:	9f bf       	out	0x3f, r25	; 63
	}
}
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 1b8:	48 2f       	mov	r20, r24
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	ca 01       	movw	r24, r20
 1be:	82 55       	subi	r24, 0x52	; 82
 1c0:	9f 4f       	sbci	r25, 0xFF	; 255
 1c2:	fc 01       	movw	r30, r24
 1c4:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 1c6:	ca 01       	movw	r24, r20
 1c8:	86 56       	subi	r24, 0x66	; 102
 1ca:	9f 4f       	sbci	r25, 0xFF	; 255
 1cc:	fc 01       	movw	r30, r24
 1ce:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
 1d0:	4a 57       	subi	r20, 0x7A	; 122
 1d2:	5f 4f       	sbci	r21, 0xFF	; 255
 1d4:	fa 01       	movw	r30, r20
 1d6:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 1d8:	33 23       	and	r19, r19
 1da:	09 f4       	brne	.+2      	; 0x1de <digitalWrite+0x26>
 1dc:	40 c0       	rjmp	.+128    	; 0x25e <digitalWrite+0xa6>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 1de:	22 23       	and	r18, r18
 1e0:	51 f1       	breq	.+84     	; 0x236 <digitalWrite+0x7e>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 1e2:	23 30       	cpi	r18, 0x03	; 3
 1e4:	71 f0       	breq	.+28     	; 0x202 <digitalWrite+0x4a>
 1e6:	24 30       	cpi	r18, 0x04	; 4
 1e8:	28 f4       	brcc	.+10     	; 0x1f4 <digitalWrite+0x3c>
 1ea:	21 30       	cpi	r18, 0x01	; 1
 1ec:	a1 f0       	breq	.+40     	; 0x216 <digitalWrite+0x5e>
 1ee:	22 30       	cpi	r18, 0x02	; 2
 1f0:	11 f5       	brne	.+68     	; 0x236 <digitalWrite+0x7e>
 1f2:	14 c0       	rjmp	.+40     	; 0x21c <digitalWrite+0x64>
 1f4:	26 30       	cpi	r18, 0x06	; 6
 1f6:	b1 f0       	breq	.+44     	; 0x224 <digitalWrite+0x6c>
 1f8:	27 30       	cpi	r18, 0x07	; 7
 1fa:	c1 f0       	breq	.+48     	; 0x22c <digitalWrite+0x74>
 1fc:	24 30       	cpi	r18, 0x04	; 4
 1fe:	d9 f4       	brne	.+54     	; 0x236 <digitalWrite+0x7e>
 200:	04 c0       	rjmp	.+8      	; 0x20a <digitalWrite+0x52>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 202:	80 91 80 00 	lds	r24, 0x0080
 206:	8f 77       	andi	r24, 0x7F	; 127
 208:	03 c0       	rjmp	.+6      	; 0x210 <digitalWrite+0x58>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 20a:	80 91 80 00 	lds	r24, 0x0080
 20e:	8f 7d       	andi	r24, 0xDF	; 223
 210:	80 93 80 00 	sts	0x0080, r24
 214:	10 c0       	rjmp	.+32     	; 0x236 <digitalWrite+0x7e>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 216:	84 b5       	in	r24, 0x24	; 36
 218:	8f 77       	andi	r24, 0x7F	; 127
 21a:	02 c0       	rjmp	.+4      	; 0x220 <digitalWrite+0x68>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 21c:	84 b5       	in	r24, 0x24	; 36
 21e:	8f 7d       	andi	r24, 0xDF	; 223
 220:	84 bd       	out	0x24, r24	; 36
 222:	09 c0       	rjmp	.+18     	; 0x236 <digitalWrite+0x7e>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 224:	80 91 b0 00 	lds	r24, 0x00B0
 228:	8f 77       	andi	r24, 0x7F	; 127
 22a:	03 c0       	rjmp	.+6      	; 0x232 <digitalWrite+0x7a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 22c:	80 91 b0 00 	lds	r24, 0x00B0
 230:	8f 7d       	andi	r24, 0xDF	; 223
 232:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 236:	e3 2f       	mov	r30, r19
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	ee 0f       	add	r30, r30
 23c:	ff 1f       	adc	r31, r31
 23e:	ee 58       	subi	r30, 0x8E	; 142
 240:	ff 4f       	sbci	r31, 0xFF	; 255
 242:	a5 91       	lpm	r26, Z+
 244:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
 246:	2f b7       	in	r18, 0x3f	; 63
	cli();
 248:	f8 94       	cli

	if (val == LOW) {
 24a:	66 23       	and	r22, r22
 24c:	21 f4       	brne	.+8      	; 0x256 <digitalWrite+0x9e>
		*out &= ~bit;
 24e:	8c 91       	ld	r24, X
 250:	90 95       	com	r25
 252:	89 23       	and	r24, r25
 254:	02 c0       	rjmp	.+4      	; 0x25a <digitalWrite+0xa2>
	} else {
		*out |= bit;
 256:	8c 91       	ld	r24, X
 258:	89 2b       	or	r24, r25
 25a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
 25c:	2f bf       	out	0x3f, r18	; 63
 25e:	08 95       	ret

00000260 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	3f 93       	push	r19
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 276:	80 91 06 01 	lds	r24, 0x0106
 27a:	90 91 07 01 	lds	r25, 0x0107
 27e:	a0 91 08 01 	lds	r26, 0x0108
 282:	b0 91 09 01 	lds	r27, 0x0109
	unsigned char f = timer0_fract;
 286:	30 91 0a 01 	lds	r19, 0x010A

	m += MILLIS_INC;
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	a1 1d       	adc	r26, r1
 28e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 290:	23 2f       	mov	r18, r19
 292:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 294:	2d 37       	cpi	r18, 0x7D	; 125
 296:	20 f0       	brcs	.+8      	; 0x2a0 <__vector_16+0x40>
		f -= FRACT_MAX;
 298:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	a1 1d       	adc	r26, r1
 29e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 2a0:	20 93 0a 01 	sts	0x010A, r18
	timer0_millis = m;
 2a4:	80 93 06 01 	sts	0x0106, r24
 2a8:	90 93 07 01 	sts	0x0107, r25
 2ac:	a0 93 08 01 	sts	0x0108, r26
 2b0:	b0 93 09 01 	sts	0x0109, r27
	timer0_overflow_count++;
 2b4:	80 91 02 01 	lds	r24, 0x0102
 2b8:	90 91 03 01 	lds	r25, 0x0103
 2bc:	a0 91 04 01 	lds	r26, 0x0104
 2c0:	b0 91 05 01 	lds	r27, 0x0105
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	a1 1d       	adc	r26, r1
 2c8:	b1 1d       	adc	r27, r1
 2ca:	80 93 02 01 	sts	0x0102, r24
 2ce:	90 93 03 01 	sts	0x0103, r25
 2d2:	a0 93 04 01 	sts	0x0104, r26
 2d6:	b0 93 05 01 	sts	0x0105, r27
}
 2da:	bf 91       	pop	r27
 2dc:	af 91       	pop	r26
 2de:	9f 91       	pop	r25
 2e0:	8f 91       	pop	r24
 2e2:	3f 91       	pop	r19
 2e4:	2f 91       	pop	r18
 2e6:	0f 90       	pop	r0
 2e8:	0f be       	out	0x3f, r0	; 63
 2ea:	0f 90       	pop	r0
 2ec:	1f 90       	pop	r1
 2ee:	18 95       	reti

000002f0 <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
 2f0:	9b 01       	movw	r18, r22
 2f2:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 2f4:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 2f6:	f8 94       	cli
	m = timer0_overflow_count;
 2f8:	80 91 02 01 	lds	r24, 0x0102
 2fc:	90 91 03 01 	lds	r25, 0x0103
 300:	a0 91 04 01 	lds	r26, 0x0104
 304:	b0 91 05 01 	lds	r27, 0x0105
#if defined(TCNT0)
	t = TCNT0;
 308:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 30a:	a8 9b       	sbis	0x15, 0	; 21
 30c:	05 c0       	rjmp	.+10     	; 0x318 <delay+0x28>
 30e:	6f 3f       	cpi	r22, 0xFF	; 255
 310:	19 f0       	breq	.+6      	; 0x318 <delay+0x28>
		m++;
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	a1 1d       	adc	r26, r1
 316:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 318:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 31a:	ba 2f       	mov	r27, r26
 31c:	a9 2f       	mov	r26, r25
 31e:	98 2f       	mov	r25, r24
 320:	88 27       	eor	r24, r24
 322:	86 0f       	add	r24, r22
 324:	91 1d       	adc	r25, r1
 326:	a1 1d       	adc	r26, r1
 328:	b1 1d       	adc	r27, r1
 32a:	62 e0       	ldi	r22, 0x02	; 2
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	aa 1f       	adc	r26, r26
 332:	bb 1f       	adc	r27, r27
 334:	6a 95       	dec	r22
 336:	d1 f7       	brne	.-12     	; 0x32c <delay+0x3c>
 338:	bc 01       	movw	r22, r24
 33a:	2d c0       	rjmp	.+90     	; 0x396 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 33c:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 33e:	f8 94       	cli
	m = timer0_overflow_count;
 340:	80 91 02 01 	lds	r24, 0x0102
 344:	90 91 03 01 	lds	r25, 0x0103
 348:	a0 91 04 01 	lds	r26, 0x0104
 34c:	b0 91 05 01 	lds	r27, 0x0105
#if defined(TCNT0)
	t = TCNT0;
 350:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 352:	a8 9b       	sbis	0x15, 0	; 21
 354:	05 c0       	rjmp	.+10     	; 0x360 <delay+0x70>
 356:	ef 3f       	cpi	r30, 0xFF	; 255
 358:	19 f0       	breq	.+6      	; 0x360 <delay+0x70>
		m++;
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	a1 1d       	adc	r26, r1
 35e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 360:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 362:	ba 2f       	mov	r27, r26
 364:	a9 2f       	mov	r26, r25
 366:	98 2f       	mov	r25, r24
 368:	88 27       	eor	r24, r24
 36a:	8e 0f       	add	r24, r30
 36c:	91 1d       	adc	r25, r1
 36e:	a1 1d       	adc	r26, r1
 370:	b1 1d       	adc	r27, r1
 372:	e2 e0       	ldi	r30, 0x02	; 2
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	aa 1f       	adc	r26, r26
 37a:	bb 1f       	adc	r27, r27
 37c:	ea 95       	dec	r30
 37e:	d1 f7       	brne	.-12     	; 0x374 <delay+0x84>
 380:	86 1b       	sub	r24, r22
 382:	97 0b       	sbc	r25, r23
 384:	88 5e       	subi	r24, 0xE8	; 232
 386:	93 40       	sbci	r25, 0x03	; 3
 388:	c8 f2       	brcs	.-78     	; 0x33c <delay+0x4c>
			ms--;
 38a:	21 50       	subi	r18, 0x01	; 1
 38c:	30 40       	sbci	r19, 0x00	; 0
 38e:	40 40       	sbci	r20, 0x00	; 0
 390:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 392:	68 51       	subi	r22, 0x18	; 24
 394:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 396:	21 15       	cp	r18, r1
 398:	31 05       	cpc	r19, r1
 39a:	41 05       	cpc	r20, r1
 39c:	51 05       	cpc	r21, r1
 39e:	71 f6       	brne	.-100    	; 0x33c <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 3a0:	08 95       	ret

000003a2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 3a2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 3a4:	84 b5       	in	r24, 0x24	; 36
 3a6:	82 60       	ori	r24, 0x02	; 2
 3a8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 3aa:	84 b5       	in	r24, 0x24	; 36
 3ac:	81 60       	ori	r24, 0x01	; 1
 3ae:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 3b0:	85 b5       	in	r24, 0x25	; 37
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 3b6:	85 b5       	in	r24, 0x25	; 37
 3b8:	81 60       	ori	r24, 0x01	; 1
 3ba:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 3bc:	ee e6       	ldi	r30, 0x6E	; 110
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	81 60       	ori	r24, 0x01	; 1
 3c4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 3c6:	e1 e8       	ldi	r30, 0x81	; 129
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 3cc:	80 81       	ld	r24, Z
 3ce:	82 60       	ori	r24, 0x02	; 2
 3d0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 3d2:	80 81       	ld	r24, Z
 3d4:	81 60       	ori	r24, 0x01	; 1
 3d6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 3d8:	e0 e8       	ldi	r30, 0x80	; 128
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 3e2:	e1 eb       	ldi	r30, 0xB1	; 177
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	84 60       	ori	r24, 0x04	; 4
 3ea:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 3ec:	e0 eb       	ldi	r30, 0xB0	; 176
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	81 60       	ori	r24, 0x01	; 1
 3f4:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 3f6:	ea e7       	ldi	r30, 0x7A	; 122
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	84 60       	ori	r24, 0x04	; 4
 3fe:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 400:	80 81       	ld	r24, Z
 402:	82 60       	ori	r24, 0x02	; 2
 404:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 406:	80 81       	ld	r24, Z
 408:	81 60       	ori	r24, 0x01	; 1
 40a:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 40c:	80 81       	ld	r24, Z
 40e:	80 68       	ori	r24, 0x80	; 128
 410:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 412:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 416:	08 95       	ret

00000418 <main>:
#include <Arduino.h>

int main(void) __attribute__((weak));
int main(void)
 418:	cf 93       	push	r28
 41a:	df 93       	push	r29
{
	init();
 41c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 420:	0e 94 97 00 	call	0x12e	; 0x12e <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 424:	c0 e0       	ldi	r28, 0x00	; 0
 426:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 428:	0e 94 80 00 	call	0x100	; 0x100 <loop>
		if (serialEventRun) serialEventRun();
 42c:	20 97       	sbiw	r28, 0x00	; 0
 42e:	e1 f3       	breq	.-8      	; 0x428 <main+0x10>
 430:	0e 94 00 00 	call	0	; 0x0 <__heap_end>
 434:	f9 cf       	rjmp	.-14     	; 0x428 <main+0x10>

00000436 <_exit>:
 436:	f8 94       	cli

00000438 <__stop_program>:
 438:	ff cf       	rjmp	.-2      	; 0x438 <__stop_program>
