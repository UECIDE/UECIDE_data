/home/matt/.uecide/compilers/avr-sam-gcc/bin/arm-none-eabi-objdump -h -S /tmp/build-ed0e99e2-e4bb-4184-a8f6-a49064c107d0/AnalogReadSerial.elf 

/tmp/build-ed0e99e2-e4bb-4184-a8f6-a49064c107d0/AnalogReadSerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002818  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20070000  00082818  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004a4  20070050  00082868  00010050  2**2
                  ALLOC
  3 .ARM.attributes 00000025  00000000  00000000  00010050  2**0
                  CONTENTS, READONLY
  4 .comment      00000386  00000000  00000000  00010075  2**0
                  CONTENTS, READONLY
  5 .debug_abbrev 00002b58  00000000  00000000  000103fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010afd  00000000  00000000  00012f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003e20  00000000  00000000  00023a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000046a3  00000000  00000000  00027870  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 000014f2  00000000  00000000  0002bf13  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000968  00000000  00000000  0002d405  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001180  00000000  00000000  0002dd6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003be9  00000000  00000000  0002eeed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000296c  00000000  00000000  00032ad8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20088000 	.word	0x20088000
   80004:	000814cd 	.word	0x000814cd
   80008:	000801f7 	.word	0x000801f7
   8000c:	000801f7 	.word	0x000801f7
   80010:	000801f7 	.word	0x000801f7
   80014:	000801f7 	.word	0x000801f7
   80018:	000801f7 	.word	0x000801f7
	...
   8002c:	00080213 	.word	0x00080213
   80030:	000801f7 	.word	0x000801f7
   80034:	00000000 	.word	0x00000000
   80038:	0008020f 	.word	0x0008020f
   8003c:	000801f9 	.word	0x000801f9
   80040:	000801f7 	.word	0x000801f7
   80044:	000801f7 	.word	0x000801f7
   80048:	000801f7 	.word	0x000801f7
   8004c:	000801f7 	.word	0x000801f7
   80050:	000801f7 	.word	0x000801f7
   80054:	000801f7 	.word	0x000801f7
   80058:	000801f7 	.word	0x000801f7
   8005c:	000801f7 	.word	0x000801f7
   80060:	00080f09 	.word	0x00080f09
   80064:	000801f7 	.word	0x000801f7
   80068:	00000000 	.word	0x00000000
   8006c:	000801f7 	.word	0x000801f7
   80070:	000801f7 	.word	0x000801f7
   80074:	000801f7 	.word	0x000801f7
   80078:	000801f7 	.word	0x000801f7
	...
   80084:	00080efd 	.word	0x00080efd
   80088:	00080ef1 	.word	0x00080ef1
   8008c:	000801f7 	.word	0x000801f7
   80090:	00080ee5 	.word	0x00080ee5
   80094:	000801f7 	.word	0x000801f7
   80098:	000801f7 	.word	0x000801f7
   8009c:	000801f7 	.word	0x000801f7
   800a0:	000801f7 	.word	0x000801f7
   800a4:	00000000 	.word	0x00000000
   800a8:	000801f7 	.word	0x000801f7
   800ac:	000801f7 	.word	0x000801f7
   800b0:	000801f7 	.word	0x000801f7
   800b4:	000801f7 	.word	0x000801f7
   800b8:	000801f7 	.word	0x000801f7
   800bc:	000801f7 	.word	0x000801f7
   800c0:	000801f7 	.word	0x000801f7
   800c4:	000801f7 	.word	0x000801f7
   800c8:	000801f7 	.word	0x000801f7
   800cc:	000801f7 	.word	0x000801f7
   800d0:	000801f7 	.word	0x000801f7
   800d4:	000801f7 	.word	0x000801f7
   800d8:	000801f7 	.word	0x000801f7
   800dc:	000801f7 	.word	0x000801f7
   800e0:	00081995 	.word	0x00081995
   800e4:	000801f7 	.word	0x000801f7
   800e8:	000801f7 	.word	0x000801f7
   800ec:	000801f7 	.word	0x000801f7
   800f0:	000801f7 	.word	0x000801f7

000800f4 <__do_global_dtors_aux>:
   800f4:	f240 0350 	movw	r3, #80	; 0x50
   800f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   800fc:	781a      	ldrb	r2, [r3, #0]
   800fe:	b90a      	cbnz	r2, 80104 <__do_global_dtors_aux+0x10>
   80100:	2001      	movs	r0, #1
   80102:	7018      	strb	r0, [r3, #0]
   80104:	4770      	bx	lr
   80106:	bf00      	nop

00080108 <frame_dummy>:
   80108:	f642 0018 	movw	r0, #10264	; 0x2818
   8010c:	f2c0 0008 	movt	r0, #8
   80110:	b508      	push	{r3, lr}
   80112:	6803      	ldr	r3, [r0, #0]
   80114:	b12b      	cbz	r3, 80122 <frame_dummy+0x1a>
   80116:	f240 0300 	movw	r3, #0
   8011a:	f2c0 0300 	movt	r3, #0
   8011e:	b103      	cbz	r3, 80122 <frame_dummy+0x1a>
   80120:	4798      	blx	r3
   80122:	bd08      	pop	{r3, pc}

00080124 <loop>:
   80124:	b510      	push	{r4, lr}
   80126:	2036      	movs	r0, #54	; 0x36
   80128:	f000 f81e 	bl	80168 <analogRead>
   8012c:	220a      	movs	r2, #10
   8012e:	4601      	mov	r1, r0
   80130:	4803      	ldr	r0, [pc, #12]	; (80140 <loop+0x1c>)
   80132:	f000 f90f 	bl	80354 <_ZN5Print7printlnEii>
   80136:	2001      	movs	r0, #1
   80138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8013c:	f000 b84e 	b.w	801dc <delay>
   80140:	200700dc 	.word	0x200700dc

00080144 <setup>:
   80144:	4802      	ldr	r0, [pc, #8]	; (80150 <setup+0xc>)
   80146:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   8014a:	f000 b981 	b.w	80450 <_ZN9UARTClass5beginEm>
   8014e:	bf00      	nop
   80150:	200700dc 	.word	0x200700dc

00080154 <analogOutputInit>:

static uint8_t PWMEnabled = 0;
static uint8_t pinEnabled[PINS_COUNT];
static uint8_t TCChanEnabled[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};

void analogOutputInit(void) {
   80154:	2300      	movs	r3, #0
	uint8_t i;
	for (i=0; i<PINS_COUNT; i++)
		pinEnabled[i] = 0;
   80156:	4a03      	ldr	r2, [pc, #12]	; (80164 <analogOutputInit+0x10>)
   80158:	2100      	movs	r1, #0
   8015a:	54d1      	strb	r1, [r2, r3]
   8015c:	3301      	adds	r3, #1
static uint8_t pinEnabled[PINS_COUNT];
static uint8_t TCChanEnabled[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};

void analogOutputInit(void) {
	uint8_t i;
	for (i=0; i<PINS_COUNT; i++)
   8015e:	2b4f      	cmp	r3, #79	; 0x4f
   80160:	d1f9      	bne.n	80156 <analogOutputInit+0x2>
		pinEnabled[i] = 0;
}
   80162:	4770      	bx	lr
   80164:	20070054 	.word	0x20070054

00080168 <analogRead>:
uint32_t analogRead(uint32_t ulPin)
{
  uint32_t ulValue = 0;
  uint32_t ulChannel;

  if (ulPin < A0)
   80168:	2835      	cmp	r0, #53	; 0x35
{
	analog_reference = ulMode;
}

uint32_t analogRead(uint32_t ulPin)
{
   8016a:	b538      	push	{r3, r4, r5, lr}
  uint32_t ulChannel;

  if (ulPin < A0)
    ulPin += A0;

  ulChannel = g_APinDescription[ulPin].ulADCChannelNumber ;
   8016c:	4b18      	ldr	r3, [pc, #96]	; (801d0 <analogRead+0x68>)
{
  uint32_t ulValue = 0;
  uint32_t ulChannel;

  if (ulPin < A0)
    ulPin += A0;
   8016e:	bf98      	it	ls
   80170:	3036      	addls	r0, #54	; 0x36

  ulChannel = g_APinDescription[ulPin].ulADCChannelNumber ;
   80172:	221c      	movs	r2, #28
   80174:	fb02 3000 	mla	r0, r2, r0, r3
			break;
	}
#endif

#if defined __SAM3X8E__ || defined __SAM3X8H__
	switch ( g_APinDescription[ulPin].ulAnalogChannel )
   80178:	f990 3018 	ldrsb.w	r3, [r0, #24]
  uint32_t ulChannel;

  if (ulPin < A0)
    ulPin += A0;

  ulChannel = g_APinDescription[ulPin].ulADCChannelNumber ;
   8017c:	7e45      	ldrb	r5, [r0, #25]
			break;
	}
#endif

#if defined __SAM3X8E__ || defined __SAM3X8H__
	switch ( g_APinDescription[ulPin].ulAnalogChannel )
   8017e:	2b0b      	cmp	r3, #11
   80180:	d901      	bls.n	80186 <analogRead+0x1e>
   80182:	2400      	movs	r4, #0
   80184:	e022      	b.n	801cc <analogRead+0x64>
		case ADC9 :
		case ADC10 :
		case ADC11 :

			// Enable the corresponding channel
			adc_enable_channel( ADC, ulChannel );
   80186:	4813      	ldr	r0, [pc, #76]	; (801d4 <analogRead+0x6c>)
   80188:	4629      	mov	r1, r5
   8018a:	f001 fa0c 	bl	815a6 <adc_enable_channel>

			// Start the ADC
			adc_start( ADC );
   8018e:	4811      	ldr	r0, [pc, #68]	; (801d4 <analogRead+0x6c>)
   80190:	f001 fa06 	bl	815a0 <adc_start>

			// Wait for end of conversion
			while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY)
   80194:	480f      	ldr	r0, [pc, #60]	; (801d4 <analogRead+0x6c>)
   80196:	f001 fa16 	bl	815c6 <adc_get_status>
   8019a:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
   8019e:	d0f9      	beq.n	80194 <analogRead+0x2c>
				;

			// Read the value
			ulValue = adc_get_latest_value(ADC);
   801a0:	480c      	ldr	r0, [pc, #48]	; (801d4 <analogRead+0x6c>)
   801a2:	f001 fa0c 	bl	815be <adc_get_latest_value>
			ulValue = mapResolution(ulValue, ADC_RESOLUTION, _readResolution);
   801a6:	4b0c      	ldr	r3, [pc, #48]	; (801d8 <analogRead+0x70>)
			// Wait for end of conversion
			while ((adc_get_status(ADC) & ADC_ISR_DRDY) != ADC_ISR_DRDY)
				;

			// Read the value
			ulValue = adc_get_latest_value(ADC);
   801a8:	4604      	mov	r4, r0
			ulValue = mapResolution(ulValue, ADC_RESOLUTION, _readResolution);
   801aa:	681b      	ldr	r3, [r3, #0]
void analogWriteResolution(int res) {
	_writeResolution = res;
}

static inline uint32_t mapResolution(uint32_t value, uint32_t from, uint32_t to) {
	if (from == to)
   801ac:	2b0c      	cmp	r3, #12
   801ae:	d009      	beq.n	801c4 <analogRead+0x5c>
		return value;
	if (from > to)
   801b0:	2b0b      	cmp	r3, #11
   801b2:	d804      	bhi.n	801be <analogRead+0x56>
		return value >> (from-to);
   801b4:	f1c3 030c 	rsb	r3, r3, #12
   801b8:	fa30 f403 	lsrs.w	r4, r0, r3
   801bc:	e002      	b.n	801c4 <analogRead+0x5c>
	else
		return value << (to-from);
   801be:	3b0c      	subs	r3, #12
   801c0:	fa10 f403 	lsls.w	r4, r0, r3
			// Read the value
			ulValue = adc_get_latest_value(ADC);
			ulValue = mapResolution(ulValue, ADC_RESOLUTION, _readResolution);

			// Disable the corresponding channel
			adc_disable_channel(ADC, ulChannel);
   801c4:	4803      	ldr	r0, [pc, #12]	; (801d4 <analogRead+0x6c>)
   801c6:	4629      	mov	r1, r5
   801c8:	f001 f9f1 	bl	815ae <adc_disable_channel>
			break;
	}
#endif

	return ulValue;
}
   801cc:	4620      	mov	r0, r4
   801ce:	bd38      	pop	{r3, r4, r5, pc}
   801d0:	00081d1c 	.word	0x00081d1c
   801d4:	400c0000 	.word	0x400c0000
   801d8:	20070034 	.word	0x20070034

000801dc <delay>:
//     return count * 1000 + (SysTick->LOAD + 1 - ticks) / (SystemCoreClock/1000000) ;
// }


void delay( uint32_t ms )
{
   801dc:	b510      	push	{r4, lr}
   801de:	4604      	mov	r4, r0
    uint32_t end = GetTickCount() + ms;
   801e0:	f001 f91c 	bl	8141c <GetTickCount>
   801e4:	1904      	adds	r4, r0, r4
    while (GetTickCount() < end)
   801e6:	e001      	b.n	801ec <delay+0x10>
    	yield();
   801e8:	f000 feda 	bl	80fa0 <yield>


void delay( uint32_t ms )
{
    uint32_t end = GetTickCount() + ms;
    while (GetTickCount() < end)
   801ec:	f001 f916 	bl	8141c <GetTickCount>
   801f0:	42a0      	cmp	r0, r4
   801f2:	d3f9      	bcc.n	801e8 <delay+0xc>
    	yield();
}
   801f4:	bd10      	pop	{r4, pc}

000801f6 <ADC_Handler>:

#ifdef __cplusplus
extern "C" {
#endif

static void __halt() {
   801f6:	e7fe      	b.n	801f6 <ADC_Handler>

000801f8 <SysTick_Handler>:
void DebugMon_Handler  (void) __attribute__ ((weak, alias("__halt")));
void SVC_Handler       (void) { svcHook(); }
void PendSV_Handler    (void) {	pendSVHook(); }

void SysTick_Handler(void)
{
   801f8:	b510      	push	{r4, lr}
	if (sysTickHook())
   801fa:	f000 fed2 	bl	80fa2 <sysTickHook>
   801fe:	b928      	cbnz	r0, 8020c <SysTick_Handler+0x14>
		return;

	tickReset();
   80200:	f000 f8c0 	bl	80384 <tickReset>

	// Increment tick count each ms
	TimeTick_Increment();
}
   80204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;

	tickReset();

	// Increment tick count each ms
	TimeTick_Increment();
   80208:	f001 b900 	b.w	8140c <TimeTick_Increment>
   8020c:	bd10      	pop	{r4, pc}

0008020e <PendSV_Handler>:
void MemManage_Handler (void) __attribute__ ((weak, alias("__halt")));
void BusFault_Handler  (void) __attribute__ ((weak, alias("__halt")));
void UsageFault_Handler(void) __attribute__ ((weak, alias("__halt")));
void DebugMon_Handler  (void) __attribute__ ((weak, alias("__halt")));
void SVC_Handler       (void) { svcHook(); }
void PendSV_Handler    (void) {	pendSVHook(); }
   8020e:	f000 beca 	b.w	80fa6 <pendSVHook>

00080212 <SVC_Handler>:
void HardFault_Handler (void) __attribute__ ((weak, alias("__halt")));
void MemManage_Handler (void) __attribute__ ((weak, alias("__halt")));
void BusFault_Handler  (void) __attribute__ ((weak, alias("__halt")));
void UsageFault_Handler(void) __attribute__ ((weak, alias("__halt")));
void DebugMon_Handler  (void) __attribute__ ((weak, alias("__halt")));
void SVC_Handler       (void) { svcHook(); }
   80212:	f000 bec8 	b.w	80fa6 <pendSVHook>
	...

00080218 <digitalWrite>:
}

extern void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  /* Handle */
	if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
   80218:	221c      	movs	r2, #28
   8021a:	4342      	muls	r2, r0
   8021c:	4b0f      	ldr	r3, [pc, #60]	; (8025c <digitalWrite+0x44>)
        break ;
    }
}

extern void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
   8021e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   80220:	460e      	mov	r6, r1
  /* Handle */
	if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
   80222:	18d1      	adds	r1, r2, r3
   80224:	7b08      	ldrb	r0, [r1, #12]
   80226:	b1b0      	cbz	r0, 80256 <digitalWrite+0x3e>
  {
    return ;
  }

  if ( PIO_GetOutputDataStatus( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin ) == 0 )
   80228:	58d5      	ldr	r5, [r2, r3]
   8022a:	684c      	ldr	r4, [r1, #4]
   8022c:	4628      	mov	r0, r5
   8022e:	4621      	mov	r1, r4
   80230:	f001 f8a0 	bl	81374 <PIO_GetOutputDataStatus>
   80234:	b938      	cbnz	r0, 80246 <digitalWrite+0x2e>
  {
    PIO_PullUp( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal ) ;
   80236:	4628      	mov	r0, r5
   80238:	4621      	mov	r1, r4
   8023a:	4632      	mov	r2, r6
  }
  else
  {
    PIO_SetOutput( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal, 0, PIO_PULLUP ) ;
  }
}
   8023c:	b002      	add	sp, #8
   8023e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return ;
  }

  if ( PIO_GetOutputDataStatus( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin ) == 0 )
  {
    PIO_PullUp( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal ) ;
   80242:	f001 b807 	b.w	81254 <PIO_PullUp>
  }
  else
  {
    PIO_SetOutput( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal, 0, PIO_PULLUP ) ;
   80246:	2301      	movs	r3, #1
   80248:	9300      	str	r3, [sp, #0]
   8024a:	4628      	mov	r0, r5
   8024c:	4621      	mov	r1, r4
   8024e:	4632      	mov	r2, r6
   80250:	3b01      	subs	r3, #1
   80252:	f001 f839 	bl	812c8 <PIO_SetOutput>
  }
}
   80256:	b002      	add	sp, #8
   80258:	bd70      	pop	{r4, r5, r6, pc}
   8025a:	bf00      	nop
   8025c:	00081d1c 	.word	0x00081d1c

00080260 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   80260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80264:	2600      	movs	r6, #0
   80266:	4604      	mov	r4, r0
   80268:	460d      	mov	r5, r1
   8026a:	4690      	mov	r8, r2
   8026c:	4637      	mov	r7, r6
  size_t n = 0;
  while (size--) {
   8026e:	e008      	b.n	80282 <_ZN5Print5writeEPKhj+0x22>
    n += write(*buffer++);
   80270:	6823      	ldr	r3, [r4, #0]
   80272:	5da9      	ldrb	r1, [r5, r6]
   80274:	681b      	ldr	r3, [r3, #0]
   80276:	4620      	mov	r0, r4
   80278:	4798      	blx	r3
   8027a:	3601      	adds	r6, #1
   8027c:	183f      	adds	r7, r7, r0
   8027e:	f108 38ff 	add.w	r8, r8, #4294967295

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   80282:	f1b8 0f00 	cmp.w	r8, #0
   80286:	d1f3      	bne.n	80270 <_ZN5Print5writeEPKhj+0x10>
    n += write(*buffer++);
  }
  return n;
}
   80288:	4638      	mov	r0, r7
   8028a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0008028e <_ZN5Print5printEc>:
{
  return write(str);
}

size_t Print::print(char c)
{
   8028e:	b508      	push	{r3, lr}
  return write(c);
   80290:	6803      	ldr	r3, [r0, #0]
   80292:	681b      	ldr	r3, [r3, #0]
   80294:	4798      	blx	r3
}
   80296:	bd08      	pop	{r3, pc}

00080298 <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   80298:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   8029a:	210d      	movs	r1, #13
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   8029c:	4605      	mov	r5, r0
  size_t n = print('\r');
   8029e:	f7ff fff6 	bl	8028e <_ZN5Print5printEc>
  n += print('\n');
   802a2:	210a      	movs	r1, #10
  return x.printTo(*this);
}

size_t Print::println(void)
{
  size_t n = print('\r');
   802a4:	4604      	mov	r4, r0
  n += print('\n');
   802a6:	4628      	mov	r0, r5
   802a8:	f7ff fff1 	bl	8028e <_ZN5Print5printEc>
  return n;
}
   802ac:	1900      	adds	r0, r0, r4
   802ae:	bd38      	pop	{r3, r4, r5, pc}

000802b0 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   802b0:	b538      	push	{r3, r4, r5, lr}
   802b2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   802b4:	460c      	mov	r4, r1
   802b6:	b909      	cbnz	r1, 802bc <_ZN5Print5writeEPKc+0xc>
   802b8:	4608      	mov	r0, r1
   802ba:	bd38      	pop	{r3, r4, r5, pc}
      return write((const uint8_t *)str, strlen(str));
   802bc:	4608      	mov	r0, r1
   802be:	f001 fc03 	bl	81ac8 <strlen>
   802c2:	682b      	ldr	r3, [r5, #0]
   802c4:	4602      	mov	r2, r0
   802c6:	685b      	ldr	r3, [r3, #4]
   802c8:	4628      	mov	r0, r5
   802ca:	4621      	mov	r1, r4
   802cc:	4798      	blx	r3
    }
   802ce:	bd38      	pop	{r3, r4, r5, pc}

000802d0 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   802d0:	b510      	push	{r4, lr}
   802d2:	b08a      	sub	sp, #40	; 0x28
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   802d4:	ab0a      	add	r3, sp, #40	; 0x28
   802d6:	f04f 0c00 	mov.w	ip, #0
   802da:	f803 cd04 	strb.w	ip, [r3, #-4]!

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   802de:	2a01      	cmp	r2, #1
   802e0:	bf98      	it	ls
   802e2:	220a      	movls	r2, #10

  do {
    unsigned long m = n;
    n /= base;
   802e4:	fbb1 f4f2 	udiv	r4, r1, r2
    char c = m - base * n;
   802e8:	fb04 1112 	mls	r1, r4, r2, r1
   802ec:	b2c9      	uxtb	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   802ee:	3b01      	subs	r3, #1
   802f0:	2909      	cmp	r1, #9
   802f2:	d801      	bhi.n	802f8 <_ZN5Print11printNumberEmh+0x28>
   802f4:	3130      	adds	r1, #48	; 0x30
   802f6:	e000      	b.n	802fa <_ZN5Print11printNumberEmh+0x2a>
   802f8:	3137      	adds	r1, #55	; 0x37
   802fa:	b2c9      	uxtb	r1, r1
   802fc:	7019      	strb	r1, [r3, #0]
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   802fe:	b10c      	cbz	r4, 80304 <_ZN5Print11printNumberEmh+0x34>
   80300:	4621      	mov	r1, r4
   80302:	e7ef      	b.n	802e4 <_ZN5Print11printNumberEmh+0x14>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   80304:	4619      	mov	r1, r3
   80306:	f7ff ffd3 	bl	802b0 <_ZN5Print5writeEPKc>
}
   8030a:	b00a      	add	sp, #40	; 0x28
   8030c:	bd10      	pop	{r4, pc}

0008030e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   8030e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80312:	4606      	mov	r6, r0
   80314:	460d      	mov	r5, r1
  if (base == 0) {
   80316:	4614      	mov	r4, r2
   80318:	b92a      	cbnz	r2, 80326 <_ZN5Print5printEli+0x18>
    return write(n);
   8031a:	6803      	ldr	r3, [r0, #0]
   8031c:	b2c9      	uxtb	r1, r1
   8031e:	681b      	ldr	r3, [r3, #0]
   80320:	4798      	blx	r3
   80322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (base == 10) {
   80326:	2a0a      	cmp	r2, #10
   80328:	d10d      	bne.n	80346 <_ZN5Print5printEli+0x38>
    if (n < 0) {
   8032a:	2900      	cmp	r1, #0
   8032c:	da0c      	bge.n	80348 <_ZN5Print5printEli+0x3a>
      int t = print('-');
   8032e:	212d      	movs	r1, #45	; 0x2d
   80330:	f7ff ffad 	bl	8028e <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   80334:	4269      	negs	r1, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   80336:	4607      	mov	r7, r0
      n = -n;
      return printNumber(n, 10) + t;
   80338:	4622      	mov	r2, r4
   8033a:	4630      	mov	r0, r6
   8033c:	f7ff ffc8 	bl	802d0 <_ZN5Print11printNumberEmh>
   80340:	19c0      	adds	r0, r0, r7
   80342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   80346:	b2d2      	uxtb	r2, r2
  }
}
   80348:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   8034c:	f7ff bfc0 	b.w	802d0 <_ZN5Print11printNumberEmh>

00080350 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   80350:	f7ff bfdd 	b.w	8030e <_ZN5Print5printEli>

00080354 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   80354:	b538      	push	{r3, r4, r5, lr}
   80356:	4604      	mov	r4, r0
  size_t n = print(num, base);
   80358:	f7ff fffa 	bl	80350 <_ZN5Print5printEii>
   8035c:	4605      	mov	r5, r0
  n += println();
   8035e:	4620      	mov	r0, r4
   80360:	f7ff ff9a 	bl	80298 <_ZN5Print7printlnEv>
  return n;
}
   80364:	1940      	adds	r0, r0, r5
   80366:	bd38      	pop	{r3, r4, r5, pc}

00080368 <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
   80368:	4b01      	ldr	r3, [pc, #4]	; (80370 <initiateReset+0x8>)
   8036a:	6018      	str	r0, [r3, #0]
	ticks = _ticks;
}
   8036c:	4770      	bx	lr
   8036e:	bf00      	nop
   80370:	20070038 	.word	0x20070038

00080374 <cancelReset>:

void cancelReset() {
   80374:	4b02      	ldr	r3, [pc, #8]	; (80380 <cancelReset+0xc>)
   80376:	f04f 32ff 	mov.w	r2, #4294967295
   8037a:	601a      	str	r2, [r3, #0]
	ticks = -1;
}
   8037c:	4770      	bx	lr
   8037e:	bf00      	nop
   80380:	20070038 	.word	0x20070038

00080384 <tickReset>:

void tickReset() {
   80384:	4a05      	ldr	r2, [pc, #20]	; (8039c <tickReset+0x18>)
   80386:	b508      	push	{r3, lr}
	if (ticks == -1)
   80388:	6813      	ldr	r3, [r2, #0]
   8038a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8038e:	d004      	beq.n	8039a <tickReset+0x16>
		return;
	ticks--;
   80390:	3b01      	subs	r3, #1
   80392:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
   80394:	b90b      	cbnz	r3, 8039a <tickReset+0x16>
		banzai();
   80396:	4b02      	ldr	r3, [pc, #8]	; (803a0 <tickReset+0x1c>)
   80398:	4798      	blx	r3
   8039a:	bd08      	pop	{r3, pc}
   8039c:	20070038 	.word	0x20070038
   803a0:	20070001 	.word	0x20070001

000803a4 <_ZN9UARTClasscvbEv>:
#elif defined __ICCARM__ /* IAR Ewarm 5.41+ */
//    virtual void write( const char *str ) ;
//    virtual void write( const uint8_t *buffer, size_t size ) ;
#endif

    operator bool() { return true; }; // UART always active
   803a4:	2001      	movs	r0, #1
   803a6:	4770      	bx	lr

000803a8 <_ZN9UARTClassC1EP4Uart4IRQnmP10RingBuffer>:
#include <string.h>
#include "UARTClass.h"

// Constructors ////////////////////////////////////////////////////////////////

UARTClass::UARTClass( Uart* pUart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
   803a8:	b530      	push	{r4, r5, lr}
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   803aa:	2500      	movs	r5, #0
   803ac:	6045      	str	r5, [r0, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   803ae:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   803b2:	6085      	str	r5, [r0, #8]
   803b4:	4d04      	ldr	r5, [pc, #16]	; (803c8 <_ZN9UARTClassC1EP4Uart4IRQnmP10RingBuffer+0x20>)
   803b6:	4604      	mov	r4, r0
   803b8:	6005      	str	r5, [r0, #0]
{
  _rx_buffer = pRx_buffer ;
   803ba:	9d03      	ldr	r5, [sp, #12]

  _pUart=pUart ;
   803bc:	6141      	str	r1, [r0, #20]

// Constructors ////////////////////////////////////////////////////////////////

UARTClass::UARTClass( Uart* pUart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
{
  _rx_buffer = pRx_buffer ;
   803be:	6105      	str	r5, [r0, #16]

  _pUart=pUart ;
  _dwIrq=dwIrq ;
   803c0:	7602      	strb	r2, [r0, #24]
  _dwId=dwId ;
   803c2:	61c3      	str	r3, [r0, #28]
}
   803c4:	bd30      	pop	{r4, r5, pc}
   803c6:	bf00      	nop
   803c8:	00081b30 	.word	0x00081b30

000803cc <_ZN9UARTClass9availableEv>:
  pmc_disable_periph_clk( _dwId ) ;
}

int UARTClass::available( void )
{
  return (uint32_t)(SERIAL_BUFFER_SIZE + _rx_buffer->_iHead - _rx_buffer->_iTail) % SERIAL_BUFFER_SIZE ;
   803cc:	6903      	ldr	r3, [r0, #16]
   803ce:	6c18      	ldr	r0, [r3, #64]	; 0x40
   803d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   803d2:	1ac0      	subs	r0, r0, r3
}
   803d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   803d8:	4770      	bx	lr

000803da <_ZN9UARTClass4peekEv>:

int UARTClass::peek( void )
{
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   803da:	6903      	ldr	r3, [r0, #16]
   803dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   803de:	6c19      	ldr	r1, [r3, #64]	; 0x40
   803e0:	4291      	cmp	r1, r2
   803e2:	bf0c      	ite	eq
   803e4:	f04f 30ff 	moveq.w	r0, #4294967295
    return -1 ;

  return _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   803e8:	5c98      	ldrbne	r0, [r3, r2]
}
   803ea:	4770      	bx	lr

000803ec <_ZN9UARTClass4readEv>:

int UARTClass::read( void )
{
  // if the head isn't ahead of the tail, we don't have any characters
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   803ec:	6903      	ldr	r3, [r0, #16]
   803ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   803f0:	6c19      	ldr	r1, [r3, #64]	; 0x40
   803f2:	4291      	cmp	r1, r2
   803f4:	d102      	bne.n	803fc <_ZN9UARTClass4readEv+0x10>
   803f6:	f04f 30ff 	mov.w	r0, #4294967295
   803fa:	4770      	bx	lr
    return -1 ;

  uint8_t uc = _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   803fc:	5c98      	ldrb	r0, [r3, r2]
  _rx_buffer->_iTail = (unsigned int)(_rx_buffer->_iTail + 1) % SERIAL_BUFFER_SIZE ;
   803fe:	3201      	adds	r2, #1
   80400:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   80404:	645a      	str	r2, [r3, #68]	; 0x44
  return uc ;
}
   80406:	4770      	bx	lr

00080408 <_ZN9UARTClass5flushEv>:

void UARTClass::flush( void )
{
  // Wait for transmission to complete
  while ((_pUart->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80408:	6943      	ldr	r3, [r0, #20]
   8040a:	695a      	ldr	r2, [r3, #20]
   8040c:	f012 0f02 	tst.w	r2, #2
   80410:	d0fb      	beq.n	8040a <_ZN9UARTClass5flushEv+0x2>
    ;
}
   80412:	4770      	bx	lr

00080414 <_ZN9UARTClass5writeEh>:

size_t UARTClass::write( const uint8_t uc_data )
{
  // Check if the transmitter is ready
  while ((_pUart->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80414:	6943      	ldr	r3, [r0, #20]
   80416:	695a      	ldr	r2, [r3, #20]
   80418:	f012 0f02 	tst.w	r2, #2
   8041c:	d0fb      	beq.n	80416 <_ZN9UARTClass5writeEh+0x2>
    ;

  // Send character
  _pUart->UART_THR = uc_data;
   8041e:	61d9      	str	r1, [r3, #28]
  return 1;
}
   80420:	2001      	movs	r0, #1
   80422:	4770      	bx	lr

00080424 <_ZN9UARTClass10IrqHandlerEv>:

void UARTClass::IrqHandler( void )
{
   80424:	b538      	push	{r3, r4, r5, lr}
  uint32_t status = _pUart->UART_SR;
   80426:	6943      	ldr	r3, [r0, #20]
  _pUart->UART_THR = uc_data;
  return 1;
}

void UARTClass::IrqHandler( void )
{
   80428:	4604      	mov	r4, r0
  uint32_t status = _pUart->UART_SR;
   8042a:	695d      	ldr	r5, [r3, #20]

  // Did we receive data ?
  if ((status & UART_SR_RXRDY) == UART_SR_RXRDY)
   8042c:	f015 0f01 	tst.w	r5, #1
   80430:	d004      	beq.n	8043c <_ZN9UARTClass10IrqHandlerEv+0x18>
    _rx_buffer->store_char(_pUart->UART_RHR);
   80432:	6999      	ldr	r1, [r3, #24]
   80434:	6900      	ldr	r0, [r0, #16]
   80436:	b2c9      	uxtb	r1, r1
   80438:	f000 fdb6 	bl	80fa8 <_ZN10RingBuffer10store_charEh>

  // Acknowledge errors
  if ((status & UART_SR_OVRE) == UART_SR_OVRE ||
   8043c:	f015 0f60 	tst.w	r5, #96	; 0x60
   80440:	d004      	beq.n	8044c <_ZN9UARTClass10IrqHandlerEv+0x28>
		  (status & UART_SR_FRAME) == UART_SR_FRAME)
  {
	// TODO: error reporting outside ISR
    _pUart->UART_CR |= UART_CR_RSTSTA;
   80442:	6963      	ldr	r3, [r4, #20]
   80444:	681a      	ldr	r2, [r3, #0]
   80446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8044a:	601a      	str	r2, [r3, #0]
   8044c:	bd38      	pop	{r3, r4, r5, pc}
	...

00080450 <_ZN9UARTClass5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void UARTClass::begin( const uint32_t dwBaudRate )
{
   80450:	b538      	push	{r3, r4, r5, lr}
   80452:	4604      	mov	r4, r0
  // Configure PMC
  pmc_enable_periph_clk( _dwId ) ;
   80454:	69c0      	ldr	r0, [r0, #28]
}

// Public Methods //////////////////////////////////////////////////////////////

void UARTClass::begin( const uint32_t dwBaudRate )
{
   80456:	460d      	mov	r5, r1
  // Configure PMC
  pmc_enable_periph_clk( _dwId ) ;
   80458:	f000 ffa4 	bl	813a4 <pmc_enable_periph_clk>

  // Disable PDC channel
  _pUart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS ;
   8045c:	6963      	ldr	r3, [r4, #20]
   8045e:	f240 2202 	movw	r2, #514	; 0x202
   80462:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  // Reset and disable receiver and transmitter
  _pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS ;
   80466:	22ac      	movs	r2, #172	; 0xac
   80468:	601a      	str	r2, [r3, #0]

  // Configure mode
  _pUart->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL ;
   8046a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8046e:	605a      	str	r2, [r3, #4]

  // Configure baudrate (asynchronous, no oversampling)
  _pUart->UART_BRGR = (SystemCoreClock / dwBaudRate) >> 4 ;
   80470:	4a0c      	ldr	r2, [pc, #48]	; (804a4 <_ZN9UARTClass5beginEm+0x54>)

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80472:	2101      	movs	r1, #1
   80474:	6812      	ldr	r2, [r2, #0]
   80476:	fbb2 f5f5 	udiv	r5, r2, r5
   8047a:	092d      	lsrs	r5, r5, #4

  // Configure interrupts
  _pUart->UART_IDR = 0xFFFFFFFF;
   8047c:	f04f 32ff 	mov.w	r2, #4294967295

  // Configure mode
  _pUart->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL ;

  // Configure baudrate (asynchronous, no oversampling)
  _pUart->UART_BRGR = (SystemCoreClock / dwBaudRate) >> 4 ;
   80480:	621d      	str	r5, [r3, #32]

  // Configure interrupts
  _pUart->UART_IDR = 0xFFFFFFFF;
   80482:	60da      	str	r2, [r3, #12]
  _pUart->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME;
   80484:	3262      	adds	r2, #98	; 0x62
   80486:	609a      	str	r2, [r3, #8]

  // Enable UART interrupt in NVIC
  NVIC_EnableIRQ(_dwIrq);
   80488:	7e22      	ldrb	r2, [r4, #24]
   8048a:	b250      	sxtb	r0, r2
   8048c:	f002 021f 	and.w	r2, r2, #31
   80490:	fa11 f202 	lsls.w	r2, r1, r2
   80494:	4904      	ldr	r1, [pc, #16]	; (804a8 <_ZN9UARTClass5beginEm+0x58>)
   80496:	0940      	lsrs	r0, r0, #5
   80498:	f841 2020 	str.w	r2, [r1, r0, lsl #2]

  // Enable receiver and transmitter
  _pUart->UART_CR = UART_CR_RXEN | UART_CR_TXEN ;
   8049c:	2250      	movs	r2, #80	; 0x50
   8049e:	601a      	str	r2, [r3, #0]
}
   804a0:	bd38      	pop	{r3, r4, r5, pc}
   804a2:	bf00      	nop
   804a4:	20070048 	.word	0x20070048
   804a8:	e000e100 	.word	0xe000e100

000804ac <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
   804ac:	b508      	push	{r3, lr}
	init();
   804ae:	f000 fc8b 	bl	80dc8 <init>

	delay(1);
   804b2:	2001      	movs	r0, #1
   804b4:	f7ff fe92 	bl	801dc <delay>

#if defined(USBCON)
	USBDevice.attach();
   804b8:	4806      	ldr	r0, [pc, #24]	; (804d4 <main+0x28>)
   804ba:	f000 f82b 	bl	80514 <_ZN10USBDevice_6attachEv>
#endif

	setup();
   804be:	f7ff fe41 	bl	80144 <setup>

	for (;;)
	{
		loop();
   804c2:	f7ff fe2f 	bl	80124 <loop>
		if (serialEventRun) serialEventRun();
   804c6:	4b04      	ldr	r3, [pc, #16]	; (804d8 <main+0x2c>)
   804c8:	2b00      	cmp	r3, #0
   804ca:	d0fa      	beq.n	804c2 <main+0x16>
   804cc:	f3af 8000 	nop.w
   804d0:	e7f7      	b.n	804c2 <main+0x16>
   804d2:	bf00      	nop
   804d4:	200700b8 	.word	0x200700b8
   804d8:	00000000 	.word	0x00000000

000804dc <_Z16USBD_InitControli>:
int _cmark;
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
   804dc:	4b02      	ldr	r3, [pc, #8]	; (804e8 <_Z16USBD_InitControli+0xc>)
   804de:	2200      	movs	r2, #0
   804e0:	601a      	str	r2, [r3, #0]
	_cend = end;
   804e2:	4b02      	ldr	r3, [pc, #8]	; (804ec <_Z16USBD_InitControli+0x10>)
   804e4:	6018      	str	r0, [r3, #0]
}
   804e6:	4770      	bx	lr
   804e8:	200700a8 	.word	0x200700a8
   804ec:	200700ac 	.word	0x200700ac

000804f0 <_ZL11USB_SendZlpv>:
}


static void USB_SendZlp( void )
{
    while( UOTGHS_DEVEPTISR_TXINI != (UOTGHS->UOTGHS_DEVEPTISR[0] & UOTGHS_DEVEPTISR_TXINI ) )
   804f0:	e003      	b.n	804fa <_ZL11USB_SendZlpv+0xa>
    {
        if((UOTGHS->UOTGHS_DEVISR & UOTGHS_DEVISR_SUSP) == UOTGHS_DEVISR_SUSP)
   804f2:	685b      	ldr	r3, [r3, #4]
   804f4:	f013 0f01 	tst.w	r3, #1
   804f8:	d108      	bne.n	8050c <_ZL11USB_SendZlpv+0x1c>
}


static void USB_SendZlp( void )
{
    while( UOTGHS_DEVEPTISR_TXINI != (UOTGHS->UOTGHS_DEVEPTISR[0] & UOTGHS_DEVEPTISR_TXINI ) )
   804fa:	4b05      	ldr	r3, [pc, #20]	; (80510 <_ZL11USB_SendZlpv+0x20>)
   804fc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   80500:	f012 0f01 	tst.w	r2, #1
   80504:	d0f5      	beq.n	804f2 <_ZL11USB_SendZlpv+0x2>
        if((UOTGHS->UOTGHS_DEVISR & UOTGHS_DEVISR_SUSP) == UOTGHS_DEVISR_SUSP)
        {
            return;
        }
    }
    UOTGHS->UOTGHS_DEVEPTICR[0] = UOTGHS_DEVEPTICR_TXINIC;
   80506:	2201      	movs	r2, #1
   80508:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   8050c:	4770      	bx	lr
   8050e:	bf00      	nop
   80510:	400ac000 	.word	0x400ac000

00080514 <_ZN10USBDevice_6attachEv>:
		_usbInitialized=1UL;
	}
}

bool USBDevice_::attach(void)
{
   80514:	b508      	push	{r3, lr}
  if (_usbInitialized != 0UL)
   80516:	4b05      	ldr	r3, [pc, #20]	; (8052c <_ZN10USBDevice_6attachEv+0x18>)
   80518:	6818      	ldr	r0, [r3, #0]
   8051a:	b128      	cbz	r0, 80528 <_ZN10USBDevice_6attachEv+0x14>
  {
    UDD_Attach();
   8051c:	f001 f8c4 	bl	816a8 <UDD_Attach>
	_usbConfiguration = 0;
   80520:	4b03      	ldr	r3, [pc, #12]	; (80530 <_ZN10USBDevice_6attachEv+0x1c>)
   80522:	2200      	movs	r2, #0
   80524:	601a      	str	r2, [r3, #0]
   80526:	2001      	movs	r0, #1
  }
  else
  {
    return false;
  }
}
   80528:	bd08      	pop	{r3, pc}
   8052a:	bf00      	nop
   8052c:	200700b4 	.word	0x200700b4
   80530:	200700c4 	.word	0x200700c4

00080534 <_ZN10USBDevice_C1Ev>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
   80534:	b510      	push	{r4, lr}
   80536:	4604      	mov	r4, r0
{
	UDD_SetStack(&USB_ISR);
   80538:	4805      	ldr	r0, [pc, #20]	; (80550 <_ZN10USBDevice_C1Ev+0x1c>)
   8053a:	f001 f847 	bl	815cc <UDD_SetStack>

	if (UDD_Init() == 0UL)
   8053e:	f001 f84b 	bl	815d8 <UDD_Init>
   80542:	b910      	cbnz	r0, 8054a <_ZN10USBDevice_C1Ev+0x16>
	{
		_usbInitialized=1UL;
   80544:	4b03      	ldr	r3, [pc, #12]	; (80554 <_ZN10USBDevice_C1Ev+0x20>)
   80546:	2201      	movs	r2, #1
   80548:	601a      	str	r2, [r3, #0]
	}
}
   8054a:	4620      	mov	r0, r4
   8054c:	bd10      	pop	{r4, pc}
   8054e:	bf00      	nop
   80550:	00080689 	.word	0x00080689
   80554:	200700b4 	.word	0x200700b4

00080558 <_Z14USBD_Availablem>:
	}
};

//	Number of bytes, assumes a rx endpoint
uint32_t USBD_Available(uint32_t ep)
{
   80558:	b538      	push	{r3, r4, r5, lr}
typedef uint32_t irqflags_t;
extern int g_interrupt_enabled;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = g_interrupt_enabled;
   8055a:	4c09      	ldr	r4, [pc, #36]	; (80580 <_Z14USBD_Availablem+0x28>)
   8055c:	6825      	ldr	r5, [r4, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   8055e:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before 
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80560:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80564:	2300      	movs	r3, #0
	LockEP lock(ep);
	return UDD_FifoByteCount(ep & 0xF);
   80566:	f000 000f 	and.w	r0, r0, #15
   8056a:	6023      	str	r3, [r4, #0]
   8056c:	f001 f9c8 	bl	81900 <UDD_FifoByteCount>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80570:	b125      	cbz	r5, 8057c <_Z14USBD_Availablem+0x24>
		cpu_irq_enable();
   80572:	2301      	movs	r3, #1
   80574:	6023      	str	r3, [r4, #0]
   80576:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8057a:	b662      	cpsie	i
}
   8057c:	bd38      	pop	{r3, r4, r5, pc}
   8057e:	bf00      	nop
   80580:	2007004c 	.word	0x2007004c

00080584 <_Z10USBD_Flushm>:
		}
	}
}

void USBD_Flush(uint32_t ep)
{
   80584:	b510      	push	{r4, lr}
   80586:	4604      	mov	r4, r0
	if (UDD_FifoByteCount(ep))
   80588:	f001 f9ba 	bl	81900 <UDD_FifoByteCount>
   8058c:	b120      	cbz	r0, 80598 <_Z10USBD_Flushm+0x14>
		UDD_ReleaseTX(ep);
   8058e:	4620      	mov	r0, r4
}
   80590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void USBD_Flush(uint32_t ep)
{
	if (UDD_FifoByteCount(ep))
		UDD_ReleaseTX(ep);
   80594:	f001 b9d8 	b.w	81948 <UDD_ReleaseTX>
   80598:	bd10      	pop	{r4, pc}

0008059a <_Z24USBD_SendOtherInterfacesv>:
	TRACE_CORE(printf("=> USBD_SendInterfaces, total=%d interfaces=%d\r\n", total, interfaces);)
	return interfaces;
}

int USBD_SendOtherInterfaces(void)
{
   8059a:	b513      	push	{r0, r1, r4, lr}
	int total = 0;
	uint8_t interfaces = 0;
   8059c:	2300      	movs	r3, #0
   8059e:	ac02      	add	r4, sp, #8
   805a0:	f804 3d01 	strb.w	r3, [r4, #-1]!

#ifdef CDC_ENABLED
	total = CDC_GetOtherInterface(&interfaces);
   805a4:	4620      	mov	r0, r4
   805a6:	f000 fe01 	bl	811ac <_Z21CDC_GetOtherInterfacePh>
#endif

#ifdef HID_ENABLED
	total += HID_GetInterface(&interfaces);
   805aa:	4620      	mov	r0, r4
   805ac:	f000 fbf4 	bl	80d98 <_Z16HID_GetInterfacePh>
#endif

	total = total; // Get rid of compiler warning
	TRACE_CORE(printf("=> USBD_SendInterfaces, total=%d interfaces=%d\r\n", total, interfaces);)
	return interfaces;
}
   805b0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   805b4:	bd1c      	pop	{r2, r3, r4, pc}

000805b6 <_Z19USBD_SendInterfacesv>:

	return false;
}

int USBD_SendInterfaces(void)
{
   805b6:	b513      	push	{r0, r1, r4, lr}
	int total = 0;
	uint8_t interfaces = 0;
   805b8:	2300      	movs	r3, #0
   805ba:	ac02      	add	r4, sp, #8
   805bc:	f804 3d01 	strb.w	r3, [r4, #-1]!

#ifdef CDC_ENABLED
	total = CDC_GetInterface(&interfaces);
   805c0:	4620      	mov	r0, r4
   805c2:	f000 fdfd 	bl	811c0 <_Z16CDC_GetInterfacePh>
#endif

#ifdef HID_ENABLED
	total += HID_GetInterface(&interfaces);
   805c6:	4620      	mov	r0, r4
   805c8:	f000 fbe6 	bl	80d98 <_Z16HID_GetInterfacePh>
#endif

	total = total; // Get rid of compiler warning
	TRACE_CORE(printf("=> USBD_SendInterfaces, total=%d interfaces=%d\r\n", total, interfaces);)
	return interfaces;
}
   805cc:	f89d 0007 	ldrb.w	r0, [sp, #7]
   805d0:	bd1c      	pop	{r2, r3, r4, pc}

000805d2 <_Z26USBD_ClassInterfaceRequestR5Setup>:
}

//	Handle CLASS_INTERFACE requests
bool USBD_ClassInterfaceRequest(Setup& setup)
{
	uint8_t i = setup.wIndex;
   805d2:	7903      	ldrb	r3, [r0, #4]

	TRACE_CORE(printf("=> USBD_ClassInterfaceRequest\r\n");)

#ifdef CDC_ENABLED
	if (CDC_ACM_INTERFACE == i)
   805d4:	b90b      	cbnz	r3, 805da <_Z26USBD_ClassInterfaceRequestR5Setup+0x8>
	{
		return CDC_Setup(setup);
   805d6:	f000 bdfd 	b.w	811d4 <_Z9CDC_SetupR5Setup>
	}
#endif

#ifdef HID_ENABLED
	if (HID_INTERFACE == i)
   805da:	2b02      	cmp	r3, #2
   805dc:	d001      	beq.n	805e2 <_Z26USBD_ClassInterfaceRequestR5Setup+0x10>
		return HID_Setup(setup);
	}
#endif

	return false;
}
   805de:	2000      	movs	r0, #0
   805e0:	4770      	bx	lr
#endif

#ifdef HID_ENABLED
	if (HID_INTERFACE == i)
	{
		return HID_Setup(setup);
   805e2:	f000 bae7 	b.w	80bb4 <_Z9HID_SetupR5Setup>

000805e6 <_Z16USBD_RecvControlPvm>:

//	Does not timeout or cross fifo boundaries
//	Will only work for transfers <= 64 bytes
//	TODO
int USBD_RecvControl(void* d, uint32_t len)
{
   805e6:	b538      	push	{r3, r4, r5, lr}
   805e8:	460c      	mov	r4, r1
   805ea:	4605      	mov	r5, r0
	UDD_WaitOUT();
   805ec:	f001 f8c2 	bl	81774 <UDD_WaitOUT>
	UDD_Recv(EP0, (uint8_t*)d, len);
   805f0:	2000      	movs	r0, #0
   805f2:	4629      	mov	r1, r5
   805f4:	4622      	mov	r2, r4
   805f6:	f001 f95f 	bl	818b8 <UDD_Recv>
	UDD_ClearOUT();
   805fa:	f001 f8d1 	bl	817a0 <UDD_ClearOUT>

	return len;
}
   805fe:	4620      	mov	r0, r4
   80600:	bd38      	pop	{r3, r4, r5, pc}
	...

00080604 <_Z16USBD_SendControlhPKvm>:
	_cend = end;
}

//	Clipped by _cmark/_cend
int USBD_SendControl(uint8_t flags, const void* d, uint32_t len)
{
   80604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t sent = 0;
	uint32_t pos = 0;

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
   80606:	4b0d      	ldr	r3, [pc, #52]	; (8063c <_Z16USBD_SendControlhPKvm+0x38>)
	_cend = end;
}

//	Clipped by _cmark/_cend
int USBD_SendControl(uint8_t flags, const void* d, uint32_t len)
{
   80608:	4615      	mov	r5, r2
	uint32_t sent = 0;
	uint32_t pos = 0;

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
   8060a:	681a      	ldr	r2, [r3, #0]
   8060c:	4b0c      	ldr	r3, [pc, #48]	; (80640 <_Z16USBD_SendControlhPKvm+0x3c>)
	_cend = end;
}

//	Clipped by _cmark/_cend
int USBD_SendControl(uint8_t flags, const void* d, uint32_t len)
{
   8060e:	460f      	mov	r7, r1
	uint32_t sent = 0;
	uint32_t pos = 0;

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
   80610:	681b      	ldr	r3, [r3, #0]
   80612:	429a      	cmp	r2, r3
   80614:	da0b      	bge.n	8062e <_Z16USBD_SendControlhPKvm+0x2a>
   80616:	462c      	mov	r4, r5
   80618:	2600      	movs	r6, #0
   8061a:	e006      	b.n	8062a <_Z16USBD_SendControlhPKvm+0x26>
	{
		while (len > 0)
		{
			sent = UDD_Send(EP0, data + pos, len);
   8061c:	19b9      	adds	r1, r7, r6
   8061e:	4622      	mov	r2, r4
   80620:	2000      	movs	r0, #0
   80622:	f001 f8d9 	bl	817d8 <UDD_Send>
			TRACE_CORE(printf("=> USBD_SendControl sent=%lu\r\n", sent);)
			pos += sent;
   80626:	1836      	adds	r6, r6, r0
			len -= sent;
   80628:	1a24      	subs	r4, r4, r0

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
	{
		while (len > 0)
   8062a:	2c00      	cmp	r4, #0
   8062c:	d1f6      	bne.n	8061c <_Z16USBD_SendControlhPKvm+0x18>
			pos += sent;
			len -= sent;
		}
	}

	_cmark += length;
   8062e:	4b03      	ldr	r3, [pc, #12]	; (8063c <_Z16USBD_SendControlhPKvm+0x38>)

	return length;
}
   80630:	4628      	mov	r0, r5
			pos += sent;
			len -= sent;
		}
	}

	_cmark += length;
   80632:	681a      	ldr	r2, [r3, #0]
   80634:	18aa      	adds	r2, r5, r2
   80636:	601a      	str	r2, [r3, #0]

	return length;
}
   80638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8063a:	bf00      	nop
   8063c:	200700a8 	.word	0x200700a8
   80640:	200700ac 	.word	0x200700ac

00080644 <_ZL24USB_SendStringDescriptorPKhi>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
static bool USB_SendStringDescriptor(const uint8_t *string, int wLength) {
   80644:	b510      	push	{r4, lr}
   80646:	2300      	movs	r3, #0
   80648:	b0a0      	sub	sp, #128	; 0x80
   8064a:	2201      	movs	r2, #1
	uint16_t buff[64];
	int l = 1;
	wLength-=2;
	while (*string && wLength>0) {
   8064c:	1884      	adds	r4, r0, r2
   8064e:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   80652:	b14c      	cbz	r4, 80668 <_ZL24USB_SendStringDescriptorPKhi+0x24>
   80654:	3302      	adds	r3, #2
}

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
static bool USB_SendStringDescriptor(const uint8_t *string, int wLength) {
   80656:	ebc3 0c01 	rsb	ip, r3, r1
	uint16_t buff[64];
	int l = 1;
	wLength-=2;
	while (*string && wLength>0) {
   8065a:	f1bc 0f00 	cmp.w	ip, #0
   8065e:	dd03      	ble.n	80668 <_ZL24USB_SendStringDescriptorPKhi+0x24>
		buff[l++] = (uint8_t)(*string++);
   80660:	f82d 4003 	strh.w	r4, [sp, r3]
   80664:	3201      	adds	r2, #1
   80666:	e7f1      	b.n	8064c <_ZL24USB_SendStringDescriptorPKhi+0x8>
		wLength-=2;
	}
	buff[0] = (3<<8) | (l*2);
   80668:	0052      	lsls	r2, r2, #1
   8066a:	f442 7340 	orr.w	r3, r2, #768	; 0x300
   8066e:	a920      	add	r1, sp, #128	; 0x80
   80670:	f821 3d80 	strh.w	r3, [r1, #-128]!
	return USBD_SendControl(0, (uint8_t*)buff, l*2);
   80674:	2000      	movs	r0, #0
   80676:	4669      	mov	r1, sp
   80678:	f7ff ffc4 	bl	80604 <_Z16USBD_SendControlhPKvm>
}
   8067c:	3800      	subs	r0, #0
   8067e:	bf18      	it	ne
   80680:	2001      	movne	r0, #1
   80682:	b020      	add	sp, #128	; 0x80
   80684:	bd10      	pop	{r4, pc}
	...

00080688 <_ZL7USB_ISRv>:


//unsigned int iii=0;
//	Endpoint 0 interrupt
static void USB_ISR(void)
{
   80688:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
//    printf("ISR=0x%X\n\r", UOTGHS->UOTGHS_DEVISR); // jcb
//    if( iii++ > 1500 ) while(1); // jcb
    // End of bus reset
    if (Is_udd_reset())
   8068c:	4c9f      	ldr	r4, [pc, #636]	; (8090c <_ZL7USB_ISRv+0x284>)


//unsigned int iii=0;
//	Endpoint 0 interrupt
static void USB_ISR(void)
{
   8068e:	b087      	sub	sp, #28
//    printf("ISR=0x%X\n\r", UOTGHS->UOTGHS_DEVISR); // jcb
//    if( iii++ > 1500 ) while(1); // jcb
    // End of bus reset
    if (Is_udd_reset())
   80690:	6863      	ldr	r3, [r4, #4]
   80692:	f013 0f08 	tst.w	r3, #8
   80696:	d017      	beq.n	806c8 <_ZL7USB_ISRv+0x40>
    {
		TRACE_CORE(printf(">>> End of Reset\r\n");)

		// Reset USB address to 0
		udd_configure_address(0);
   80698:	6823      	ldr	r3, [r4, #0]
		udd_enable_address();

		// Configure EP 0
        UDD_InitEP(0, EP_TYPE_CONTROL);
   8069a:	2000      	movs	r0, #0
    if (Is_udd_reset())
    {
		TRACE_CORE(printf(">>> End of Reset\r\n");)

		// Reset USB address to 0
		udd_configure_address(0);
   8069c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   806a0:	6023      	str	r3, [r4, #0]
		udd_enable_address();
   806a2:	6823      	ldr	r3, [r4, #0]

		// Configure EP 0
        UDD_InitEP(0, EP_TYPE_CONTROL);
   806a4:	f242 0132 	movw	r1, #8242	; 0x2032
    {
		TRACE_CORE(printf(">>> End of Reset\r\n");)

		// Reset USB address to 0
		udd_configure_address(0);
		udd_enable_address();
   806a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   806ac:	6023      	str	r3, [r4, #0]

		// Configure EP 0
        UDD_InitEP(0, EP_TYPE_CONTROL);
   806ae:	f001 f821 	bl	816f4 <UDD_InitEP>
		udd_enable_setup_received_interrupt(0);
   806b2:	2304      	movs	r3, #4
   806b4:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
		udd_enable_endpoint_interrupt(0);
   806b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   806bc:	61a3      	str	r3, [r4, #24]

        _usbConfiguration = 0;
   806be:	4b94      	ldr	r3, [pc, #592]	; (80910 <_ZL7USB_ISRv+0x288>)
   806c0:	2200      	movs	r2, #0
   806c2:	601a      	str	r2, [r3, #0]
		udd_ack_reset();
   806c4:	2308      	movs	r3, #8
   806c6:	60a3      	str	r3, [r4, #8]
    }

#ifdef CDC_ENABLED
  	if (Is_udd_endpoint_interrupt(CDC_RX))
   806c8:	4b90      	ldr	r3, [pc, #576]	; (8090c <_ZL7USB_ISRv+0x284>)
   806ca:	685a      	ldr	r2, [r3, #4]
   806cc:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   806d0:	d008      	beq.n	806e4 <_ZL7USB_ISRv+0x5c>
	{
		udd_ack_out_received(CDC_RX);
   806d2:	2002      	movs	r0, #2
   806d4:	f8c3 0168 	str.w	r0, [r3, #360]	; 0x168

		// Handle received bytes
		if (USBD_Available(CDC_RX))
   806d8:	f7ff ff3e 	bl	80558 <_Z14USBD_Availablem>
   806dc:	b110      	cbz	r0, 806e4 <_ZL7USB_ISRv+0x5c>
			SerialUSB.accept();
   806de:	488d      	ldr	r0, [pc, #564]	; (80914 <_ZL7USB_ISRv+0x28c>)
   806e0:	f000 fd2e 	bl	81140 <_ZN7Serial_6acceptEv>
	}

	if (Is_udd_sof())
   806e4:	4b89      	ldr	r3, [pc, #548]	; (8090c <_ZL7USB_ISRv+0x284>)
   806e6:	685a      	ldr	r2, [r3, #4]
   806e8:	f012 0f04 	tst.w	r2, #4
   806ec:	d001      	beq.n	806f2 <_ZL7USB_ISRv+0x6a>
	{
		udd_ack_sof();
   806ee:	2204      	movs	r2, #4
   806f0:	609a      	str	r2, [r3, #8]
	//	USBD_Flush(CDC_TX); // jcb
	}
#endif

	// EP 0 Interrupt
	if (Is_udd_endpoint_interrupt(0) )
   806f2:	4b86      	ldr	r3, [pc, #536]	; (8090c <_ZL7USB_ISRv+0x284>)
   806f4:	685b      	ldr	r3, [r3, #4]
   806f6:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   806fa:	f000 81c6 	beq.w	80a8a <_ZL7USB_ISRv+0x402>
	{
		if (!UDD_ReceivedSetupInt())
   806fe:	f001 f85b 	bl	817b8 <UDD_ReceivedSetupInt>
   80702:	2800      	cmp	r0, #0
   80704:	f000 81c1 	beq.w	80a8a <_ZL7USB_ISRv+0x402>
		{
			return;
		}

		Setup setup;
		UDD_Recv(EP0, (uint8_t*)&setup, 8);
   80708:	2000      	movs	r0, #0
   8070a:	2208      	movs	r2, #8
   8070c:	a904      	add	r1, sp, #16
   8070e:	f001 f8d3 	bl	818b8 <UDD_Recv>
		UDD_ClearSetupInt();
   80712:	f001 f859 	bl	817c8 <UDD_ClearSetupInt>

		uint8_t requestType = setup.bmRequestType;
   80716:	f89d 5010 	ldrb.w	r5, [sp, #16]
		if (requestType & REQUEST_DEVICETOHOST)
   8071a:	f015 0f80 	tst.w	r5, #128	; 0x80
   8071e:	d002      	beq.n	80726 <_ZL7USB_ISRv+0x9e>
		{
			TRACE_CORE(puts(">>> EP0 Int: IN Request\r\n");)
			UDD_WaitIN();
   80720:	f001 f81e 	bl	81760 <UDD_WaitIN>
   80724:	e001      	b.n	8072a <_ZL7USB_ISRv+0xa2>
		}
		else
		{
			TRACE_CORE(puts(">>> EP0 Int: OUT Request\r\n");)
			UDD_ClearIN();
   80726:	f001 f82f 	bl	81788 <UDD_ClearIN>
		}

		bool ok = true;
		if (REQUEST_STANDARD == (requestType & REQUEST_TYPE))
   8072a:	f015 0460 	ands.w	r4, r5, #96	; 0x60
   8072e:	f040 8199 	bne.w	80a64 <_ZL7USB_ISRv+0x3dc>
		{
			// Standard Requests
			uint8_t r = setup.bRequest;
   80732:	f89d 0011 	ldrb.w	r0, [sp, #17]
			if (GET_STATUS == r)
   80736:	b938      	cbnz	r0, 80748 <_ZL7USB_ISRv+0xc0>
			{
                if( setup.bmRequestType == 0 )  // device
   80738:	f89d 4010 	ldrb.w	r4, [sp, #16]
   8073c:	b1bc      	cbz	r4, 8076e <_ZL7USB_ISRv+0xe6>
                // if( setup.bmRequestType == 2 ) // Endpoint:
                else
                {
                    // Send the endpoint status
                    // Check if the endpoint if currently halted
                    if( isEndpointHalt == 1 )
   8073e:	4b76      	ldr	r3, [pc, #472]	; (80918 <_ZL7USB_ISRv+0x290>)
   80740:	7819      	ldrb	r1, [r3, #0]
   80742:	2901      	cmp	r1, #1
   80744:	d10b      	bne.n	8075e <_ZL7USB_ISRv+0xd6>
   80746:	e00b      	b.n	80760 <_ZL7USB_ISRv+0xd8>
                    else
    				UDD_Send8(EP0, 0); // TODO
	    			UDD_Send8(EP0, 0);
                }
			}
			else if (CLEAR_FEATURE == r)
   80748:	2801      	cmp	r0, #1
   8074a:	d116      	bne.n	8077a <_ZL7USB_ISRv+0xf2>
			{
               // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
   8074c:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80750:	2b01      	cmp	r3, #1
   80752:	d10a      	bne.n	8076a <_ZL7USB_ISRv+0xe2>
                {
                    // Enable remote wake-up and send a ZLP
                    if( isRemoteWakeUpEnabled == 1 )
   80754:	4b71      	ldr	r3, [pc, #452]	; (8091c <_ZL7USB_ISRv+0x294>)
	    			UDD_Send8(EP0, 1);
   80756:	4620      	mov	r0, r4
			{
               // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
                {
                    // Enable remote wake-up and send a ZLP
                    if( isRemoteWakeUpEnabled == 1 )
   80758:	7819      	ldrb	r1, [r3, #0]
   8075a:	2901      	cmp	r1, #1
   8075c:	d000      	beq.n	80760 <_ZL7USB_ISRv+0xd8>
	    			UDD_Send8(EP0, 1);
                    else
	    			UDD_Send8(EP0, 0);
   8075e:	4601      	mov	r1, r0
   80760:	f001 f882 	bl	81868 <UDD_Send8>
                    UDD_Send8(EP0, 0);
   80764:	2000      	movs	r0, #0
   80766:	4601      	mov	r1, r0
   80768:	e157      	b.n	80a1a <_ZL7USB_ISRv+0x392>
                }
                else // if( setup.wValueL == 0) // ENDPOINTHALT
                {
                    isEndpointHalt = 0;  // TODO
   8076a:	4b6b      	ldr	r3, [pc, #428]	; (80918 <_ZL7USB_ISRv+0x290>)
   8076c:	701c      	strb	r4, [r3, #0]
    				UDD_Send8(EP0, 0);
   8076e:	4620      	mov	r0, r4
   80770:	4621      	mov	r1, r4
   80772:	f001 f879 	bl	81868 <UDD_Send8>
	    			UDD_Send8(EP0, 0);
   80776:	4620      	mov	r0, r4
   80778:	e7f5      	b.n	80766 <_ZL7USB_ISRv+0xde>
                }

 			}
			else if (SET_FEATURE == r)
   8077a:	2803      	cmp	r0, #3
   8077c:	d17b      	bne.n	80876 <_ZL7USB_ISRv+0x1ee>
			{
                // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
   8077e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80782:	2b01      	cmp	r3, #1
   80784:	d105      	bne.n	80792 <_ZL7USB_ISRv+0x10a>
                {
                    // Enable remote wake-up and send a ZLP
                    isRemoteWakeUpEnabled = 1;
   80786:	4a65      	ldr	r2, [pc, #404]	; (8091c <_ZL7USB_ISRv+0x294>)
	    			UDD_Send8(EP0, 0);
   80788:	4620      	mov	r0, r4
			{
                // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
                {
                    // Enable remote wake-up and send a ZLP
                    isRemoteWakeUpEnabled = 1;
   8078a:	7013      	strb	r3, [r2, #0]
	    			UDD_Send8(EP0, 0);
   8078c:	4621      	mov	r1, r4
   8078e:	f001 f86b 	bl	81868 <UDD_Send8>
                }
                if( setup.wValueL == 0) // ENDPOINTHALT
   80792:	f89d 0012 	ldrb.w	r0, [sp, #18]
   80796:	b928      	cbnz	r0, 807a4 <_ZL7USB_ISRv+0x11c>
                {
                    // Halt endpoint
                    isEndpointHalt = 1;
   80798:	4b5f      	ldr	r3, [pc, #380]	; (80918 <_ZL7USB_ISRv+0x290>)
   8079a:	2201      	movs	r2, #1
   8079c:	701a      	strb	r2, [r3, #0]
                    //USBD_Halt(USBGenericRequest_GetEndpointNumber(pRequest));
	    			UDD_Send8(EP0, 0);
   8079e:	4601      	mov	r1, r0
   807a0:	f001 f862 	bl	81868 <UDD_Send8>
                }
                if( setup.wValueL == 2) // TEST_MODE
   807a4:	f89d 3012 	ldrb.w	r3, [sp, #18]
   807a8:	2b02      	cmp	r3, #2
   807aa:	f040 8165 	bne.w	80a78 <_ZL7USB_ISRv+0x3f0>
                {
                    // 7.1.20 Test Mode Support, 9.4.9 SetFeature
                    if( (setup.bmRequestType == 0 /*USBGenericRequest_DEVICE*/) &&
   807ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
   807b2:	2b00      	cmp	r3, #0
   807b4:	f040 8160 	bne.w	80a78 <_ZL7USB_ISRv+0x3f0>
   807b8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   807bc:	f012 0f0f 	tst.w	r2, #15
   807c0:	f040 815a 	bne.w	80a78 <_ZL7USB_ISRv+0x3f0>
                        ((setup.wIndex & 0x000F) == 0) )
                    {
                        // the lower byte of wIndex must be zero
                        // the most significant byte of wIndex is used to specify the specific test mode

                        UOTGHS->UOTGHS_DEVIDR &= ~UOTGHS_DEVIDR_SUSPEC;
   807c4:	4b51      	ldr	r3, [pc, #324]	; (8090c <_ZL7USB_ISRv+0x284>)
   807c6:	6959      	ldr	r1, [r3, #20]
   807c8:	f021 0101 	bic.w	r1, r1, #1
   807cc:	6159      	str	r1, [r3, #20]
                        UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_SPDCONF_HIGH_SPEED; // remove suspend ?
   807ce:	6819      	ldr	r1, [r3, #0]
   807d0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   807d4:	6019      	str	r1, [r3, #0]
static void Test_Mode_Support( uint8_t wIndex )
{
    uint8_t i;
	uint8_t *ptr_dest = (uint8_t *) &udd_get_endpoint_fifo_access8(2);

	switch( wIndex )
   807d6:	0a13      	lsrs	r3, r2, #8
   807d8:	3b01      	subs	r3, #1
   807da:	2b03      	cmp	r3, #3
   807dc:	f200 814c 	bhi.w	80a78 <_ZL7USB_ISRv+0x3f0>
   807e0:	e8df f003 	tbb	[pc, r3]
   807e4:	02433b33 	.word	0x02433b33
			//A port in Test_Packet mode must send this packet repetitively. The inter-packet timing
			//must be no less than the minimum allowable inter-packet gap as defined in Section 7.1.18 and
			//no greater than 125 us.

			// Send ZLP
			USB_SendZlp();
   807e8:	f7ff fe82 	bl	804f0 <_ZL11USB_SendZlpv>

			UOTGHS->UOTGHS_DEVDMA[0].UOTGHS_DEVDMACONTROL = 0; // raz
   807ec:	4b47      	ldr	r3, [pc, #284]	; (8090c <_ZL7USB_ISRv+0x284>)
   807ee:	2200      	movs	r2, #0
   807f0:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
			UOTGHS->UOTGHS_DEVDMA[1].UOTGHS_DEVDMACONTROL = 0; // raz
   807f4:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

			// Configure endpoint 2, 64 bytes, direction IN, type BULK, 1 bank
			UOTGHS->UOTGHS_DEVEPTCFG[2] = UOTGHS_DEVEPTCFG_EPSIZE_64_BYTE
												 | UOTGHS_DEVEPTCFG_EPDIR_IN
												 | UOTGHS_DEVEPTCFG_EPTYPE_BLK
												 | UOTGHS_DEVEPTCFG_EPBK_1_BANK;
   807f8:	f241 1230 	movw	r2, #4400	; 0x1130
   807fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			// Check if the configuration is ok
			UOTGHS->UOTGHS_DEVEPTCFG[2] |= UOTGHS_DEVEPTCFG_ALLOC;
   80800:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80804:	f042 0202 	orr.w	r2, r2, #2
   80808:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			while((UOTGHS->UOTGHS_DEVEPTISR[2]&UOTGHS_DEVEPTISR_CFGOK)==0) {}
   8080c:	4b3f      	ldr	r3, [pc, #252]	; (8090c <_ZL7USB_ISRv+0x284>)
   8080e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   80812:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   80816:	d0f9      	beq.n	8080c <_ZL7USB_ISRv+0x184>
			UOTGHS->UOTGHS_DEVEPT |= UOTGHS_DEVEPT_EPEN2;
   80818:	69da      	ldr	r2, [r3, #28]
   8081a:	f042 0204 	orr.w	r2, r2, #4
   8081e:	61da      	str	r2, [r3, #28]
   80820:	4b3f      	ldr	r3, [pc, #252]	; (80920 <_ZL7USB_ISRv+0x298>)
			// Write FIFO
			for( i=0; i<sizeof(test_packet_buffer); i++)
			{
				ptr_dest[i] = test_packet_buffer[i];;
   80822:	4a40      	ldr	r2, [pc, #256]	; (80924 <_ZL7USB_ISRv+0x29c>)
   80824:	5c9a      	ldrb	r2, [r3, r2]
   80826:	f803 2b01 	strb.w	r2, [r3], #1
			// Check if the configuration is ok
			UOTGHS->UOTGHS_DEVEPTCFG[2] |= UOTGHS_DEVEPTCFG_ALLOC;
			while((UOTGHS->UOTGHS_DEVEPTISR[2]&UOTGHS_DEVEPTISR_CFGOK)==0) {}
			UOTGHS->UOTGHS_DEVEPT |= UOTGHS_DEVEPT_EPEN2;
			// Write FIFO
			for( i=0; i<sizeof(test_packet_buffer); i++)
   8082a:	4a3f      	ldr	r2, [pc, #252]	; (80928 <_ZL7USB_ISRv+0x2a0>)
   8082c:	4293      	cmp	r3, r2
   8082e:	d1f8      	bne.n	80822 <_ZL7USB_ISRv+0x19a>
			{
				ptr_dest[i] = test_packet_buffer[i];;
			}
			// Tst PACKET
			UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_TSTPCKT;
   80830:	4b36      	ldr	r3, [pc, #216]	; (8090c <_ZL7USB_ISRv+0x284>)
   80832:	681a      	ldr	r2, [r3, #0]
   80834:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   80838:	601a      	str	r2, [r3, #0]
			// Send packet
			UOTGHS->UOTGHS_DEVEPTICR[2] = UOTGHS_DEVEPTICR_TXINIC;
   8083a:	2201      	movs	r2, #1
   8083c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			UOTGHS->UOTGHS_DEVEPTIDR[2] = UOTGHS_DEVEPTIDR_FIFOCONC;
   80840:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80844:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
   80848:	e7fe      	b.n	80848 <_ZL7USB_ISRv+0x1c0>
			//Test mode Test_J:
			//Upon command, a port's transceiver must enter the high-speed J state and remain in that
			//state until the exit action is taken. This enables the testing of the high output drive
			//level on the D+ line.
			// Send a ZLP
			USB_SendZlp();
   8084a:	f7ff fe51 	bl	804f0 <_ZL11USB_SendZlpv>
			UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_TSTJ;
   8084e:	4b2f      	ldr	r3, [pc, #188]	; (8090c <_ZL7USB_ISRv+0x284>)
   80850:	681a      	ldr	r2, [r3, #0]
   80852:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   80856:	601a      	str	r2, [r3, #0]
   80858:	e7fe      	b.n	80858 <_ZL7USB_ISRv+0x1d0>
			//Test mode Test_K:
			//Upon command, a port's transceiver must enter the high-speed K state and remain in
			//that state until the exit action is taken. This enables the testing of the high output drive
			//level on the D- line.
			// Send a ZLP
			USB_SendZlp();
   8085a:	f7ff fe49 	bl	804f0 <_ZL11USB_SendZlpv>
			UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_TSTK;
   8085e:	4b2b      	ldr	r3, [pc, #172]	; (8090c <_ZL7USB_ISRv+0x284>)
   80860:	681a      	ldr	r2, [r3, #0]
   80862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   80866:	601a      	str	r2, [r3, #0]
   80868:	e7fe      	b.n	80868 <_ZL7USB_ISRv+0x1e0>
			//determined to be correct) within the normal allowed device response time. This enables testing of
			//the device squelch level circuitry and, additionally, provides a general purpose stimulus/response
			//test for basic functional testing.

			// Send a ZLP
			USB_SendZlp();
   8086a:	f7ff fe41 	bl	804f0 <_ZL11USB_SendZlpv>
							   | UOTGHS_DEVIDR_DMA_1
							   | UOTGHS_DEVIDR_DMA_2
							   | UOTGHS_DEVIDR_DMA_3
							   | UOTGHS_DEVIDR_DMA_4
							   | UOTGHS_DEVIDR_DMA_5
							   | UOTGHS_DEVIDR_DMA_6;
   8086e:	4a2f      	ldr	r2, [pc, #188]	; (8092c <_ZL7USB_ISRv+0x2a4>)
   80870:	4b26      	ldr	r3, [pc, #152]	; (8090c <_ZL7USB_ISRv+0x284>)
   80872:	615a      	str	r2, [r3, #20]
   80874:	e7fe      	b.n	80874 <_ZL7USB_ISRv+0x1ec>

                        Test_Mode_Support( (setup.wIndex & 0xFF00)>>8 );
                    }
                }
			}
			else if (SET_ADDRESS == r)
   80876:	2805      	cmp	r0, #5
   80878:	d106      	bne.n	80888 <_ZL7USB_ISRv+0x200>
			{
				TRACE_CORE(puts(">>> EP0 Int: SET_ADDRESS\r\n");)
				UDD_WaitIN();
   8087a:	f000 ff71 	bl	81760 <UDD_WaitIN>
				UDD_SetAddress(setup.wValueL);
   8087e:	f89d 0012 	ldrb.w	r0, [sp, #18]
   80882:	f001 f877 	bl	81974 <UDD_SetAddress>
   80886:	e0f7      	b.n	80a78 <_ZL7USB_ISRv+0x3f0>
			}
			else if (GET_DESCRIPTOR == r)
   80888:	2806      	cmp	r0, #6
   8088a:	f040 80be 	bne.w	80a0a <_ZL7USB_ISRv+0x382>
	return true;
}

static bool USBD_SendDescriptor(Setup& setup)
{
	uint8_t t = setup.wValueH;
   8088e:	f89d 5013 	ldrb.w	r5, [sp, #19]
   80892:	f8bd 7016 	ldrh.w	r7, [sp, #22]
	uint8_t desc_length = 0;
	const uint8_t* desc_addr = 0;

	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
   80896:	2d02      	cmp	r5, #2
   80898:	d12c      	bne.n	808f4 <_ZL7USB_ISRv+0x26c>
//	This really needs dynamic endpoint allocation etc
//	TODO
static bool USBD_SendConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
   8089a:	4620      	mov	r0, r4
   8089c:	f7ff fe1e 	bl	804dc <_Z16USBD_InitControli>
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendInterfaces();
   808a0:	f7ff fe89 	bl	805b6 <_Z19USBD_SendInterfacesv>
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   808a4:	2609      	movs	r6, #9
   808a6:	f10d 0804 	add.w	r8, sp, #4
   808aa:	4621      	mov	r1, r4
   808ac:	4632      	mov	r2, r6
static bool USBD_SendConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendInterfaces();
   808ae:	4682      	mov	sl, r0
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   808b0:	4640      	mov	r0, r8
   808b2:	f001 f89f 	bl	819f4 <memset>
   808b6:	2301      	movs	r3, #1
   808b8:	f88d 3009 	strb.w	r3, [sp, #9]
   808bc:	3b41      	subs	r3, #65	; 0x41
   808be:	f88d 300b 	strb.w	r3, [sp, #11]
   808c2:	333a      	adds	r3, #58	; 0x3a
   808c4:	f88d 300c 	strb.w	r3, [sp, #12]
   808c8:	4b19      	ldr	r3, [pc, #100]	; (80930 <_ZL7USB_ISRv+0x2a8>)
	//TRACE_CORE(printf("=> USBD_SendConfiguration clen=%d\r\n", config.clen);)

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
   808ca:	4638      	mov	r0, r7
	int interfaces = USBD_SendInterfaces();
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   808cc:	681b      	ldr	r3, [r3, #0]
   808ce:	f88d 6004 	strb.w	r6, [sp, #4]
   808d2:	199b      	adds	r3, r3, r6
   808d4:	f8ad 3006 	strh.w	r3, [sp, #6]
   808d8:	f88d 5005 	strb.w	r5, [sp, #5]
   808dc:	f88d a008 	strb.w	sl, [sp, #8]
	//TRACE_CORE(printf("=> USBD_SendConfiguration clen=%d\r\n", config.clen);)

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
   808e0:	f7ff fdfc 	bl	804dc <_Z16USBD_InitControli>
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   808e4:	4641      	mov	r1, r8
   808e6:	4632      	mov	r2, r6
   808e8:	4620      	mov	r0, r4
   808ea:	f7ff fe8b 	bl	80604 <_Z16USBD_SendControlhPKvm>
	USBD_SendInterfaces();
   808ee:	f7ff fe62 	bl	805b6 <_Z19USBD_SendInterfacesv>
   808f2:	e0c1      	b.n	80a78 <_ZL7USB_ISRv+0x3f0>
	{
		TRACE_CORE(printf("=> USBD_SendDescriptor : USB_CONFIGURATION_DESCRIPTOR_TYPE length=%d\r\n", setup.wLength);)
		return USBD_SendConfiguration(setup.wLength);
	}

	USBD_InitControl(setup.wLength);
   808f4:	4638      	mov	r0, r7
   808f6:	f7ff fdf1 	bl	804dc <_Z16USBD_InitControli>
#ifdef HID_ENABLED
	if (HID_REPORT_DESCRIPTOR_TYPE == t)
   808fa:	2d22      	cmp	r5, #34	; 0x22
   808fc:	d11a      	bne.n	80934 <_ZL7USB_ISRv+0x2ac>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : HID_REPORT_DESCRIPTOR_TYPE\r\n");)
		return HID_GetDescriptor(t);
   808fe:	4628      	mov	r0, r5
   80900:	f000 fa42 	bl	80d88 <_Z17HID_GetDescriptori>
   80904:	3800      	subs	r0, #0
   80906:	bf18      	it	ne
   80908:	2001      	movne	r0, #1
   8090a:	e0b4      	b.n	80a76 <_ZL7USB_ISRv+0x3ee>
   8090c:	400ac000 	.word	0x400ac000
   80910:	200700c4 	.word	0x200700c4
   80914:	20070488 	.word	0x20070488
   80918:	200700a4 	.word	0x200700a4
   8091c:	200700c0 	.word	0x200700c0
   80920:	20190000 	.word	0x20190000
   80924:	dfef1b90 	.word	0xdfef1b90
   80928:	20190035 	.word	0x20190035
   8092c:	7e07f07f 	.word	0x7e07f07f
   80930:	200700a8 	.word	0x200700a8
	}
#endif

	if (USB_DEVICE_DESCRIPTOR_TYPE == t)
   80934:	2d01      	cmp	r5, #1
   80936:	d110      	bne.n	8095a <_ZL7USB_ISRv+0x2d2>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : USB_DEVICE_DESCRIPTOR_TYPE\r\n");)
		if (setup.wLength == 8)
   80938:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   8093c:	2a08      	cmp	r2, #8
   8093e:	d102      	bne.n	80946 <_ZL7USB_ISRv+0x2be>
		{
			_cdcComposite = 1;
   80940:	4b53      	ldr	r3, [pc, #332]	; (80a90 <_ZL7USB_ISRv+0x408>)
   80942:	2101      	movs	r1, #1
   80944:	6019      	str	r1, [r3, #0]
		}
		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorA : (const uint8_t*)&USB_DeviceDescriptor;
   80946:	4b52      	ldr	r3, [pc, #328]	; (80a90 <_ZL7USB_ISRv+0x408>)
   80948:	4952      	ldr	r1, [pc, #328]	; (80a94 <_ZL7USB_ISRv+0x40c>)
   8094a:	6818      	ldr	r0, [r3, #0]
   8094c:	4b52      	ldr	r3, [pc, #328]	; (80a98 <_ZL7USB_ISRv+0x410>)
   8094e:	2800      	cmp	r0, #0
   80950:	bf08      	it	eq
   80952:	4619      	moveq	r1, r3
        if( *desc_addr > setup.wLength ) {
   80954:	2a11      	cmp	r2, #17
   80956:	d853      	bhi.n	80a00 <_ZL7USB_ISRv+0x378>
   80958:	e017      	b.n	8098a <_ZL7USB_ISRv+0x302>
            desc_length = setup.wLength;
        }
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
   8095a:	2d03      	cmp	r5, #3
   8095c:	d117      	bne.n	8098e <_ZL7USB_ISRv+0x306>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : USB_STRING_DESCRIPTOR_TYPE\r\n");)
		if (setup.wValueL == 0) {
   8095e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80962:	b933      	cbnz	r3, 80972 <_ZL7USB_ISRv+0x2ea>
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
   80964:	494d      	ldr	r1, [pc, #308]	; (80a9c <_ZL7USB_ISRv+0x414>)
			return USB_SendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
		}
		else {
			return false;
		}
		if( *desc_addr > setup.wLength ) {
   80966:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   8096a:	780b      	ldrb	r3, [r1, #0]
   8096c:	4293      	cmp	r3, r2
   8096e:	d80c      	bhi.n	8098a <_ZL7USB_ISRv+0x302>
   80970:	e046      	b.n	80a00 <_ZL7USB_ISRv+0x378>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : USB_STRING_DESCRIPTOR_TYPE\r\n");)
		if (setup.wValueL == 0) {
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
		}
		else if (setup.wValueL == IPRODUCT) {
   80972:	2b02      	cmp	r3, #2
   80974:	d101      	bne.n	8097a <_ZL7USB_ISRv+0x2f2>
			return USB_SendStringDescriptor(STRING_PRODUCT, setup.wLength);
   80976:	484a      	ldr	r0, [pc, #296]	; (80aa0 <_ZL7USB_ISRv+0x418>)
   80978:	e002      	b.n	80980 <_ZL7USB_ISRv+0x2f8>
		}
		else if (setup.wValueL == IMANUFACTURER) {
   8097a:	2b01      	cmp	r3, #1
   8097c:	d17f      	bne.n	80a7e <_ZL7USB_ISRv+0x3f6>
			return USB_SendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
   8097e:	4849      	ldr	r0, [pc, #292]	; (80aa4 <_ZL7USB_ISRv+0x41c>)
   80980:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   80984:	f7ff fe5e 	bl	80644 <_ZL24USB_SendStringDescriptorPKhi>
   80988:	e075      	b.n	80a76 <_ZL7USB_ISRv+0x3ee>
		}
		else {
			return false;
		}
		if( *desc_addr > setup.wLength ) {
			desc_length = setup.wLength;
   8098a:	b2d2      	uxtb	r2, r2
   8098c:	e037      	b.n	809fe <_ZL7USB_ISRv+0x376>
		}
	}
	else if (USB_DEVICE_QUALIFIER == t)
   8098e:	2d06      	cmp	r5, #6
   80990:	d105      	bne.n	8099e <_ZL7USB_ISRv+0x316>
	{
		// Device qualifier descriptor requested
		desc_addr = (const uint8_t*)&USB_DeviceQualifier;
        if( *desc_addr > setup.wLength ) {
   80992:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   80996:	2a09      	cmp	r2, #9
   80998:	d874      	bhi.n	80a84 <_ZL7USB_ISRv+0x3fc>
            desc_length = setup.wLength;
   8099a:	b2d2      	uxtb	r2, r2
   8099c:	e073      	b.n	80a86 <_ZL7USB_ISRv+0x3fe>
        }
    }
    else if (USB_OTHER_SPEED_CONFIGURATION == t)
   8099e:	2d07      	cmp	r5, #7
   809a0:	d16d      	bne.n	80a7e <_ZL7USB_ISRv+0x3f6>
}

static bool USBD_SendOtherConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
   809a2:	2000      	movs	r0, #0
        }
    }
    else if (USB_OTHER_SPEED_CONFIGURATION == t)
    {
		// Other configuration descriptor requested
		return USBD_SendOtherConfiguration(setup.wLength);
   809a4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
}

static bool USBD_SendOtherConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
   809a8:	f7ff fd98 	bl	804dc <_Z16USBD_InitControli>
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendOtherInterfaces();
   809ac:	f7ff fdf5 	bl	8059a <_Z24USBD_SendOtherInterfacesv>
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   809b0:	2409      	movs	r4, #9
   809b2:	ae01      	add	r6, sp, #4
   809b4:	2100      	movs	r1, #0
   809b6:	4622      	mov	r2, r4
static bool USBD_SendOtherConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendOtherInterfaces();
   809b8:	4680      	mov	r8, r0
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   809ba:	4630      	mov	r0, r6
   809bc:	f001 f81a 	bl	819f4 <memset>
   809c0:	2301      	movs	r3, #1
   809c2:	f88d 3009 	strb.w	r3, [sp, #9]
   809c6:	3b41      	subs	r3, #65	; 0x41
   809c8:	f88d 300b 	strb.w	r3, [sp, #11]
   809cc:	333a      	adds	r3, #58	; 0x3a
   809ce:	f88d 300c 	strb.w	r3, [sp, #12]
   809d2:	4b35      	ldr	r3, [pc, #212]	; (80aa8 <_ZL7USB_ISRv+0x420>)
	//TRACE_CORE(printf("=> USBD_SendConfiguration clen=%d\r\n", config.clen);)

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
   809d4:	4638      	mov	r0, r7
	int interfaces = USBD_SendOtherInterfaces();
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   809d6:	681b      	ldr	r3, [r3, #0]
   809d8:	f88d 4004 	strb.w	r4, [sp, #4]
   809dc:	191b      	adds	r3, r3, r4
   809de:	f8ad 3006 	strh.w	r3, [sp, #6]
   809e2:	f88d 5005 	strb.w	r5, [sp, #5]
   809e6:	f88d 8008 	strb.w	r8, [sp, #8]
	//TRACE_CORE(printf("=> USBD_SendConfiguration clen=%d\r\n", config.clen);)

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
   809ea:	f7ff fd77 	bl	804dc <_Z16USBD_InitControli>
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   809ee:	4631      	mov	r1, r6
   809f0:	4622      	mov	r2, r4
   809f2:	2000      	movs	r0, #0
   809f4:	f7ff fe06 	bl	80604 <_Z16USBD_SendControlhPKvm>
	USBD_SendOtherInterfaces();
   809f8:	f7ff fdcf 	bl	8059a <_Z24USBD_SendOtherInterfacesv>
   809fc:	e03c      	b.n	80a78 <_ZL7USB_ISRv+0x3f0>
	if (desc_addr == 0)
	{
		return false;
	}

	if (desc_length == 0)
   809fe:	b902      	cbnz	r2, 80a02 <_ZL7USB_ISRv+0x37a>
	{
		desc_length = *desc_addr;
   80a00:	780a      	ldrb	r2, [r1, #0]
	}

	TRACE_CORE(printf("=> USBD_SendDescriptor : desc_addr=%p desc_length=%d\r\n", desc_addr, desc_length);)
	USBD_SendControl(0, desc_addr, desc_length);
   80a02:	2000      	movs	r0, #0
   80a04:	f7ff fdfe 	bl	80604 <_Z16USBD_SendControlhPKvm>
   80a08:	e036      	b.n	80a78 <_ZL7USB_ISRv+0x3f0>
			else if (GET_DESCRIPTOR == r)
			{
				TRACE_CORE(puts(">>> EP0 Int: GET_DESCRIPTOR\r\n");)
				ok = USBD_SendDescriptor(setup);
			}
			else if (SET_DESCRIPTOR == r)
   80a0a:	2807      	cmp	r0, #7
   80a0c:	d037      	beq.n	80a7e <_ZL7USB_ISRv+0x3f6>
			{
				TRACE_CORE(puts(">>> EP0 Int: SET_DESCRIPTOR\r\n");)
				ok = false;
			}
			else if (GET_CONFIGURATION == r)
   80a0e:	2808      	cmp	r0, #8
   80a10:	d106      	bne.n	80a20 <_ZL7USB_ISRv+0x398>
			{
				TRACE_CORE(puts(">>> EP0 Int: GET_CONFIGURATION\r\n");)
				UDD_Send8(EP0, _usbConfiguration);
   80a12:	4b26      	ldr	r3, [pc, #152]	; (80aac <_ZL7USB_ISRv+0x424>)
   80a14:	4620      	mov	r0, r4
   80a16:	6819      	ldr	r1, [r3, #0]
   80a18:	b2c9      	uxtb	r1, r1
   80a1a:	f000 ff25 	bl	81868 <UDD_Send8>
   80a1e:	e02b      	b.n	80a78 <_ZL7USB_ISRv+0x3f0>
			}
			else if (SET_CONFIGURATION == r)
   80a20:	2809      	cmp	r0, #9
   80a22:	d112      	bne.n	80a4a <_ZL7USB_ISRv+0x3c2>
			{
				if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
   80a24:	f015 0f1f 	tst.w	r5, #31
   80a28:	d129      	bne.n	80a7e <_ZL7USB_ISRv+0x3f6>
				{
					TRACE_CORE(printf(">>> EP0 Int: SET_CONFIGURATION REQUEST_DEVICE %d\r\n", setup.wValueL);)

					UDD_InitEndpoints(EndPoints, (sizeof(EndPoints) / sizeof(EndPoints[0])));
   80a2a:	4821      	ldr	r0, [pc, #132]	; (80ab0 <_ZL7USB_ISRv+0x428>)
   80a2c:	2105      	movs	r1, #5
   80a2e:	f000 fe79 	bl	81724 <UDD_InitEndpoints>
					_usbConfiguration = setup.wValueL;
   80a32:	f89d 2012 	ldrb.w	r2, [sp, #18]
   80a36:	4b1d      	ldr	r3, [pc, #116]	; (80aac <_ZL7USB_ISRv+0x424>)
   80a38:	601a      	str	r2, [r3, #0]

#ifdef CDC_ENABLED
					// Enable interrupt for CDC reception from host (OUT packet)
					udd_enable_out_received_interrupt(CDC_RX);
   80a3a:	4b1e      	ldr	r3, [pc, #120]	; (80ab4 <_ZL7USB_ISRv+0x42c>)
   80a3c:	2202      	movs	r2, #2
   80a3e:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
					udd_enable_endpoint_interrupt(CDC_RX);
   80a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80a46:	619a      	str	r2, [r3, #24]
   80a48:	e016      	b.n	80a78 <_ZL7USB_ISRv+0x3f0>
				{
					TRACE_CORE(puts(">>> EP0 Int: SET_CONFIGURATION failed!\r\n");)
					ok = false;
				}
			}
			else if (GET_INTERFACE == r)
   80a4a:	280a      	cmp	r0, #10
   80a4c:	d103      	bne.n	80a56 <_ZL7USB_ISRv+0x3ce>
			{
				TRACE_CORE(puts(">>> EP0 Int: GET_INTERFACE\r\n");)
				UDD_Send8(EP0, _usbSetInterface);
   80a4e:	4b1a      	ldr	r3, [pc, #104]	; (80ab8 <_ZL7USB_ISRv+0x430>)
   80a50:	380a      	subs	r0, #10
   80a52:	7819      	ldrb	r1, [r3, #0]
   80a54:	e7e1      	b.n	80a1a <_ZL7USB_ISRv+0x392>
			}
			else if (SET_INTERFACE == r)
   80a56:	280b      	cmp	r0, #11
   80a58:	d10e      	bne.n	80a78 <_ZL7USB_ISRv+0x3f0>
			{
                _usbSetInterface = setup.wValueL;
   80a5a:	f89d 2012 	ldrb.w	r2, [sp, #18]
   80a5e:	4b16      	ldr	r3, [pc, #88]	; (80ab8 <_ZL7USB_ISRv+0x430>)
   80a60:	601a      	str	r2, [r3, #0]
   80a62:	e009      	b.n	80a78 <_ZL7USB_ISRv+0x3f0>
		}
		else
		{
			TRACE_CORE(puts(">>> EP0 Int: ClassInterfaceRequest\r\n");)

			UDD_WaitIN(); // Workaround: need tempo here, else CDC serial won't open correctly
   80a64:	f000 fe7c 	bl	81760 <UDD_WaitIN>

			USBD_InitControl(setup.wLength); // Max length of transfer
   80a68:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   80a6c:	f7ff fd36 	bl	804dc <_Z16USBD_InitControli>
			ok = USBD_ClassInterfaceRequest(setup);
   80a70:	a804      	add	r0, sp, #16
   80a72:	f7ff fdae 	bl	805d2 <_Z26USBD_ClassInterfaceRequestR5Setup>
		}

		if (ok)
   80a76:	b110      	cbz	r0, 80a7e <_ZL7USB_ISRv+0x3f6>
		{
			TRACE_CORE(puts(">>> EP0 Int: Send packet\r\n");)
			UDD_ClearIN();
   80a78:	f000 fe86 	bl	81788 <UDD_ClearIN>
   80a7c:	e005      	b.n	80a8a <_ZL7USB_ISRv+0x402>
		}
		else
		{
			TRACE_CORE(puts(">>> EP0 Int: Stall\r\n");)
			UDD_Stall();
   80a7e:	f000 ff35 	bl	818ec <UDD_Stall>
   80a82:	e002      	b.n	80a8a <_ZL7USB_ISRv+0x402>
   80a84:	2200      	movs	r2, #0
   80a86:	490d      	ldr	r1, [pc, #52]	; (80abc <_ZL7USB_ISRv+0x434>)
   80a88:	e7b9      	b.n	809fe <_ZL7USB_ISRv+0x376>
		}
	}
}
   80a8a:	b007      	add	sp, #28
   80a8c:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   80a90:	200700b0 	.word	0x200700b0
   80a94:	00081b50 	.word	0x00081b50
   80a98:	00081b64 	.word	0x00081b64
   80a9c:	00081b8c 	.word	0x00081b8c
   80aa0:	00081bc8 	.word	0x00081bc8
   80aa4:	00081bd4 	.word	0x00081bd4
   80aa8:	200700a8 	.word	0x200700a8
   80aac:	200700c4 	.word	0x200700c4
   80ab0:	00081b78 	.word	0x00081b78
   80ab4:	400ac000 	.word	0x400ac000
   80ab8:	200700bc 	.word	0x200700bc
   80abc:	00081be0 	.word	0x00081be0

00080ac0 <_Z9USBD_SendmPKvm>:
{
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;

    if (!_usbConfiguration)
   80ac0:	4b11      	ldr	r3, [pc, #68]	; (80b08 <_Z9USBD_SendmPKvm+0x48>)
    //else return 512 - UDD_FifoByteCount(ep & 0xF);  // EPX_SIZE  jcb
//}

//	Blocking Send of data to an endpoint
uint32_t USBD_Send(uint32_t ep, const void* d, uint32_t len)
{
   80ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;

    if (!_usbConfiguration)
   80ac6:	681b      	ldr	r3, [r3, #0]
    //else return 512 - UDD_FifoByteCount(ep & 0xF);  // EPX_SIZE  jcb
//}

//	Blocking Send of data to an endpoint
uint32_t USBD_Send(uint32_t ep, const void* d, uint32_t len)
{
   80ac8:	4680      	mov	r8, r0
   80aca:	4615      	mov	r5, r2
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;

    if (!_usbConfiguration)
   80acc:	b913      	cbnz	r3, 80ad4 <_Z9USBD_SendmPKvm+0x14>
   80ace:	f04f 35ff 	mov.w	r5, #4294967295
   80ad2:	e015      	b.n	80b00 <_Z9USBD_SendmPKvm+0x40>
//	Blocking Send of data to an endpoint
uint32_t USBD_Send(uint32_t ep, const void* d, uint32_t len)
{
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;
   80ad4:	460e      	mov	r6, r1
   80ad6:	4614      	mov	r4, r2
   80ad8:	e010      	b.n	80afc <_Z9USBD_SendmPKvm+0x3c>
		return -1;
    }

	while (len)
	{
        if(ep==0) n = EP0_SIZE;
   80ada:	f1b8 0f00 	cmp.w	r8, #0
   80ade:	bf0c      	ite	eq
   80ae0:	2740      	moveq	r7, #64	; 0x40
   80ae2:	f44f 7700 	movne.w	r7, #512	; 0x200
   80ae6:	42a7      	cmp	r7, r4
   80ae8:	bf28      	it	cs
   80aea:	4627      	movcs	r7, r4
        else n =  EPX_SIZE;
		if (n > len)
			n = len;
		len -= n;

		UDD_Send(ep & 0xF, data, n);
   80aec:	4631      	mov	r1, r6
   80aee:	f008 000f 	and.w	r0, r8, #15
   80af2:	463a      	mov	r2, r7
   80af4:	f000 fe70 	bl	817d8 <UDD_Send>
	{
        if(ep==0) n = EP0_SIZE;
        else n =  EPX_SIZE;
		if (n > len)
			n = len;
		len -= n;
   80af8:	1be4      	subs	r4, r4, r7

		UDD_Send(ep & 0xF, data, n);
		data += n;
   80afa:	19f6      	adds	r6, r6, r7
    {
    	TRACE_CORE(printf("pb conf\n\r");)
		return -1;
    }

	while (len)
   80afc:	2c00      	cmp	r4, #0
   80afe:	d1ec      	bne.n	80ada <_Z9USBD_SendmPKvm+0x1a>
		data += n;
    }
	//TXLED1;					// light the TX LED
	//TxLEDPulse = TX_RX_LED_PULSE_MS;
	return r;
}
   80b00:	4628      	mov	r0, r5
   80b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b06:	bf00      	nop
   80b08:	200700c4 	.word	0x200700c4

00080b0c <_Z9USBD_RecvmPvm>:
}

//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
{
   80b0c:	e92d 45f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
	if (!_usbConfiguration || len < 0)
   80b10:	4b1b      	ldr	r3, [pc, #108]	; (80b80 <_Z9USBD_RecvmPvm+0x74>)
}

//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
{
   80b12:	460c      	mov	r4, r1
	if (!_usbConfiguration || len < 0)
   80b14:	681b      	ldr	r3, [r3, #0]
}

//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
{
   80b16:	4615      	mov	r5, r2
	if (!_usbConfiguration || len < 0)
   80b18:	bb03      	cbnz	r3, 80b5c <_Z9USBD_RecvmPvm+0x50>
   80b1a:	f04f 35ff 	mov.w	r5, #4294967295
   80b1e:	e01a      	b.n	80b56 <_Z9USBD_RecvmPvm+0x4a>
	uint32_t n = UDD_FifoByteCount(ep & 0xF);
	len = min(n,len);
	n = len;
	uint8_t* dst = (uint8_t*)d;
	while (n--)
		*dst++ = UDD_Recv8(ep & 0xF);
   80b20:	4630      	mov	r0, r6
   80b22:	f000 feb5 	bl	81890 <UDD_Recv8>
   80b26:	f108 38ff 	add.w	r8, r8, #4294967295
   80b2a:	55e0      	strb	r0, [r4, r7]
   80b2c:	3701      	adds	r7, #1
	LockEP lock(ep);
	uint32_t n = UDD_FifoByteCount(ep & 0xF);
	len = min(n,len);
	n = len;
	uint8_t* dst = (uint8_t*)d;
	while (n--)
   80b2e:	f1b8 0f00 	cmp.w	r8, #0
   80b32:	d1f5      	bne.n	80b20 <_Z9USBD_RecvmPvm+0x14>
		*dst++ = UDD_Recv8(ep & 0xF);
	if (len && !UDD_FifoByteCount(ep & 0xF)) // release empty buffer
   80b34:	b135      	cbz	r5, 80b44 <_Z9USBD_RecvmPvm+0x38>
   80b36:	4630      	mov	r0, r6
   80b38:	f000 fee2 	bl	81900 <UDD_FifoByteCount>
   80b3c:	b910      	cbnz	r0, 80b44 <_Z9USBD_RecvmPvm+0x38>
		UDD_ReleaseRX(ep & 0xF);
   80b3e:	4630      	mov	r0, r6
   80b40:	f000 feec 	bl	8191c <UDD_ReleaseRX>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80b44:	f1ba 0f00 	cmp.w	sl, #0
   80b48:	d005      	beq.n	80b56 <_Z9USBD_RecvmPvm+0x4a>
		cpu_irq_enable();
   80b4a:	4b0e      	ldr	r3, [pc, #56]	; (80b84 <_Z9USBD_RecvmPvm+0x78>)
   80b4c:	2201      	movs	r2, #1
   80b4e:	601a      	str	r2, [r3, #0]
   80b50:	f3bf 8f5f 	dmb	sy
   80b54:	b662      	cpsie	i

	return len;
}
   80b56:	4628      	mov	r0, r5
   80b58:	e8bd 85f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
typedef uint32_t irqflags_t;
extern int g_interrupt_enabled;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = g_interrupt_enabled;
   80b5c:	4b09      	ldr	r3, [pc, #36]	; (80b84 <_Z9USBD_RecvmPvm+0x78>)
   80b5e:	f8d3 a000 	ldr.w	sl, [r3]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80b62:	b672      	cpsid	i
   80b64:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80b68:	2700      	movs	r7, #0
{
	if (!_usbConfiguration || len < 0)
		return -1;

	LockEP lock(ep);
	uint32_t n = UDD_FifoByteCount(ep & 0xF);
   80b6a:	f000 060f 	and.w	r6, r0, #15
   80b6e:	601f      	str	r7, [r3, #0]
   80b70:	4630      	mov	r0, r6
   80b72:	f000 fec5 	bl	81900 <UDD_FifoByteCount>
   80b76:	42a8      	cmp	r0, r5
   80b78:	bf38      	it	cc
   80b7a:	4605      	movcc	r5, r0
   80b7c:	46a8      	mov	r8, r5
	len = min(n,len);
	n = len;
	uint8_t* dst = (uint8_t*)d;
	while (n--)
   80b7e:	e7d6      	b.n	80b2e <_Z9USBD_RecvmPvm+0x22>
   80b80:	200700c4 	.word	0x200700c4
   80b84:	2007004c 	.word	0x2007004c

00080b88 <_Z9USBD_Recvm>:
	return len;
}

//	Recv 1 byte if ready
uint32_t USBD_Recv(uint32_t ep)
{
   80b88:	b507      	push	{r0, r1, r2, lr}
	uint8_t c;
	if (USBD_Recv(ep & 0xF, &c, 1) != 1)
   80b8a:	2201      	movs	r2, #1
   80b8c:	f10d 0107 	add.w	r1, sp, #7
   80b90:	f000 000f 	and.w	r0, r0, #15
   80b94:	f7ff ffba 	bl	80b0c <_Z9USBD_RecvmPvm>
   80b98:	2801      	cmp	r0, #1
   80b9a:	bf14      	ite	ne
   80b9c:	f04f 30ff 	movne.w	r0, #4294967295
		return -1;
	else
		return c;
   80ba0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
}
   80ba4:	bd0e      	pop	{r1, r2, r3, pc}
	...

00080ba8 <_GLOBAL__I_TxLEDPulse>:


//=======================================================================
//=======================================================================

USBDevice_ USBDevice;
   80ba8:	4801      	ldr	r0, [pc, #4]	; (80bb0 <_GLOBAL__I_TxLEDPulse+0x8>)
   80baa:	f7ff bcc3 	b.w	80534 <_ZN10USBDevice_C1Ev>
   80bae:	bf00      	nop
   80bb0:	200700b8 	.word	0x200700b8

00080bb4 <_Z9HID_SetupR5Setup>:
}

bool WEAK HID_Setup(Setup& setup)
{
	uint8_t r = setup.bRequest;
	uint8_t requestType = setup.bmRequestType;
   80bb4:	7802      	ldrb	r2, [r0, #0]
	USBD_Send(HID_TX, p, len+1);
}

bool WEAK HID_Setup(Setup& setup)
{
	uint8_t r = setup.bRequest;
   80bb6:	7843      	ldrb	r3, [r0, #1]
	uint8_t requestType = setup.bmRequestType;

	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
   80bb8:	2aa1      	cmp	r2, #161	; 0xa1
   80bba:	d108      	bne.n	80bce <_Z9HID_SetupR5Setup+0x1a>
	{
		if (HID_GET_REPORT == r)
   80bbc:	2b01      	cmp	r3, #1
   80bbe:	d101      	bne.n	80bc4 <_Z9HID_SetupR5Setup+0x10>
   80bc0:	4618      	mov	r0, r3
   80bc2:	4770      	bx	lr
	for (uint32_t i=0; i<len; i++)
		p[i+1] = d[i];
	USBD_Send(HID_TX, p, len+1);
}

bool WEAK HID_Setup(Setup& setup)
   80bc4:	2b03      	cmp	r3, #3
   80bc6:	bf14      	ite	ne
   80bc8:	2000      	movne	r0, #0
   80bca:	2001      	moveq	r0, #1
   80bcc:	4770      	bx	lr
			//Send8(_hid_protocol);	// TODO
			return true;
		}
	}

	if (REQUEST_HOSTTODEVICE_CLASS_INTERFACE == requestType)
   80bce:	2a21      	cmp	r2, #33	; 0x21
   80bd0:	d10b      	bne.n	80bea <_Z9HID_SetupR5Setup+0x36>
	{
		if (HID_SET_PROTOCOL == r)
   80bd2:	2b0b      	cmp	r3, #11
   80bd4:	d102      	bne.n	80bdc <_Z9HID_SetupR5Setup+0x28>
		{
			_hid_protocol = setup.wValueL;
   80bd6:	7882      	ldrb	r2, [r0, #2]
   80bd8:	4b05      	ldr	r3, [pc, #20]	; (80bf0 <_Z9HID_SetupR5Setup+0x3c>)
   80bda:	e003      	b.n	80be4 <_Z9HID_SetupR5Setup+0x30>
			return true;
		}

		if (HID_SET_IDLE == r)
   80bdc:	2b0a      	cmp	r3, #10
   80bde:	d104      	bne.n	80bea <_Z9HID_SetupR5Setup+0x36>
		{
			_hid_idle = setup.wValueL;
   80be0:	7882      	ldrb	r2, [r0, #2]
   80be2:	4b04      	ldr	r3, [pc, #16]	; (80bf4 <_Z9HID_SetupR5Setup+0x40>)
   80be4:	701a      	strb	r2, [r3, #0]
   80be6:	2001      	movs	r0, #1
			return true;
   80be8:	4770      	bx	lr
   80bea:	2000      	movs	r0, #0
		}
	}
	return false;
}
   80bec:	4770      	bx	lr
   80bee:	bf00      	nop
   80bf0:	2007003c 	.word	0x2007003c
   80bf4:	2007003d 	.word	0x2007003d

00080bf8 <_ZN6Mouse_C1Ev>:

//================================================================================
//================================================================================
//	Mouse

Mouse_::Mouse_(void) : _buttons(0)
   80bf8:	2200      	movs	r2, #0
   80bfa:	7002      	strb	r2, [r0, #0]
{
}
   80bfc:	4770      	bx	lr
	...

00080c00 <_ZN9Keyboard_C1Ev>:
   80c00:	2200      	movs	r2, #0
   80c02:	6042      	str	r2, [r0, #4]

//================================================================================
//================================================================================
//	Keyboard

Keyboard_::Keyboard_(void)
   80c04:	4a01      	ldr	r2, [pc, #4]	; (80c0c <_ZN9Keyboard_C1Ev+0xc>)
   80c06:	6002      	str	r2, [r0, #0]
{
}
   80c08:	4770      	bx	lr
   80c0a:	bf00      	nop
   80c0c:	00081c00 	.word	0x00081c00

00080c10 <_ZN9Keyboard_5writeEh>:

size_t Keyboard_::write(uint8_t c)
{
	uint8_t p = 0;

	p = press(c);	// Keydown
   80c10:	6803      	ldr	r3, [r0, #0]
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
}

size_t Keyboard_::write(uint8_t c)
{
   80c12:	b570      	push	{r4, r5, r6, lr}
	uint8_t p = 0;

	p = press(c);	// Keydown
   80c14:	689b      	ldr	r3, [r3, #8]
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
}

size_t Keyboard_::write(uint8_t c)
{
   80c16:	4604      	mov	r4, r0
   80c18:	460e      	mov	r6, r1
	uint8_t p = 0;

	p = press(c);	// Keydown
   80c1a:	4798      	blx	r3
	release(c);		// Keyup
   80c1c:	6823      	ldr	r3, [r4, #0]

size_t Keyboard_::write(uint8_t c)
{
	uint8_t p = 0;

	p = press(c);	// Keydown
   80c1e:	4605      	mov	r5, r0
	release(c);		// Keyup
   80c20:	68db      	ldr	r3, [r3, #12]
   80c22:	4620      	mov	r0, r4
   80c24:	4631      	mov	r1, r6
   80c26:	4798      	blx	r3

	return (p);		// Just return the result of press() since release() almost always returns 1
}
   80c28:	b2e8      	uxtb	r0, r5
   80c2a:	bd70      	pop	{r4, r5, r6, pc}

00080c2c <_Z14HID_SendReporthPKvm>:
{
	return USBD_SendControl(0,_hidReportDescriptor,sizeof(_hidReportDescriptor));
}

void WEAK HID_SendReport(uint8_t id, const void* data, uint32_t len)
{
   80c2c:	b500      	push	{lr}
   80c2e:	b091      	sub	sp, #68	; 0x44
   80c30:	4694      	mov	ip, r2
   80c32:	460b      	mov	r3, r1
	uint8_t p[64];
	const uint8_t *d = reinterpret_cast<const uint8_t *>(data);

	p[0] = id;
   80c34:	f88d 0000 	strb.w	r0, [sp]
   80c38:	2200      	movs	r2, #0
	for (uint32_t i=0; i<len; i++)
   80c3a:	e003      	b.n	80c44 <_Z14HID_SendReporthPKvm+0x18>
		p[i+1] = d[i];
   80c3c:	1898      	adds	r0, r3, r2
   80c3e:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   80c42:	5488      	strb	r0, [r1, r2]
{
	uint8_t p[64];
	const uint8_t *d = reinterpret_cast<const uint8_t *>(data);

	p[0] = id;
	for (uint32_t i=0; i<len; i++)
   80c44:	4562      	cmp	r2, ip
   80c46:	4669      	mov	r1, sp
   80c48:	f102 0201 	add.w	r2, r2, #1
   80c4c:	d1f6      	bne.n	80c3c <_Z14HID_SendReporthPKvm+0x10>
		p[i+1] = d[i];
	USBD_Send(HID_TX, p, len+1);
   80c4e:	2004      	movs	r0, #4
   80c50:	f7ff ff36 	bl	80ac0 <_Z9USBD_SendmPKvm>
}
   80c54:	b011      	add	sp, #68	; 0x44
   80c56:	bd00      	pop	{pc}

00080c58 <_ZN9Keyboard_10sendReportEP9KeyReport>:
{
}

void Keyboard_::sendReport(KeyReport* keys)
{
	HID_SendReport(2,keys,sizeof(KeyReport));
   80c58:	2002      	movs	r0, #2
   80c5a:	2208      	movs	r2, #8
   80c5c:	f7ff bfe6 	b.w	80c2c <_Z14HID_SendReporthPKvm>

00080c60 <_ZN9Keyboard_10releaseAllEv>:
	return 1;
}

void Keyboard_::releaseAll(void)
{
	_keyReport.keys[0] = 0;
   80c60:	2300      	movs	r3, #0
	sendReport(&_keyReport);
	return 1;
}

void Keyboard_::releaseAll(void)
{
   80c62:	4601      	mov	r1, r0
	_keyReport.keys[1] = 0;
	_keyReport.keys[2] = 0;
	_keyReport.keys[3] = 0;
	_keyReport.keys[4] = 0;
	_keyReport.keys[5] = 0;
	_keyReport.modifiers = 0;
   80c64:	f801 3f08 	strb.w	r3, [r1, #8]!
	return 1;
}

void Keyboard_::releaseAll(void)
{
	_keyReport.keys[0] = 0;
   80c68:	7283      	strb	r3, [r0, #10]
	_keyReport.keys[1] = 0;
   80c6a:	72c3      	strb	r3, [r0, #11]
	_keyReport.keys[2] = 0;
   80c6c:	7303      	strb	r3, [r0, #12]
	_keyReport.keys[3] = 0;
   80c6e:	7343      	strb	r3, [r0, #13]
	_keyReport.keys[4] = 0;
   80c70:	7383      	strb	r3, [r0, #14]
	_keyReport.keys[5] = 0;
   80c72:	73c3      	strb	r3, [r0, #15]
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
   80c74:	f7ff bff0 	b.w	80c58 <_ZN9Keyboard_10sendReportEP9KeyReport>

00080c78 <_ZN9Keyboard_7releaseEh>:
// sends the report.  This tells the OS the key is no longer pressed and that
// it shouldn't be repeated any more.
size_t Keyboard_::release(uint8_t k)
{
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80c78:	2987      	cmp	r1, #135	; 0x87

// release() takes the specified key out of the persistent key report and
// sends the report.  This tells the OS the key is no longer pressed and that
// it shouldn't be repeated any more.
size_t Keyboard_::release(uint8_t k)
{
   80c7a:	b508      	push	{r3, lr}
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80c7c:	d902      	bls.n	80c84 <_ZN9Keyboard_7releaseEh+0xc>
		k = k - 136;
   80c7e:	3178      	adds	r1, #120	; 0x78
   80c80:	b2c9      	uxtb	r1, r1
   80c82:	e01a      	b.n	80cba <_ZN9Keyboard_7releaseEh+0x42>
	} else if (k >= 128) {	// it's a modifier key
   80c84:	f011 0f80 	tst.w	r1, #128	; 0x80
   80c88:	d009      	beq.n	80c9e <_ZN9Keyboard_7releaseEh+0x26>
		_keyReport.modifiers &= ~(1<<(k-128));
   80c8a:	2301      	movs	r3, #1
   80c8c:	3980      	subs	r1, #128	; 0x80
   80c8e:	fa13 f101 	lsls.w	r1, r3, r1
   80c92:	7a03      	ldrb	r3, [r0, #8]
   80c94:	ea23 0101 	bic.w	r1, r3, r1
   80c98:	7201      	strb	r1, [r0, #8]
   80c9a:	2100      	movs	r1, #0
   80c9c:	e00d      	b.n	80cba <_ZN9Keyboard_7releaseEh+0x42>
		k = 0;
	} else {				// it's a printing key
		k = _asciimap[k];
   80c9e:	4b12      	ldr	r3, [pc, #72]	; (80ce8 <_ZN9Keyboard_7releaseEh+0x70>)
   80ca0:	5c59      	ldrb	r1, [r3, r1]
		if (!k) {
   80ca2:	b909      	cbnz	r1, 80ca8 <_ZN9Keyboard_7releaseEh+0x30>
   80ca4:	4608      	mov	r0, r1
   80ca6:	bd08      	pop	{r3, pc}
			return 0;
		}
		if (k & 0x80) {							// it's a capital letter or other character reached with shift
   80ca8:	f011 0f80 	tst.w	r1, #128	; 0x80
   80cac:	d005      	beq.n	80cba <_ZN9Keyboard_7releaseEh+0x42>
			_keyReport.modifiers &= ~(0x02);	// the left shift modifier
   80cae:	7a03      	ldrb	r3, [r0, #8]
			k &= 0x7F;
   80cb0:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		k = _asciimap[k];
		if (!k) {
			return 0;
		}
		if (k & 0x80) {							// it's a capital letter or other character reached with shift
			_keyReport.modifiers &= ~(0x02);	// the left shift modifier
   80cb4:	f023 0302 	bic.w	r3, r3, #2
   80cb8:	7203      	strb	r3, [r0, #8]
			k &= 0x7F;
   80cba:	4603      	mov	r3, r0
   80cbc:	2200      	movs	r2, #0
	}

	// Test the key report to see if k is present.  Clear it if it exists.
	// Check all positions in case the key is present more than once (which it shouldn't be)
	for (i=0; i<6; i++) {
		if (0 != k && _keyReport.keys[i] == k) {
   80cbe:	b139      	cbz	r1, 80cd0 <_ZN9Keyboard_7releaseEh+0x58>
   80cc0:	f893 c00a 	ldrb.w	ip, [r3, #10]
   80cc4:	458c      	cmp	ip, r1
			_keyReport.keys[i] = 0x00;
   80cc6:	bf04      	itt	eq
   80cc8:	f04f 0c00 	moveq.w	ip, #0
   80ccc:	f883 c00a 	strbeq.w	ip, [r3, #10]
		}
	}

	// Test the key report to see if k is present.  Clear it if it exists.
	// Check all positions in case the key is present more than once (which it shouldn't be)
	for (i=0; i<6; i++) {
   80cd0:	3201      	adds	r2, #1
   80cd2:	b2d2      	uxtb	r2, r2
   80cd4:	3301      	adds	r3, #1
   80cd6:	2a06      	cmp	r2, #6
   80cd8:	d1f1      	bne.n	80cbe <_ZN9Keyboard_7releaseEh+0x46>
		if (0 != k && _keyReport.keys[i] == k) {
			_keyReport.keys[i] = 0x00;
		}
	}

	sendReport(&_keyReport);
   80cda:	f100 0108 	add.w	r1, r0, #8
   80cde:	f7ff ffbb 	bl	80c58 <_ZN9Keyboard_10sendReportEP9KeyReport>
   80ce2:	2001      	movs	r0, #1
	return 1;
}
   80ce4:	bd08      	pop	{r3, pc}
   80ce6:	bf00      	nop
   80ce8:	00081c18 	.word	0x00081c18

00080cec <_ZN9Keyboard_5pressEh>:
// USB HID works, the host acts like the key remains pressed until we
// call release(), releaseAll(), or otherwise clear the report and resend.
size_t Keyboard_::press(uint8_t k)
{
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80cec:	2987      	cmp	r1, #135	; 0x87
// press() adds the specified key (printing, non-printing, or modifier)
// to the persistent key report and sends the report.  Because of the way
// USB HID works, the host acts like the key remains pressed until we
// call release(), releaseAll(), or otherwise clear the report and resend.
size_t Keyboard_::press(uint8_t k)
{
   80cee:	b538      	push	{r3, r4, r5, lr}
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80cf0:	d902      	bls.n	80cf8 <_ZN9Keyboard_5pressEh+0xc>
		k = k - 136;
   80cf2:	3178      	adds	r1, #120	; 0x78
   80cf4:	b2c9      	uxtb	r1, r1
   80cf6:	e01b      	b.n	80d30 <_ZN9Keyboard_5pressEh+0x44>
	} else if (k >= 128) {	// it's a modifier key
   80cf8:	f011 0f80 	tst.w	r1, #128	; 0x80
   80cfc:	d008      	beq.n	80d10 <_ZN9Keyboard_5pressEh+0x24>
		_keyReport.modifiers |= (1<<(k-128));
   80cfe:	2301      	movs	r3, #1
   80d00:	3980      	subs	r1, #128	; 0x80
   80d02:	fa13 f101 	lsls.w	r1, r3, r1
   80d06:	7a03      	ldrb	r3, [r0, #8]
   80d08:	4319      	orrs	r1, r3
   80d0a:	7201      	strb	r1, [r0, #8]
   80d0c:	2100      	movs	r1, #0
   80d0e:	e00f      	b.n	80d30 <_ZN9Keyboard_5pressEh+0x44>
		k = 0;
	} else {				// it's a printing key
		k = _asciimap[k];
   80d10:	4b1c      	ldr	r3, [pc, #112]	; (80d84 <_ZN9Keyboard_5pressEh+0x98>)
   80d12:	5c59      	ldrb	r1, [r3, r1]
		if (!k) {
   80d14:	b919      	cbnz	r1, 80d1e <_ZN9Keyboard_5pressEh+0x32>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   80d16:	2301      	movs	r3, #1
   80d18:	6043      	str	r3, [r0, #4]
   80d1a:	4608      	mov	r0, r1
			setWriteError();
			return 0;
   80d1c:	bd38      	pop	{r3, r4, r5, pc}
		}
		if (k & 0x80) {						// it's a capital letter or other character reached with shift
   80d1e:	f011 0f80 	tst.w	r1, #128	; 0x80
   80d22:	d005      	beq.n	80d30 <_ZN9Keyboard_5pressEh+0x44>
			_keyReport.modifiers |= 0x02;	// the left shift modifier
   80d24:	7a03      	ldrb	r3, [r0, #8]
			k &= 0x7F;
   80d26:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if (!k) {
			setWriteError();
			return 0;
		}
		if (k & 0x80) {						// it's a capital letter or other character reached with shift
			_keyReport.modifiers |= 0x02;	// the left shift modifier
   80d2a:	f043 0302 	orr.w	r3, r3, #2
   80d2e:	7203      	strb	r3, [r0, #8]
		}
	}

	// Add k to the key report only if it's not already present
	// and if there is an empty slot.
	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
   80d30:	7a83      	ldrb	r3, [r0, #10]
   80d32:	428b      	cmp	r3, r1
   80d34:	d020      	beq.n	80d78 <_ZN9Keyboard_5pressEh+0x8c>
   80d36:	7ac3      	ldrb	r3, [r0, #11]
   80d38:	428b      	cmp	r3, r1
   80d3a:	d01d      	beq.n	80d78 <_ZN9Keyboard_5pressEh+0x8c>
		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
   80d3c:	7b03      	ldrb	r3, [r0, #12]
   80d3e:	428b      	cmp	r3, r1
   80d40:	d01a      	beq.n	80d78 <_ZN9Keyboard_5pressEh+0x8c>
   80d42:	7b43      	ldrb	r3, [r0, #13]
   80d44:	428b      	cmp	r3, r1
   80d46:	d017      	beq.n	80d78 <_ZN9Keyboard_5pressEh+0x8c>
		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {
   80d48:	7b83      	ldrb	r3, [r0, #14]
   80d4a:	428b      	cmp	r3, r1
   80d4c:	d014      	beq.n	80d78 <_ZN9Keyboard_5pressEh+0x8c>
   80d4e:	7bc3      	ldrb	r3, [r0, #15]
   80d50:	428b      	cmp	r3, r1
   80d52:	d011      	beq.n	80d78 <_ZN9Keyboard_5pressEh+0x8c>
   80d54:	2200      	movs	r2, #0
   80d56:	4613      	mov	r3, r2

		for (i=0; i<6; i++) {
			if (_keyReport.keys[i] == 0x00) {
   80d58:	1884      	adds	r4, r0, r2
   80d5a:	7aa5      	ldrb	r5, [r4, #10]
   80d5c:	b91d      	cbnz	r5, 80d66 <_ZN9Keyboard_5pressEh+0x7a>
				_keyReport.keys[i] = k;
				break;
			}
		}
		if (i == 6) {
   80d5e:	2b06      	cmp	r3, #6
		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {

		for (i=0; i<6; i++) {
			if (_keyReport.keys[i] == 0x00) {
				_keyReport.keys[i] = k;
   80d60:	72a1      	strb	r1, [r4, #10]
				break;
			}
		}
		if (i == 6) {
   80d62:	d109      	bne.n	80d78 <_ZN9Keyboard_5pressEh+0x8c>
   80d64:	e004      	b.n	80d70 <_ZN9Keyboard_5pressEh+0x84>
	// and if there is an empty slot.
	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {

		for (i=0; i<6; i++) {
   80d66:	3301      	adds	r3, #1
   80d68:	b2db      	uxtb	r3, r3
   80d6a:	3201      	adds	r2, #1
   80d6c:	2b06      	cmp	r3, #6
   80d6e:	d1f3      	bne.n	80d58 <_ZN9Keyboard_5pressEh+0x6c>
   80d70:	2301      	movs	r3, #1
   80d72:	6043      	str	r3, [r0, #4]
   80d74:	2000      	movs	r0, #0
				break;
			}
		}
		if (i == 6) {
			setWriteError();
			return 0;
   80d76:	bd38      	pop	{r3, r4, r5, pc}
		}
	}
	sendReport(&_keyReport);
   80d78:	f100 0108 	add.w	r1, r0, #8
   80d7c:	f7ff ff6c 	bl	80c58 <_ZN9Keyboard_10sendReportEP9KeyReport>
   80d80:	2001      	movs	r0, #1
	return 1;
}
   80d82:	bd38      	pop	{r3, r4, r5, pc}
   80d84:	00081c18 	.word	0x00081c18

00080d88 <_Z17HID_GetDescriptori>:
	return USBD_SendControl(0,&_hidInterface,sizeof(_hidInterface));
}

int WEAK HID_GetDescriptor(int i)
{
	return USBD_SendControl(0,_hidReportDescriptor,sizeof(_hidReportDescriptor));
   80d88:	4902      	ldr	r1, [pc, #8]	; (80d94 <_Z17HID_GetDescriptori+0xc>)
   80d8a:	2000      	movs	r0, #0
   80d8c:	2265      	movs	r2, #101	; 0x65
   80d8e:	f7ff bc39 	b.w	80604 <_Z16USBD_SendControlhPKvm>
   80d92:	bf00      	nop
   80d94:	00081cb4 	.word	0x00081cb4

00080d98 <_Z16HID_GetInterfacePh>:

#define WEAK __attribute__ ((weak))

int WEAK HID_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 1;	// uses 1
   80d98:	7803      	ldrb	r3, [r0, #0]
	return USBD_SendControl(0,&_hidInterface,sizeof(_hidInterface));
   80d9a:	4903      	ldr	r1, [pc, #12]	; (80da8 <_Z16HID_GetInterfacePh+0x10>)

#define WEAK __attribute__ ((weak))

int WEAK HID_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 1;	// uses 1
   80d9c:	3301      	adds	r3, #1
   80d9e:	7003      	strb	r3, [r0, #0]
	return USBD_SendControl(0,&_hidInterface,sizeof(_hidInterface));
   80da0:	2219      	movs	r2, #25
   80da2:	2000      	movs	r0, #0
   80da4:	f7ff bc2e 	b.w	80604 <_Z16USBD_SendControlhPKvm>
   80da8:	00081c98 	.word	0x00081c98

00080dac <_GLOBAL__I_Mouse>:

	p = press(c);	// Keydown
	release(c);		// Keyup

	return (p);		// Just return the result of press() since release() almost always returns 1
}
   80dac:	b510      	push	{r4, lr}

//#define RAWHID_ENABLED

//	Singletons for mouse and keyboard

Mouse_ Mouse;
   80dae:	4804      	ldr	r0, [pc, #16]	; (80dc0 <_GLOBAL__I_Mouse+0x14>)
   80db0:	f7ff ff22 	bl	80bf8 <_ZN6Mouse_C1Ev>
Keyboard_ Keyboard;
   80db4:	4803      	ldr	r0, [pc, #12]	; (80dc4 <_GLOBAL__I_Mouse+0x18>)

	p = press(c);	// Keydown
	release(c);		// Keyup

	return (p);		// Just return the result of press() since release() almost always returns 1
}
   80db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//#define RAWHID_ENABLED

//	Singletons for mouse and keyboard

Mouse_ Mouse;
Keyboard_ Keyboard;
   80dba:	f7ff bf21 	b.w	80c00 <_ZN9Keyboard_C1Ev>
   80dbe:	bf00      	nop
   80dc0:	200700c8 	.word	0x200700c8
   80dc4:	200700cc 	.word	0x200700cc

00080dc8 <init>:
#endif

void __libc_init_array(void);

void init( void )
{
   80dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SystemInit();
   80dcc:	f000 fb30 	bl	81430 <SystemInit>
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   80dd0:	4b3a      	ldr	r3, [pc, #232]	; (80ebc <init+0xf4>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80dd2:	f06f 010f 	mvn.w	r1, #15
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   80dd6:	681a      	ldr	r2, [r3, #0]
   80dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80ddc:	fbb2 f2f3 	udiv	r2, r2, r3
   80de0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   80de4:	4b36      	ldr	r3, [pc, #216]	; (80ec0 <init+0xf8>)
   80de6:	3a01      	subs	r2, #1
   80de8:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80dea:	4a36      	ldr	r2, [pc, #216]	; (80ec4 <init+0xfc>)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   80dec:	2400      	movs	r4, #0
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80dee:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
   80df2:	2207      	movs	r2, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   80df4:	609c      	str	r4, [r3, #8]
    // Capture error
    while (true);
  }

  // Disable watchdog
  WDT_Disable(WDT);
   80df6:	4834      	ldr	r0, [pc, #208]	; (80ec8 <init+0x100>)
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
   80df8:	601a      	str	r2, [r3, #0]
   80dfa:	f000 fb15 	bl	81428 <WDT_Disable>

  // Initialize C library
  __libc_init_array();
   80dfe:	f000 fdd1 	bl	819a4 <__libc_init_array>

  // Disable pull-up on every pin
  for (int i = 0; i < PINS_COUNT; i++)
   80e02:	e004      	b.n	80e0e <init+0x46>
	  digitalWrite(i, LOW);
   80e04:	4620      	mov	r0, r4
   80e06:	2100      	movs	r1, #0
   80e08:	f7ff fa06 	bl	80218 <digitalWrite>

  // Initialize C library
  __libc_init_array();

  // Disable pull-up on every pin
  for (int i = 0; i < PINS_COUNT; i++)
   80e0c:	3401      	adds	r4, #1
   80e0e:	2c4f      	cmp	r4, #79	; 0x4f
   80e10:	d1f8      	bne.n	80e04 <init+0x3c>
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
   80e12:	4d2e      	ldr	r5, [pc, #184]	; (80ecc <init+0x104>)
  PIOB->PIO_OWER = 0xFFFFFFFF;
   80e14:	4e2e      	ldr	r6, [pc, #184]	; (80ed0 <init+0x108>)
  PIOC->PIO_OWER = 0xFFFFFFFF;
  PIOD->PIO_OWER = 0xFFFFFFFF;
   80e16:	4f2f      	ldr	r7, [pc, #188]	; (80ed4 <init+0x10c>)
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
  PIOC->PIO_OWER = 0xFFFFFFFF;
   80e18:	4b2f      	ldr	r3, [pc, #188]	; (80ed8 <init+0x110>)
  // Disable pull-up on every pin
  for (int i = 0; i < PINS_COUNT; i++)
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
   80e1a:	3c50      	subs	r4, #80	; 0x50
   80e1c:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80e20:	2101      	movs	r1, #1
  for (int i = 0; i < PINS_COUNT; i++)
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
   80e22:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80e26:	f44f 7240 	mov.w	r2, #768	; 0x300
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
  PIOC->PIO_OWER = 0xFFFFFFFF;
   80e2a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80e2e:	4628      	mov	r0, r5
   80e30:	2300      	movs	r3, #0

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
  PIOC->PIO_OWER = 0xFFFFFFFF;
  PIOD->PIO_OWER = 0xFFFFFFFF;
   80e32:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80e36:	f000 fa63 	bl	81300 <PIO_Configure>
  digitalWrite(0, HIGH); // Enable pullup for RX0
   80e3a:	2000      	movs	r0, #0
   80e3c:	2101      	movs	r1, #1
   80e3e:	f7ff f9eb 	bl	80218 <digitalWrite>
  PIO_Configure(
    g_APinDescription[PINS_USART0].pPort,
    g_APinDescription[PINS_USART0].ulPinType,
    g_APinDescription[PINS_USART0].ulPin,
    g_APinDescription[PINS_USART0].ulPinConfiguration);
   80e42:	2101      	movs	r1, #1
   80e44:	2300      	movs	r3, #0
   80e46:	4628      	mov	r0, r5
   80e48:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   80e4c:	f000 fa58 	bl	81300 <PIO_Configure>
  PIO_Configure(
    g_APinDescription[PINS_USART1].pPort,
    g_APinDescription[PINS_USART1].ulPinType,
    g_APinDescription[PINS_USART1].ulPin,
    g_APinDescription[PINS_USART1].ulPinConfiguration);
   80e50:	2101      	movs	r1, #1
   80e52:	2300      	movs	r3, #0
   80e54:	4628      	mov	r0, r5
   80e56:	f44f 5240 	mov.w	r2, #12288	; 0x3000
   80e5a:	f000 fa51 	bl	81300 <PIO_Configure>
  PIO_Configure(
    g_APinDescription[PINS_USART3].pPort,
    g_APinDescription[PINS_USART3].ulPinType,
    g_APinDescription[PINS_USART3].ulPin,
    g_APinDescription[PINS_USART3].ulPinConfiguration);
   80e5e:	2102      	movs	r1, #2
   80e60:	2230      	movs	r2, #48	; 0x30
   80e62:	2300      	movs	r3, #0
   80e64:	4638      	mov	r0, r7
   80e66:	f000 fa4b 	bl	81300 <PIO_Configure>
  // Initialize USB pins
  PIO_Configure(
    g_APinDescription[PINS_USB].pPort,
    g_APinDescription[PINS_USB].ulPinType,
    g_APinDescription[PINS_USB].ulPin,
    g_APinDescription[PINS_USB].ulPinConfiguration);
   80e6a:	2101      	movs	r1, #1
   80e6c:	2300      	movs	r3, #0
   80e6e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   80e72:	4630      	mov	r0, r6
   80e74:	f000 fa44 	bl	81300 <PIO_Configure>

  // Initialize Analog Controller
  pmc_enable_periph_clk(ID_ADC);
   80e78:	2025      	movs	r0, #37	; 0x25
   80e7a:	f000 fa93 	bl	813a4 <pmc_enable_periph_clk>
  adc_init(ADC, SystemCoreClock, ADC_FREQ_MAX, ADC_STARTUP_FAST);
   80e7e:	4b0f      	ldr	r3, [pc, #60]	; (80ebc <init+0xf4>)
   80e80:	4a16      	ldr	r2, [pc, #88]	; (80edc <init+0x114>)
   80e82:	6819      	ldr	r1, [r3, #0]
   80e84:	4816      	ldr	r0, [pc, #88]	; (80ee0 <init+0x118>)
   80e86:	230c      	movs	r3, #12
   80e88:	f000 fb58 	bl	8153c <adc_init>
  adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   80e8c:	2301      	movs	r3, #1
   80e8e:	2100      	movs	r1, #0
   80e90:	4813      	ldr	r0, [pc, #76]	; (80ee0 <init+0x118>)
   80e92:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80e96:	f000 fb76 	bl	81586 <adc_configure_timing>
  adc_configure_trigger(ADC, ADC_TRIG_SW, 0); // Disable hardware trigger.
   80e9a:	2100      	movs	r1, #0
   80e9c:	460a      	mov	r2, r1
   80e9e:	4810      	ldr	r0, [pc, #64]	; (80ee0 <init+0x118>)
   80ea0:	f000 fb69 	bl	81576 <adc_configure_trigger>
  adc_disable_interrupt(ADC, 0xFFFFFFFF); // Disable all ADC interrupts.
   80ea4:	4621      	mov	r1, r4
   80ea6:	480e      	ldr	r0, [pc, #56]	; (80ee0 <init+0x118>)
   80ea8:	f000 fb8b 	bl	815c2 <adc_disable_interrupt>
  adc_disable_all_channel(ADC);
   80eac:	480c      	ldr	r0, [pc, #48]	; (80ee0 <init+0x118>)
   80eae:	f000 fb82 	bl	815b6 <adc_disable_all_channel>

  // Initialize analogOutput module
  analogOutputInit();
}
   80eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  adc_configure_trigger(ADC, ADC_TRIG_SW, 0); // Disable hardware trigger.
  adc_disable_interrupt(ADC, 0xFFFFFFFF); // Disable all ADC interrupts.
  adc_disable_all_channel(ADC);

  // Initialize analogOutput module
  analogOutputInit();
   80eb6:	f7ff b94d 	b.w	80154 <analogOutputInit>
   80eba:	bf00      	nop
   80ebc:	20070048 	.word	0x20070048
   80ec0:	e000e010 	.word	0xe000e010
   80ec4:	e000ed00 	.word	0xe000ed00
   80ec8:	400e1a50 	.word	0x400e1a50
   80ecc:	400e0e00 	.word	0x400e0e00
   80ed0:	400e1000 	.word	0x400e1000
   80ed4:	400e1400 	.word	0x400e1400
   80ed8:	400e1200 	.word	0x400e1200
   80edc:	01312d00 	.word	0x01312d00
   80ee0:	400c0000 	.word	0x400c0000

00080ee4 <USART3_Handler>:
  Serial2.IrqHandler();
}

void USART3_Handler(void)
{
  Serial3.IrqHandler();
   80ee4:	4801      	ldr	r0, [pc, #4]	; (80eec <USART3_Handler+0x8>)
   80ee6:	f000 b8b5 	b.w	81054 <_ZN10USARTClass10IrqHandlerEv>
   80eea:	bf00      	nop
   80eec:	20070184 	.word	0x20070184

00080ef0 <USART1_Handler>:
  Serial1.IrqHandler();
}

void USART1_Handler(void)
{
  Serial2.IrqHandler();
   80ef0:	4801      	ldr	r0, [pc, #4]	; (80ef8 <USART1_Handler+0x8>)
   80ef2:	f000 b8af 	b.w	81054 <_ZN10USARTClass10IrqHandlerEv>
   80ef6:	bf00      	nop
   80ef8:	20070164 	.word	0x20070164

00080efc <USART0_Handler>:
USARTClass Serial3(USART3, USART3_IRQn, ID_USART3, &rx_buffer4);

// IT handlers
void USART0_Handler(void)
{
  Serial1.IrqHandler();
   80efc:	4801      	ldr	r0, [pc, #4]	; (80f04 <USART0_Handler+0x8>)
   80efe:	f000 b8a9 	b.w	81054 <_ZN10USARTClass10IrqHandlerEv>
   80f02:	bf00      	nop
   80f04:	20070144 	.word	0x20070144

00080f08 <UART_Handler>:
UARTClass Serial(UART, UART_IRQn, ID_UART, &rx_buffer1);

// IT handlers
void UART_Handler(void)
{
  Serial.IrqHandler();
   80f08:	4801      	ldr	r0, [pc, #4]	; (80f10 <UART_Handler+0x8>)
   80f0a:	f7ff ba8b 	b.w	80424 <_ZN9UARTClass10IrqHandlerEv>
   80f0e:	bf00      	nop
   80f10:	200700dc 	.word	0x200700dc

00080f14 <_GLOBAL__I_g_APinDescription>:
  // Initialize analogOutput module
  analogOutputInit();
}

#ifdef __cplusplus
}
   80f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
#endif

/*
 * UART objects
 */
RingBuffer rx_buffer1;
   80f16:	4c16      	ldr	r4, [pc, #88]	; (80f70 <_GLOBAL__I_g_APinDescription+0x5c>)

// ----------------------------------------------------------------------------
/*
 * USART objects
 */
RingBuffer rx_buffer2;
   80f18:	4e16      	ldr	r6, [pc, #88]	; (80f74 <_GLOBAL__I_g_APinDescription+0x60>)
#endif

/*
 * UART objects
 */
RingBuffer rx_buffer1;
   80f1a:	4620      	mov	r0, r4
   80f1c:	f000 f84f 	bl	80fbe <_ZN10RingBufferC1Ev>

UARTClass Serial(UART, UART_IRQn, ID_UART, &rx_buffer1);
   80f20:	2208      	movs	r2, #8
   80f22:	4613      	mov	r3, r2
   80f24:	4914      	ldr	r1, [pc, #80]	; (80f78 <_GLOBAL__I_g_APinDescription+0x64>)
// ----------------------------------------------------------------------------
/*
 * USART objects
 */
RingBuffer rx_buffer2;
RingBuffer rx_buffer3;
   80f26:	4d15      	ldr	r5, [pc, #84]	; (80f7c <_GLOBAL__I_g_APinDescription+0x68>)
/*
 * UART objects
 */
RingBuffer rx_buffer1;

UARTClass Serial(UART, UART_IRQn, ID_UART, &rx_buffer1);
   80f28:	4815      	ldr	r0, [pc, #84]	; (80f80 <_GLOBAL__I_g_APinDescription+0x6c>)
   80f2a:	9400      	str	r4, [sp, #0]
   80f2c:	f7ff fa3c 	bl	803a8 <_ZN9UARTClassC1EP4Uart4IRQnmP10RingBuffer>
/*
 * USART objects
 */
RingBuffer rx_buffer2;
RingBuffer rx_buffer3;
RingBuffer rx_buffer4;
   80f30:	4c14      	ldr	r4, [pc, #80]	; (80f84 <_GLOBAL__I_g_APinDescription+0x70>)

// ----------------------------------------------------------------------------
/*
 * USART objects
 */
RingBuffer rx_buffer2;
   80f32:	4630      	mov	r0, r6
   80f34:	f000 f843 	bl	80fbe <_ZN10RingBufferC1Ev>
RingBuffer rx_buffer3;
   80f38:	4628      	mov	r0, r5
   80f3a:	f000 f840 	bl	80fbe <_ZN10RingBufferC1Ev>
RingBuffer rx_buffer4;
   80f3e:	4620      	mov	r0, r4
   80f40:	f000 f83d 	bl	80fbe <_ZN10RingBufferC1Ev>

USARTClass Serial1(USART0, USART0_IRQn, ID_USART0, &rx_buffer2);
   80f44:	2211      	movs	r2, #17
   80f46:	4613      	mov	r3, r2
   80f48:	490f      	ldr	r1, [pc, #60]	; (80f88 <_GLOBAL__I_g_APinDescription+0x74>)
   80f4a:	4810      	ldr	r0, [pc, #64]	; (80f8c <_GLOBAL__I_g_APinDescription+0x78>)
   80f4c:	9600      	str	r6, [sp, #0]
   80f4e:	f000 f843 	bl	80fd8 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>
USARTClass Serial2(USART1, USART1_IRQn, ID_USART1, &rx_buffer3);
   80f52:	2212      	movs	r2, #18
   80f54:	4613      	mov	r3, r2
   80f56:	490e      	ldr	r1, [pc, #56]	; (80f90 <_GLOBAL__I_g_APinDescription+0x7c>)
   80f58:	480e      	ldr	r0, [pc, #56]	; (80f94 <_GLOBAL__I_g_APinDescription+0x80>)
   80f5a:	9500      	str	r5, [sp, #0]
   80f5c:	f000 f83c 	bl	80fd8 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>
USARTClass Serial3(USART3, USART3_IRQn, ID_USART3, &rx_buffer4);
   80f60:	2214      	movs	r2, #20
   80f62:	490d      	ldr	r1, [pc, #52]	; (80f98 <_GLOBAL__I_g_APinDescription+0x84>)
   80f64:	4613      	mov	r3, r2
   80f66:	480d      	ldr	r0, [pc, #52]	; (80f9c <_GLOBAL__I_g_APinDescription+0x88>)
   80f68:	9400      	str	r4, [sp, #0]
   80f6a:	f000 f835 	bl	80fd8 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>
  // Initialize analogOutput module
  analogOutputInit();
}

#ifdef __cplusplus
}
   80f6e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   80f70:	200700fc 	.word	0x200700fc
   80f74:	200701a4 	.word	0x200701a4
   80f78:	400e0800 	.word	0x400e0800
   80f7c:	200701ec 	.word	0x200701ec
   80f80:	200700dc 	.word	0x200700dc
   80f84:	20070234 	.word	0x20070234
   80f88:	40098000 	.word	0x40098000
   80f8c:	20070144 	.word	0x20070144
   80f90:	4009c000 	.word	0x4009c000
   80f94:	20070164 	.word	0x20070164
   80f98:	400a4000 	.word	0x400a4000
   80f9c:	20070184 	.word	0x20070184

00080fa0 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
   80fa0:	4770      	bx	lr

00080fa2 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
   80fa2:	2000      	movs	r0, #0
   80fa4:	4770      	bx	lr

00080fa6 <pendSVHook>:
 * PendSV hook
 *
 * These functions are called from SVC handler, and PensSV handler.
 * Default action is halting.
 */
static void __halt() {
   80fa6:	e7fe      	b.n	80fa6 <pendSVHook>

00080fa8 <_ZN10RingBuffer10store_charEh>:
    _iTail=0 ;
}

void RingBuffer::store_char( uint8_t c )
{
  int i = (uint32_t)(_iHead + 1) % SERIAL_BUFFER_SIZE ;
   80fa8:	6c02      	ldr	r2, [r0, #64]	; 0x40
    _iHead=0 ;
    _iTail=0 ;
}

void RingBuffer::store_char( uint8_t c )
{
   80faa:	b510      	push	{r4, lr}
  int i = (uint32_t)(_iHead + 1) % SERIAL_BUFFER_SIZE ;
   80fac:	1c53      	adds	r3, r2, #1

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
   80fae:	6c44      	ldr	r4, [r0, #68]	; 0x44
    _iTail=0 ;
}

void RingBuffer::store_char( uint8_t c )
{
  int i = (uint32_t)(_iHead + 1) % SERIAL_BUFFER_SIZE ;
   80fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
   80fb4:	42a3      	cmp	r3, r4
  {
    _aucBuffer[_iHead] = c ;
   80fb6:	bf1c      	itt	ne
   80fb8:	5481      	strbne	r1, [r0, r2]
    _iHead = i ;
   80fba:	6403      	strne	r3, [r0, #64]	; 0x40
   80fbc:	bd10      	pop	{r4, pc}

00080fbe <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
   80fbe:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
   80fc0:	2100      	movs	r1, #0
   80fc2:	2240      	movs	r2, #64	; 0x40
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
   80fc4:	4604      	mov	r4, r0
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
   80fc6:	f000 fd15 	bl	819f4 <memset>
    _iHead=0 ;
   80fca:	2300      	movs	r3, #0
   80fcc:	6423      	str	r3, [r4, #64]	; 0x40
    _iTail=0 ;
   80fce:	6463      	str	r3, [r4, #68]	; 0x44
}
   80fd0:	4620      	mov	r0, r4
   80fd2:	bd10      	pop	{r4, pc}

00080fd4 <_ZN10USARTClasscvbEv>:
#elif defined __ICCARM__ /* IAR Ewarm 5.41+ */
//    virtual void write( const char *str ) ;
//    virtual void write( const uint8_t *buffer, size_t size ) ;
#endif

    operator bool() { return true; }; // USART always active
   80fd4:	2001      	movs	r0, #1
   80fd6:	4770      	bx	lr

00080fd8 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>:
#include <string.h>
#include "USARTClass.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTClass::USARTClass( Usart* pUsart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
   80fd8:	b530      	push	{r4, r5, lr}
  public:
    Print() : write_error(0) {}
   80fda:	2500      	movs	r5, #0
   80fdc:	6045      	str	r5, [r0, #4]
   80fde:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   80fe2:	6085      	str	r5, [r0, #8]
   80fe4:	4d04      	ldr	r5, [pc, #16]	; (80ff8 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer+0x20>)
   80fe6:	4604      	mov	r4, r0
   80fe8:	6005      	str	r5, [r0, #0]
{
  _rx_buffer = pRx_buffer ;
   80fea:	9d03      	ldr	r5, [sp, #12]

  _pUsart=pUsart ;
   80fec:	6141      	str	r1, [r0, #20]

// Constructors ////////////////////////////////////////////////////////////////

USARTClass::USARTClass( Usart* pUsart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
{
  _rx_buffer = pRx_buffer ;
   80fee:	6105      	str	r5, [r0, #16]

  _pUsart=pUsart ;
  _dwIrq=dwIrq ;
   80ff0:	7602      	strb	r2, [r0, #24]
  _dwId=dwId ;
   80ff2:	61c3      	str	r3, [r0, #28]
}
   80ff4:	bd30      	pop	{r4, r5, pc}
   80ff6:	bf00      	nop
   80ff8:	00082718 	.word	0x00082718

00080ffc <_ZN10USARTClass9availableEv>:
  pmc_disable_periph_clk( _dwId ) ;
}

int USARTClass::available( void )
{
  return (uint32_t)(SERIAL_BUFFER_SIZE + _rx_buffer->_iHead - _rx_buffer->_iTail) % SERIAL_BUFFER_SIZE ;
   80ffc:	6903      	ldr	r3, [r0, #16]
   80ffe:	6c18      	ldr	r0, [r3, #64]	; 0x40
   81000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   81002:	1ac0      	subs	r0, r0, r3
}
   81004:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   81008:	4770      	bx	lr

0008100a <_ZN10USARTClass4peekEv>:

int USARTClass::peek( void )
{
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   8100a:	6903      	ldr	r3, [r0, #16]
   8100c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   8100e:	6c19      	ldr	r1, [r3, #64]	; 0x40
   81010:	4291      	cmp	r1, r2
   81012:	bf0c      	ite	eq
   81014:	f04f 30ff 	moveq.w	r0, #4294967295
    return -1 ;

  return _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   81018:	5c98      	ldrbne	r0, [r3, r2]
}
   8101a:	4770      	bx	lr

0008101c <_ZN10USARTClass4readEv>:

int USARTClass::read( void )
{
  // if the head isn't ahead of the tail, we don't have any characters
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   8101c:	6903      	ldr	r3, [r0, #16]
   8101e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   81020:	6c19      	ldr	r1, [r3, #64]	; 0x40
   81022:	4291      	cmp	r1, r2
   81024:	d102      	bne.n	8102c <_ZN10USARTClass4readEv+0x10>
   81026:	f04f 30ff 	mov.w	r0, #4294967295
   8102a:	4770      	bx	lr
    return -1 ;

  uint8_t uc = _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   8102c:	5c98      	ldrb	r0, [r3, r2]
  _rx_buffer->_iTail = (unsigned int)(_rx_buffer->_iTail + 1) % SERIAL_BUFFER_SIZE ;
   8102e:	3201      	adds	r2, #1
   81030:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   81034:	645a      	str	r2, [r3, #68]	; 0x44
  return uc ;
}
   81036:	4770      	bx	lr

00081038 <_ZN10USARTClass5flushEv>:

void USARTClass::flush( void )
{
  // Wait for transmission to complete
  while ((_pUsart->US_CSR & US_CSR_TXRDY) != US_CSR_TXRDY)
   81038:	6943      	ldr	r3, [r0, #20]
   8103a:	695a      	ldr	r2, [r3, #20]
   8103c:	f012 0f02 	tst.w	r2, #2
   81040:	d0fb      	beq.n	8103a <_ZN10USARTClass5flushEv+0x2>
	;
}
   81042:	4770      	bx	lr

00081044 <_ZN10USARTClass5writeEh>:

size_t USARTClass::write( const uint8_t uc_data )
{
  // Check if the transmitter is ready
  while ((_pUsart->US_CSR & US_CSR_TXRDY) != US_CSR_TXRDY)
   81044:	6943      	ldr	r3, [r0, #20]
   81046:	695a      	ldr	r2, [r3, #20]
   81048:	f012 0f02 	tst.w	r2, #2
   8104c:	d0fb      	beq.n	81046 <_ZN10USARTClass5writeEh+0x2>
    ;

  // Send character
  _pUsart->US_THR = uc_data ;
   8104e:	61d9      	str	r1, [r3, #28]
  return 1;
}
   81050:	2001      	movs	r0, #1
   81052:	4770      	bx	lr

00081054 <_ZN10USARTClass10IrqHandlerEv>:

void USARTClass::IrqHandler( void )
{
   81054:	b538      	push	{r3, r4, r5, lr}
  uint32_t status = _pUsart->US_CSR;
   81056:	6943      	ldr	r3, [r0, #20]
  _pUsart->US_THR = uc_data ;
  return 1;
}

void USARTClass::IrqHandler( void )
{
   81058:	4604      	mov	r4, r0
  uint32_t status = _pUsart->US_CSR;
   8105a:	695d      	ldr	r5, [r3, #20]

  // Did we receive data ?
  if ((status & US_CSR_RXRDY) == US_CSR_RXRDY)
   8105c:	f015 0f01 	tst.w	r5, #1
   81060:	d004      	beq.n	8106c <_ZN10USARTClass10IrqHandlerEv+0x18>
    _rx_buffer->store_char( _pUsart->US_RHR ) ;
   81062:	6999      	ldr	r1, [r3, #24]
   81064:	6900      	ldr	r0, [r0, #16]
   81066:	b2c9      	uxtb	r1, r1
   81068:	f7ff ff9e 	bl	80fa8 <_ZN10RingBuffer10store_charEh>

  // Acknowledge errors
  if ((status & US_CSR_OVRE) == US_CSR_OVRE ||
   8106c:	f015 0f60 	tst.w	r5, #96	; 0x60
   81070:	d004      	beq.n	8107c <_ZN10USARTClass10IrqHandlerEv+0x28>
		  (status & US_CSR_FRAME) == US_CSR_FRAME)
  {
	// TODO: error reporting outside ISR
    _pUsart->US_CR |= US_CR_RSTSTA;
   81072:	6963      	ldr	r3, [r4, #20]
   81074:	681a      	ldr	r2, [r3, #0]
   81076:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8107a:	601a      	str	r2, [r3, #0]
   8107c:	bd38      	pop	{r3, r4, r5, pc}
	...

00081080 <_ZN7Serial_9availableEv>:
}

int Serial_::available(void)
{
	ring_buffer *buffer = &cdc_rx_buffer;
	return (unsigned int)(CDC_SERIAL_BUFFER_SIZE + buffer->head - buffer->tail) % CDC_SERIAL_BUFFER_SIZE;
   81080:	4b04      	ldr	r3, [pc, #16]	; (81094 <_ZN7Serial_9availableEv+0x14>)
   81082:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
   81086:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   8108a:	1ac0      	subs	r0, r0, r3
}
   8108c:	05c0      	lsls	r0, r0, #23
   8108e:	0dc0      	lsrs	r0, r0, #23
   81090:	4770      	bx	lr
   81092:	bf00      	nop
   81094:	2007027c 	.word	0x2007027c

00081098 <_ZN7Serial_4peekEv>:

int Serial_::peek(void)
{
	ring_buffer *buffer = &cdc_rx_buffer;

	if (buffer->head == buffer->tail)
   81098:	4b06      	ldr	r3, [pc, #24]	; (810b4 <_ZN7Serial_4peekEv+0x1c>)
   8109a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   8109e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   810a2:	4291      	cmp	r1, r2
	{
		return -1;
	}
	else
	{
		return buffer->buffer[buffer->tail];
   810a4:	bf16      	itet	ne
   810a6:	f8d3 2204 	ldrne.w	r2, [r3, #516]	; 0x204

int Serial_::peek(void)
{
	ring_buffer *buffer = &cdc_rx_buffer;

	if (buffer->head == buffer->tail)
   810aa:	f04f 30ff 	moveq.w	r0, #4294967295
	{
		return -1;
	}
	else
	{
		return buffer->buffer[buffer->tail];
   810ae:	5c98      	ldrbne	r0, [r3, r2]
	}
}
   810b0:	4770      	bx	lr
   810b2:	bf00      	nop
   810b4:	2007027c 	.word	0x2007027c

000810b8 <_ZN7Serial_5writeEh>:
	}
	setWriteError();
	return 0;
}

size_t Serial_::write(uint8_t c) {
   810b8:	b507      	push	{r0, r1, r2, lr}
   810ba:	aa02      	add	r2, sp, #8
   810bc:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return write(&c, 1);
   810c0:	6803      	ldr	r3, [r0, #0]
   810c2:	4611      	mov	r1, r2
   810c4:	685b      	ldr	r3, [r3, #4]
   810c6:	2201      	movs	r2, #1
   810c8:	4798      	blx	r3
}
   810ca:	bd0e      	pop	{r1, r2, r3, pc}

000810cc <_ZN7Serial_5writeEPKhj>:
{
	USBD_Flush(CDC_TX);
}

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
   810cc:	b510      	push	{r4, lr}
	 the connection is closed are lost - just like with a UART. */

	// TODO - ZE - check behavior on different OSes and test what happens if an
	// open connection isn't broken cleanly (cable is yanked out, host dies
	// or locks up, or host virtual serial port hangs)
	if (_usbLineInfo.lineState > 0)
   810ce:	4b08      	ldr	r3, [pc, #32]	; (810f0 <_ZN7Serial_5writeEPKhj+0x24>)
{
	USBD_Flush(CDC_TX);
}

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
   810d0:	4604      	mov	r4, r0
	 the connection is closed are lost - just like with a UART. */

	// TODO - ZE - check behavior on different OSes and test what happens if an
	// open connection isn't broken cleanly (cable is yanked out, host dies
	// or locks up, or host virtual serial port hangs)
	if (_usbLineInfo.lineState > 0)
   810d2:	79db      	ldrb	r3, [r3, #7]
   810d4:	4618      	mov	r0, r3
   810d6:	b143      	cbz	r3, 810ea <_ZN7Serial_5writeEPKhj+0x1e>
	{
		int r = USBD_Send(CDC_TX, buffer, size);
   810d8:	2003      	movs	r0, #3
   810da:	f7ff fcf1 	bl	80ac0 <_Z9USBD_SendmPKvm>

		if (r > 0)
   810de:	2800      	cmp	r0, #0
   810e0:	dc05      	bgt.n	810ee <_ZN7Serial_5writeEPKhj+0x22>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   810e2:	2301      	movs	r3, #1
   810e4:	6063      	str	r3, [r4, #4]
   810e6:	2000      	movs	r0, #0
		{
			return r;
		} else
		{
			setWriteError();
			return 0;
   810e8:	bd10      	pop	{r4, pc}
   810ea:	2301      	movs	r3, #1
   810ec:	6063      	str	r3, [r4, #4]
		}
	}
	setWriteError();
	return 0;
}
   810ee:	bd10      	pop	{r4, pc}
   810f0:	20070040 	.word	0x20070040

000810f4 <_ZN7Serial_5flushEv>:
	}
}

void Serial_::flush(void)
{
	USBD_Flush(CDC_TX);
   810f4:	2003      	movs	r0, #3
   810f6:	f7ff ba45 	b.w	80584 <_Z10USBD_Flushm>
	...

000810fc <_ZN7Serial_4readEv>:
		return buffer->buffer[buffer->tail];
	}
}

int Serial_::read(void)
{
   810fc:	b538      	push	{r3, r4, r5, lr}
	ring_buffer *buffer = &cdc_rx_buffer;

	// if the head isn't ahead of the tail, we don't have any characters
	if (buffer->head == buffer->tail)
   810fe:	4b0f      	ldr	r3, [pc, #60]	; (8113c <_ZN7Serial_4readEv+0x40>)
		return buffer->buffer[buffer->tail];
	}
}

int Serial_::read(void)
{
   81100:	4604      	mov	r4, r0
	ring_buffer *buffer = &cdc_rx_buffer;

	// if the head isn't ahead of the tail, we don't have any characters
	if (buffer->head == buffer->tail)
   81102:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   81106:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   8110a:	4291      	cmp	r1, r2
   8110c:	d102      	bne.n	81114 <_ZN7Serial_4readEv+0x18>
   8110e:	f04f 30ff 	mov.w	r0, #4294967295
   81112:	bd38      	pop	{r3, r4, r5, pc}
	{
		return -1;
	}
	else
	{
		unsigned char c = buffer->buffer[buffer->tail];
   81114:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
		buffer->tail = (unsigned int)(buffer->tail + 1) % CDC_SERIAL_BUFFER_SIZE;
		if (USBD_Available(CDC_RX))
   81118:	2002      	movs	r0, #2
	{
		return -1;
	}
	else
	{
		unsigned char c = buffer->buffer[buffer->tail];
   8111a:	5c9d      	ldrb	r5, [r3, r2]
		buffer->tail = (unsigned int)(buffer->tail + 1) % CDC_SERIAL_BUFFER_SIZE;
   8111c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   81120:	3201      	adds	r2, #1
   81122:	05d2      	lsls	r2, r2, #23
   81124:	0dd2      	lsrs	r2, r2, #23
   81126:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (USBD_Available(CDC_RX))
   8112a:	f7ff fa15 	bl	80558 <_Z14USBD_Availablem>
   8112e:	b118      	cbz	r0, 81138 <_ZN7Serial_4readEv+0x3c>
			accept();
   81130:	6823      	ldr	r3, [r4, #0]
   81132:	4620      	mov	r0, r4
   81134:	699b      	ldr	r3, [r3, #24]
   81136:	4798      	blx	r3
		return c;
   81138:	4628      	mov	r0, r5
	}
}
   8113a:	bd38      	pop	{r3, r4, r5, pc}
   8113c:	2007027c 	.word	0x2007027c

00081140 <_ZN7Serial_6acceptEv>:
void Serial_::end(void)
{
}

void Serial_::accept(void)
{
   81140:	b538      	push	{r3, r4, r5, lr}
	static uint32_t guard = 0;

	// synchronized access to guard
	do {
		if (__LDREXW(&guard) != 0) {
   81142:	4b17      	ldr	r3, [pc, #92]	; (811a0 <_ZN7Serial_6acceptEv+0x60>)
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   81144:	e853 2f00 	ldrex	r2, [r3]
   81148:	b112      	cbz	r2, 81150 <_ZN7Serial_6acceptEv+0x10>
    This function removes the exclusive lock which is created by LDREX.

 */
__attribute__( ( always_inline ) ) static __INLINE void __CLREX(void)
{
  __ASM volatile ("clrex");
   8114a:	f3bf 8f2f 	clrex
			__CLREX();
			return;  // busy
   8114e:	bd38      	pop	{r3, r4, r5, pc}
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
   81150:	2201      	movs	r2, #1
   81152:	e843 2300 	strex	r3, r2, [r3]
void Serial_::accept(void)
{
	static uint32_t guard = 0;

	// synchronized access to guard
	do {
   81156:	2b00      	cmp	r3, #0
   81158:	d1f3      	bne.n	81142 <_ZN7Serial_6acceptEv+0x2>
			return;  // busy
		}
	} while (__STREXW(1, &guard) != 0); // retry until write succeed

	ring_buffer *buffer = &cdc_rx_buffer;
	uint32_t i = (uint32_t)(buffer->head+1) % CDC_SERIAL_BUFFER_SIZE;
   8115a:	4b12      	ldr	r3, [pc, #72]	; (811a4 <_ZN7Serial_6acceptEv+0x64>)
   8115c:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   81160:	18a4      	adds	r4, r4, r2
   81162:	e012      	b.n	8118a <_ZN7Serial_6acceptEv+0x4a>
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
		uint32_t c;
		if (!USBD_Available(CDC_RX)) {
   81164:	2002      	movs	r0, #2
   81166:	f7ff f9f7 	bl	80558 <_Z14USBD_Availablem>
   8116a:	b928      	cbnz	r0, 81178 <_ZN7Serial_6acceptEv+0x38>
			udd_ack_fifocon(CDC_RX);
   8116c:	4b0e      	ldr	r3, [pc, #56]	; (811a8 <_ZN7Serial_6acceptEv+0x68>)
   8116e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81172:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			break;
   81176:	e00f      	b.n	81198 <_ZN7Serial_6acceptEv+0x58>
		}
		c = USBD_Recv(CDC_RX);
   81178:	2002      	movs	r0, #2
   8117a:	f7ff fd05 	bl	80b88 <_Z9USBD_Recvm>
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
   8117e:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
		buffer->head = i;
   81182:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200
			udd_ack_fifocon(CDC_RX);
			break;
		}
		c = USBD_Recv(CDC_RX);
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
   81186:	54e8      	strb	r0, [r5, r3]
		buffer->head = i;

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
   81188:	3401      	adds	r4, #1

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
   8118a:	4d06      	ldr	r5, [pc, #24]	; (811a4 <_ZN7Serial_6acceptEv+0x64>)
		c = USBD_Recv(CDC_RX);
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
		buffer->head = i;

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
   8118c:	05e4      	lsls	r4, r4, #23

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
   8118e:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
		c = USBD_Recv(CDC_RX);
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
		buffer->head = i;

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
   81192:	0de4      	lsrs	r4, r4, #23

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
   81194:	429c      	cmp	r4, r3
   81196:	d1e5      	bne.n	81164 <_ZN7Serial_6acceptEv+0x24>

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
	}

	// release the guard
	guard = 0;
   81198:	4b01      	ldr	r3, [pc, #4]	; (811a0 <_ZN7Serial_6acceptEv+0x60>)
   8119a:	2200      	movs	r2, #0
   8119c:	601a      	str	r2, [r3, #0]
   8119e:	bd38      	pop	{r3, r4, r5, pc}
   811a0:	20070484 	.word	0x20070484
   811a4:	2007027c 	.word	0x2007027c
   811a8:	400ac000 	.word	0x400ac000

000811ac <_Z21CDC_GetOtherInterfacePh>:
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
}

int WEAK CDC_GetOtherInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   811ac:	7803      	ldrb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
   811ae:	4903      	ldr	r1, [pc, #12]	; (811bc <_Z21CDC_GetOtherInterfacePh+0x10>)
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
}

int WEAK CDC_GetOtherInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   811b0:	3302      	adds	r3, #2
   811b2:	7003      	strb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
   811b4:	2242      	movs	r2, #66	; 0x42
   811b6:	2000      	movs	r0, #0
   811b8:	f7ff ba24 	b.w	80604 <_Z16USBD_SendControlhPKvm>
   811bc:	00082760 	.word	0x00082760

000811c0 <_Z16CDC_GetInterfacePh>:
};
_Pragma("pack()")

int WEAK CDC_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   811c0:	7803      	ldrb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
   811c2:	4903      	ldr	r1, [pc, #12]	; (811d0 <_Z16CDC_GetInterfacePh+0x10>)
};
_Pragma("pack()")

int WEAK CDC_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   811c4:	3302      	adds	r3, #2
   811c6:	7003      	strb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
   811c8:	2242      	movs	r2, #66	; 0x42
   811ca:	2000      	movs	r0, #0
   811cc:	f7ff ba1a 	b.w	80604 <_Z16USBD_SendControlhPKvm>
   811d0:	000827a4 	.word	0x000827a4

000811d4 <_Z9CDC_SetupR5Setup>:
	interfaceNum[0] += 2;	// uses 2
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
}

bool WEAK CDC_Setup(Setup& setup)
{
   811d4:	b508      	push	{r3, lr}
	uint8_t r = setup.bRequest;
	uint8_t requestType = setup.bmRequestType;
   811d6:	7802      	ldrb	r2, [r0, #0]
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
}

bool WEAK CDC_Setup(Setup& setup)
{
	uint8_t r = setup.bRequest;
   811d8:	7843      	ldrb	r3, [r0, #1]
	uint8_t requestType = setup.bmRequestType;

	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
   811da:	2aa1      	cmp	r2, #161	; 0xa1
   811dc:	d107      	bne.n	811ee <_Z9CDC_SetupR5Setup+0x1a>
	{
		if (CDC_GET_LINE_CODING == r)
   811de:	2b21      	cmp	r3, #33	; 0x21
   811e0:	d123      	bne.n	8122a <_Z9CDC_SetupR5Setup+0x56>
		{
			USBD_SendControl(0,(void*)&_usbLineInfo,7);
   811e2:	2000      	movs	r0, #0
   811e4:	4912      	ldr	r1, [pc, #72]	; (81230 <_Z9CDC_SetupR5Setup+0x5c>)
   811e6:	3a9a      	subs	r2, #154	; 0x9a
   811e8:	f7ff fa0c 	bl	80604 <_Z16USBD_SendControlhPKvm>
   811ec:	e01b      	b.n	81226 <_Z9CDC_SetupR5Setup+0x52>
			return true;
		}
	}

	if (REQUEST_HOSTTODEVICE_CLASS_INTERFACE == requestType)
   811ee:	2a21      	cmp	r2, #33	; 0x21
   811f0:	d11b      	bne.n	8122a <_Z9CDC_SetupR5Setup+0x56>
	{
		if (CDC_SET_LINE_CODING == r)
   811f2:	2b20      	cmp	r3, #32
   811f4:	d104      	bne.n	81200 <_Z9CDC_SetupR5Setup+0x2c>
		{
			USBD_RecvControl((void*)&_usbLineInfo,7);
   811f6:	2107      	movs	r1, #7
   811f8:	480d      	ldr	r0, [pc, #52]	; (81230 <_Z9CDC_SetupR5Setup+0x5c>)
   811fa:	f7ff f9f4 	bl	805e6 <_Z16USBD_RecvControlPvm>
   811fe:	e012      	b.n	81226 <_Z9CDC_SetupR5Setup+0x52>
			return true;
		}

		if (CDC_SET_CONTROL_LINE_STATE == r)
   81200:	2b22      	cmp	r3, #34	; 0x22
   81202:	d112      	bne.n	8122a <_Z9CDC_SetupR5Setup+0x56>
		{
			_usbLineInfo.lineState = setup.wValueL;
   81204:	7882      	ldrb	r2, [r0, #2]
   81206:	4b0a      	ldr	r3, [pc, #40]	; (81230 <_Z9CDC_SetupR5Setup+0x5c>)
   81208:	71da      	strb	r2, [r3, #7]
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed.
			if (1200 == _usbLineInfo.dwDTERate)
   8120a:	681a      	ldr	r2, [r3, #0]
   8120c:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
   81210:	d109      	bne.n	81226 <_Z9CDC_SetupR5Setup+0x52>
			{
				// We check DTR state to determine if host port is open (bit 0 of lineState).
				if ((_usbLineInfo.lineState & 0x01) == 0)
   81212:	79db      	ldrb	r3, [r3, #7]
   81214:	f013 0f01 	tst.w	r3, #1
   81218:	d103      	bne.n	81222 <_Z9CDC_SetupR5Setup+0x4e>
					initiateReset(250);
   8121a:	20fa      	movs	r0, #250	; 0xfa
   8121c:	f7ff f8a4 	bl	80368 <initiateReset>
   81220:	e001      	b.n	81226 <_Z9CDC_SetupR5Setup+0x52>
				else
					cancelReset();
   81222:	f7ff f8a7 	bl	80374 <cancelReset>
   81226:	2001      	movs	r0, #1
   81228:	bd08      	pop	{r3, pc}
   8122a:	2000      	movs	r0, #0
			}
			return true;
		}
	}
	return false;
}
   8122c:	bd08      	pop	{r3, pc}
   8122e:	bf00      	nop
   81230:	20070040 	.word	0x20070040

00081234 <_GLOBAL__I_cdc_rx_buffer>:
  public:
    Print() : write_error(0) {}
   81234:	4b04      	ldr	r3, [pc, #16]	; (81248 <_GLOBAL__I_cdc_rx_buffer+0x14>)
   81236:	2200      	movs	r2, #0
   81238:	605a      	str	r2, [r3, #4]
   8123a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8123e:	609a      	str	r2, [r3, #8]
//================================================================================
//================================================================================
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
   81240:	4a02      	ldr	r2, [pc, #8]	; (8124c <_GLOBAL__I_cdc_rx_buffer+0x18>)
   81242:	601a      	str	r2, [r3, #0]

	delay(10);
	return result;
}

Serial_ SerialUSB;
   81244:	4770      	bx	lr
   81246:	bf00      	nop
   81248:	20070488 	.word	0x20070488
   8124c:	00082740 	.word	0x00082740

00081250 <PIO_DisableInterrupt>:
   81250:	6441      	str	r1, [r0, #68]	; 0x44
   81252:	4770      	bx	lr

00081254 <PIO_PullUp>:
   81254:	b10a      	cbz	r2, 8125a <PIO_PullUp+0x6>
   81256:	6641      	str	r1, [r0, #100]	; 0x64
   81258:	4770      	bx	lr
   8125a:	6601      	str	r1, [r0, #96]	; 0x60
   8125c:	4770      	bx	lr

0008125e <PIO_SetPeripheral>:
   8125e:	6442      	str	r2, [r0, #68]	; 0x44
   81260:	2905      	cmp	r1, #5
   81262:	d80f      	bhi.n	81284 <PIO_SetPeripheral+0x26>
   81264:	e8df f001 	tbb	[pc, r1]
   81268:	0f0a030f 	.word	0x0f0a030f
   8126c:	0f0f      	.short	0x0f0f
   8126e:	6f03      	ldr	r3, [r0, #112]	; 0x70
   81270:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81272:	ea01 0303 	and.w	r3, r1, r3
   81276:	ea23 0302 	bic.w	r3, r3, r2
   8127a:	e002      	b.n	81282 <PIO_SetPeripheral+0x24>
   8127c:	6f03      	ldr	r3, [r0, #112]	; 0x70
   8127e:	ea42 0303 	orr.w	r3, r2, r3
   81282:	6703      	str	r3, [r0, #112]	; 0x70
   81284:	6042      	str	r2, [r0, #4]
   81286:	4770      	bx	lr

00081288 <PIO_SetInput>:
   81288:	b570      	push	{r4, r5, r6, lr}
   8128a:	4b0d      	ldr	r3, [pc, #52]	; (812c0 <PIO_SetInput+0x38>)
   8128c:	4604      	mov	r4, r0
   8128e:	460d      	mov	r5, r1
   81290:	4616      	mov	r6, r2
   81292:	4798      	blx	r3
   81294:	4620      	mov	r0, r4
   81296:	4629      	mov	r1, r5
   81298:	f006 0201 	and.w	r2, r6, #1
   8129c:	4b09      	ldr	r3, [pc, #36]	; (812c4 <PIO_SetInput+0x3c>)
   8129e:	4798      	blx	r3
   812a0:	f016 0f0a 	tst.w	r6, #10
   812a4:	bf14      	ite	ne
   812a6:	6225      	strne	r5, [r4, #32]
   812a8:	6265      	streq	r5, [r4, #36]	; 0x24
   812aa:	f016 0f02 	tst.w	r6, #2
   812ae:	d102      	bne.n	812b6 <PIO_SetInput+0x2e>
   812b0:	f016 0f08 	tst.w	r6, #8
   812b4:	d001      	beq.n	812ba <PIO_SetInput+0x32>
   812b6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   812ba:	6165      	str	r5, [r4, #20]
   812bc:	6025      	str	r5, [r4, #0]
   812be:	bd70      	pop	{r4, r5, r6, pc}
   812c0:	00081251 	.word	0x00081251
   812c4:	00081255 	.word	0x00081255

000812c8 <PIO_SetOutput>:
   812c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   812ca:	4604      	mov	r4, r0
   812cc:	460d      	mov	r5, r1
   812ce:	461f      	mov	r7, r3
   812d0:	4b09      	ldr	r3, [pc, #36]	; (812f8 <PIO_SetOutput+0x30>)
   812d2:	4616      	mov	r6, r2
   812d4:	4798      	blx	r3
   812d6:	4620      	mov	r0, r4
   812d8:	4629      	mov	r1, r5
   812da:	9a06      	ldr	r2, [sp, #24]
   812dc:	4b07      	ldr	r3, [pc, #28]	; (812fc <PIO_SetOutput+0x34>)
   812de:	4798      	blx	r3
   812e0:	b10f      	cbz	r7, 812e6 <PIO_SetOutput+0x1e>
   812e2:	6525      	str	r5, [r4, #80]	; 0x50
   812e4:	e000      	b.n	812e8 <PIO_SetOutput+0x20>
   812e6:	6565      	str	r5, [r4, #84]	; 0x54
   812e8:	b10e      	cbz	r6, 812ee <PIO_SetOutput+0x26>
   812ea:	6325      	str	r5, [r4, #48]	; 0x30
   812ec:	e000      	b.n	812f0 <PIO_SetOutput+0x28>
   812ee:	6365      	str	r5, [r4, #52]	; 0x34
   812f0:	6125      	str	r5, [r4, #16]
   812f2:	6025      	str	r5, [r4, #0]
   812f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   812f6:	bf00      	nop
   812f8:	00081251 	.word	0x00081251
   812fc:	00081255 	.word	0x00081255

00081300 <PIO_Configure>:
   81300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   81302:	461f      	mov	r7, r3
   81304:	1e4b      	subs	r3, r1, #1
   81306:	4605      	mov	r5, r0
   81308:	460e      	mov	r6, r1
   8130a:	4614      	mov	r4, r2
   8130c:	2b04      	cmp	r3, #4
   8130e:	d825      	bhi.n	8135c <PIO_Configure+0x5c>
   81310:	e8df f003 	tbb	[pc, r3]
   81314:	16100303 	.word	0x16100303
   81318:	16          	.byte	0x16
   81319:	00          	.byte	0x00
   8131a:	4622      	mov	r2, r4
   8131c:	4b10      	ldr	r3, [pc, #64]	; (81360 <PIO_Configure+0x60>)
   8131e:	4798      	blx	r3
   81320:	4628      	mov	r0, r5
   81322:	4621      	mov	r1, r4
   81324:	4b0f      	ldr	r3, [pc, #60]	; (81364 <PIO_Configure+0x64>)
   81326:	4798      	blx	r3
   81328:	4628      	mov	r0, r5
   8132a:	4621      	mov	r1, r4
   8132c:	f007 0201 	and.w	r2, r7, #1
   81330:	4b0d      	ldr	r3, [pc, #52]	; (81368 <PIO_Configure+0x68>)
   81332:	e002      	b.n	8133a <PIO_Configure+0x3a>
   81334:	4b0d      	ldr	r3, [pc, #52]	; (8136c <PIO_Configure+0x6c>)
   81336:	4621      	mov	r1, r4
   81338:	463a      	mov	r2, r7
   8133a:	4798      	blx	r3
   8133c:	2001      	movs	r0, #1
   8133e:	e00e      	b.n	8135e <PIO_Configure+0x5e>
   81340:	f007 0301 	and.w	r3, r7, #1
   81344:	9300      	str	r3, [sp, #0]
   81346:	f1a6 0305 	sub.w	r3, r6, #5
   8134a:	425a      	negs	r2, r3
   8134c:	4621      	mov	r1, r4
   8134e:	eb42 0203 	adc.w	r2, r2, r3
   81352:	4c07      	ldr	r4, [pc, #28]	; (81370 <PIO_Configure+0x70>)
   81354:	f3c7 0380 	ubfx	r3, r7, #2, #1
   81358:	47a0      	blx	r4
   8135a:	e7ef      	b.n	8133c <PIO_Configure+0x3c>
   8135c:	2000      	movs	r0, #0
   8135e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   81360:	0008125f 	.word	0x0008125f
   81364:	00081251 	.word	0x00081251
   81368:	00081255 	.word	0x00081255
   8136c:	00081289 	.word	0x00081289
   81370:	000812c9 	.word	0x000812c9

00081374 <PIO_GetOutputDataStatus>:
   81374:	6883      	ldr	r3, [r0, #8]
   81376:	400b      	ands	r3, r1
   81378:	d005      	beq.n	81386 <PIO_GetOutputDataStatus+0x12>
   8137a:	6983      	ldr	r3, [r0, #24]
   8137c:	4219      	tst	r1, r3
   8137e:	bf0c      	ite	eq
   81380:	2000      	moveq	r0, #0
   81382:	2001      	movne	r0, #1
   81384:	4770      	bx	lr
   81386:	4618      	mov	r0, r3
   81388:	4770      	bx	lr
	...

0008138c <pmc_enable_upll_clock>:
   8138c:	4b04      	ldr	r3, [pc, #16]	; (813a0 <pmc_enable_upll_clock+0x14>)
   8138e:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   81392:	61da      	str	r2, [r3, #28]
   81394:	4b02      	ldr	r3, [pc, #8]	; (813a0 <pmc_enable_upll_clock+0x14>)
   81396:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81398:	f013 0f40 	tst.w	r3, #64	; 0x40
   8139c:	d0fa      	beq.n	81394 <pmc_enable_upll_clock+0x8>
   8139e:	4770      	bx	lr
   813a0:	400e0600 	.word	0x400e0600

000813a4 <pmc_enable_periph_clk>:
   813a4:	282c      	cmp	r0, #44	; 0x2c
   813a6:	d81a      	bhi.n	813de <pmc_enable_periph_clk+0x3a>
   813a8:	281f      	cmp	r0, #31
   813aa:	4b0f      	ldr	r3, [pc, #60]	; (813e8 <pmc_enable_periph_clk+0x44>)
   813ac:	f04f 0201 	mov.w	r2, #1
   813b0:	d808      	bhi.n	813c4 <pmc_enable_periph_clk+0x20>
   813b2:	fa12 f000 	lsls.w	r0, r2, r0
   813b6:	6999      	ldr	r1, [r3, #24]
   813b8:	ea00 0201 	and.w	r2, r0, r1
   813bc:	4282      	cmp	r2, r0
   813be:	d00c      	beq.n	813da <pmc_enable_periph_clk+0x36>
   813c0:	6118      	str	r0, [r3, #16]
   813c2:	e00a      	b.n	813da <pmc_enable_periph_clk+0x36>
   813c4:	3820      	subs	r0, #32
   813c6:	fa12 f000 	lsls.w	r0, r2, r0
   813ca:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
   813ce:	ea00 0201 	and.w	r2, r0, r1
   813d2:	4282      	cmp	r2, r0
   813d4:	d005      	beq.n	813e2 <pmc_enable_periph_clk+0x3e>
   813d6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   813da:	2000      	movs	r0, #0
   813dc:	4770      	bx	lr
   813de:	2001      	movs	r0, #1
   813e0:	4770      	bx	lr
   813e2:	2000      	movs	r0, #0
   813e4:	4770      	bx	lr
   813e6:	bf00      	nop
   813e8:	400e0600 	.word	0x400e0600

000813ec <pmc_switch_udpck_to_upllck>:
   813ec:	0202      	lsls	r2, r0, #8
   813ee:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   813f2:	4b02      	ldr	r3, [pc, #8]	; (813fc <pmc_switch_udpck_to_upllck+0x10>)
   813f4:	f042 0201 	orr.w	r2, r2, #1
   813f8:	639a      	str	r2, [r3, #56]	; 0x38
   813fa:	4770      	bx	lr
   813fc:	400e0600 	.word	0x400e0600

00081400 <pmc_enable_udpck>:
   81400:	4b01      	ldr	r3, [pc, #4]	; (81408 <pmc_enable_udpck+0x8>)
   81402:	2220      	movs	r2, #32
   81404:	601a      	str	r2, [r3, #0]
   81406:	4770      	bx	lr
   81408:	400e0600 	.word	0x400e0600

0008140c <TimeTick_Increment>:
   8140c:	4b02      	ldr	r3, [pc, #8]	; (81418 <TimeTick_Increment+0xc>)
   8140e:	681a      	ldr	r2, [r3, #0]
   81410:	3201      	adds	r2, #1
   81412:	601a      	str	r2, [r3, #0]
   81414:	4770      	bx	lr
   81416:	bf00      	nop
   81418:	2007049c 	.word	0x2007049c

0008141c <GetTickCount>:
   8141c:	4b01      	ldr	r3, [pc, #4]	; (81424 <GetTickCount+0x8>)
   8141e:	6818      	ldr	r0, [r3, #0]
   81420:	4770      	bx	lr
   81422:	bf00      	nop
   81424:	2007049c 	.word	0x2007049c

00081428 <WDT_Disable>:
   81428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8142c:	6043      	str	r3, [r0, #4]
   8142e:	4770      	bx	lr

00081430 <SystemInit>:
   81430:	4a1e      	ldr	r2, [pc, #120]	; (814ac <SystemInit+0x7c>)
   81432:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81436:	6013      	str	r3, [r2, #0]
   81438:	4a1d      	ldr	r2, [pc, #116]	; (814b0 <SystemInit+0x80>)
   8143a:	6013      	str	r3, [r2, #0]
   8143c:	4b1d      	ldr	r3, [pc, #116]	; (814b4 <SystemInit+0x84>)
   8143e:	6a1a      	ldr	r2, [r3, #32]
   81440:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
   81444:	d106      	bne.n	81454 <SystemInit+0x24>
   81446:	4a1c      	ldr	r2, [pc, #112]	; (814b8 <SystemInit+0x88>)
   81448:	621a      	str	r2, [r3, #32]
   8144a:	4b1a      	ldr	r3, [pc, #104]	; (814b4 <SystemInit+0x84>)
   8144c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8144e:	f013 0f01 	tst.w	r3, #1
   81452:	d0fa      	beq.n	8144a <SystemInit+0x1a>
   81454:	4a19      	ldr	r2, [pc, #100]	; (814bc <SystemInit+0x8c>)
   81456:	4b17      	ldr	r3, [pc, #92]	; (814b4 <SystemInit+0x84>)
   81458:	621a      	str	r2, [r3, #32]
   8145a:	4b16      	ldr	r3, [pc, #88]	; (814b4 <SystemInit+0x84>)
   8145c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8145e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   81462:	d0fa      	beq.n	8145a <SystemInit+0x2a>
   81464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81466:	f022 0203 	bic.w	r2, r2, #3
   8146a:	f042 0201 	orr.w	r2, r2, #1
   8146e:	631a      	str	r2, [r3, #48]	; 0x30
   81470:	4b10      	ldr	r3, [pc, #64]	; (814b4 <SystemInit+0x84>)
   81472:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   81474:	f012 0f08 	tst.w	r2, #8
   81478:	d0fa      	beq.n	81470 <SystemInit+0x40>
   8147a:	4a11      	ldr	r2, [pc, #68]	; (814c0 <SystemInit+0x90>)
   8147c:	629a      	str	r2, [r3, #40]	; 0x28
   8147e:	4b0d      	ldr	r3, [pc, #52]	; (814b4 <SystemInit+0x84>)
   81480:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   81482:	f012 0f02 	tst.w	r2, #2
   81486:	d0fa      	beq.n	8147e <SystemInit+0x4e>
   81488:	2211      	movs	r2, #17
   8148a:	631a      	str	r2, [r3, #48]	; 0x30
   8148c:	4b09      	ldr	r3, [pc, #36]	; (814b4 <SystemInit+0x84>)
   8148e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   81490:	f012 0f08 	tst.w	r2, #8
   81494:	d0fa      	beq.n	8148c <SystemInit+0x5c>
   81496:	2212      	movs	r2, #18
   81498:	631a      	str	r2, [r3, #48]	; 0x30
   8149a:	4b06      	ldr	r3, [pc, #24]	; (814b4 <SystemInit+0x84>)
   8149c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8149e:	f013 0f08 	tst.w	r3, #8
   814a2:	d0fa      	beq.n	8149a <SystemInit+0x6a>
   814a4:	4a07      	ldr	r2, [pc, #28]	; (814c4 <SystemInit+0x94>)
   814a6:	4b08      	ldr	r3, [pc, #32]	; (814c8 <SystemInit+0x98>)
   814a8:	601a      	str	r2, [r3, #0]
   814aa:	4770      	bx	lr
   814ac:	400e0a00 	.word	0x400e0a00
   814b0:	400e0c00 	.word	0x400e0c00
   814b4:	400e0600 	.word	0x400e0600
   814b8:	00370809 	.word	0x00370809
   814bc:	01370809 	.word	0x01370809
   814c0:	200d3f01 	.word	0x200d3f01
   814c4:	0501bd00 	.word	0x0501bd00
   814c8:	20070048 	.word	0x20070048

000814cc <Reset_Handler>:
   814cc:	b508      	push	{r3, lr}
   814ce:	4a13      	ldr	r2, [pc, #76]	; (8151c <Reset_Handler+0x50>)
   814d0:	4b13      	ldr	r3, [pc, #76]	; (81520 <Reset_Handler+0x54>)
   814d2:	429a      	cmp	r2, r3
   814d4:	d105      	bne.n	814e2 <Reset_Handler+0x16>
   814d6:	4b13      	ldr	r3, [pc, #76]	; (81524 <Reset_Handler+0x58>)
   814d8:	e00a      	b.n	814f0 <Reset_Handler+0x24>
   814da:	f852 1b04 	ldr.w	r1, [r2], #4
   814de:	f843 1b04 	str.w	r1, [r3], #4
   814e2:	4911      	ldr	r1, [pc, #68]	; (81528 <Reset_Handler+0x5c>)
   814e4:	428b      	cmp	r3, r1
   814e6:	d3f8      	bcc.n	814da <Reset_Handler+0xe>
   814e8:	e7f5      	b.n	814d6 <Reset_Handler+0xa>
   814ea:	2200      	movs	r2, #0
   814ec:	f843 2b04 	str.w	r2, [r3], #4
   814f0:	4a0e      	ldr	r2, [pc, #56]	; (8152c <Reset_Handler+0x60>)
   814f2:	4293      	cmp	r3, r2
   814f4:	d3f9      	bcc.n	814ea <Reset_Handler+0x1e>
   814f6:	490e      	ldr	r1, [pc, #56]	; (81530 <Reset_Handler+0x64>)
   814f8:	4b0e      	ldr	r3, [pc, #56]	; (81534 <Reset_Handler+0x68>)
   814fa:	f021 4260 	bic.w	r2, r1, #3758096384	; 0xe0000000
   814fe:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
   81502:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81506:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8150a:	609a      	str	r2, [r3, #8]
   8150c:	d203      	bcs.n	81516 <Reset_Handler+0x4a>
   8150e:	689a      	ldr	r2, [r3, #8]
   81510:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81514:	609a      	str	r2, [r3, #8]
   81516:	4b08      	ldr	r3, [pc, #32]	; (81538 <Reset_Handler+0x6c>)
   81518:	4798      	blx	r3
   8151a:	e7fe      	b.n	8151a <Reset_Handler+0x4e>
   8151c:	00082818 	.word	0x00082818
   81520:	20070000 	.word	0x20070000
   81524:	20070050 	.word	0x20070050
   81528:	20070050 	.word	0x20070050
   8152c:	200704f4 	.word	0x200704f4
   81530:	00080000 	.word	0x00080000
   81534:	e000ed00 	.word	0xe000ed00
   81538:	000804ad 	.word	0x000804ad

0008153c <adc_init>:
   8153c:	b530      	push	{r4, r5, lr}
   8153e:	0052      	lsls	r2, r2, #1
   81540:	2401      	movs	r4, #1
   81542:	6004      	str	r4, [r0, #0]
   81544:	f240 2502 	movw	r5, #514	; 0x202
   81548:	3c01      	subs	r4, #1
   8154a:	fbb1 f2f2 	udiv	r2, r1, r2
   8154e:	6044      	str	r4, [r0, #4]
   81550:	3a01      	subs	r2, #1
   81552:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
   81556:	041b      	lsls	r3, r3, #16
   81558:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
   8155c:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
   81560:	6845      	ldr	r5, [r0, #4]
   81562:	0612      	lsls	r2, r2, #24
   81564:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81568:	ea43 4212 	orr.w	r2, r3, r2, lsr #16
   8156c:	ea42 0505 	orr.w	r5, r2, r5
   81570:	6045      	str	r5, [r0, #4]
   81572:	4620      	mov	r0, r4
   81574:	bd30      	pop	{r4, r5, pc}

00081576 <adc_configure_trigger>:
   81576:	6843      	ldr	r3, [r0, #4]
   81578:	4319      	orrs	r1, r3
   8157a:	01d3      	lsls	r3, r2, #7
   8157c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   81580:	4319      	orrs	r1, r3
   81582:	6041      	str	r1, [r0, #4]
   81584:	4770      	bx	lr

00081586 <adc_configure_timing>:
   81586:	b510      	push	{r4, lr}
   81588:	6844      	ldr	r4, [r0, #4]
   8158a:	071b      	lsls	r3, r3, #28
   8158c:	4322      	orrs	r2, r4
   8158e:	060c      	lsls	r4, r1, #24
   81590:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
   81594:	4322      	orrs	r2, r4
   81596:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   8159a:	431a      	orrs	r2, r3
   8159c:	6042      	str	r2, [r0, #4]
   8159e:	bd10      	pop	{r4, pc}

000815a0 <adc_start>:
   815a0:	2302      	movs	r3, #2
   815a2:	6003      	str	r3, [r0, #0]
   815a4:	4770      	bx	lr

000815a6 <adc_enable_channel>:
   815a6:	2301      	movs	r3, #1
   815a8:	408b      	lsls	r3, r1
   815aa:	6103      	str	r3, [r0, #16]
   815ac:	4770      	bx	lr

000815ae <adc_disable_channel>:
   815ae:	2301      	movs	r3, #1
   815b0:	408b      	lsls	r3, r1
   815b2:	6143      	str	r3, [r0, #20]
   815b4:	4770      	bx	lr

000815b6 <adc_disable_all_channel>:
   815b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   815ba:	6143      	str	r3, [r0, #20]
   815bc:	4770      	bx	lr

000815be <adc_get_latest_value>:
   815be:	6a00      	ldr	r0, [r0, #32]
   815c0:	4770      	bx	lr

000815c2 <adc_disable_interrupt>:
   815c2:	6281      	str	r1, [r0, #40]	; 0x28
   815c4:	4770      	bx	lr

000815c6 <adc_get_status>:
   815c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
   815c8:	4770      	bx	lr
	...

000815cc <UDD_SetStack>:
   815cc:	4b01      	ldr	r3, [pc, #4]	; (815d4 <UDD_SetStack+0x8>)
   815ce:	6018      	str	r0, [r3, #0]
   815d0:	4770      	bx	lr
   815d2:	bf00      	nop
   815d4:	200704f0 	.word	0x200704f0

000815d8 <UDD_Init>:
   815d8:	b510      	push	{r4, lr}
   815da:	2300      	movs	r3, #0
   815dc:	4a2a      	ldr	r2, [pc, #168]	; (81688 <UDD_Init+0xb0>)
   815de:	2400      	movs	r4, #0
   815e0:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   815e4:	4a29      	ldr	r2, [pc, #164]	; (8168c <UDD_Init+0xb4>)
   815e6:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   815ea:	3301      	adds	r3, #1
   815ec:	2b0a      	cmp	r3, #10
   815ee:	d1f5      	bne.n	815dc <UDD_Init+0x4>
   815f0:	2028      	movs	r0, #40	; 0x28
   815f2:	4b27      	ldr	r3, [pc, #156]	; (81690 <UDD_Init+0xb8>)
   815f4:	4798      	blx	r3
   815f6:	4b27      	ldr	r3, [pc, #156]	; (81694 <UDD_Init+0xbc>)
   815f8:	4798      	blx	r3
   815fa:	4620      	mov	r0, r4
   815fc:	4b26      	ldr	r3, [pc, #152]	; (81698 <UDD_Init+0xc0>)
   815fe:	4798      	blx	r3
   81600:	4b26      	ldr	r3, [pc, #152]	; (8169c <UDD_Init+0xc4>)
   81602:	4798      	blx	r3
   81604:	4b26      	ldr	r3, [pc, #152]	; (816a0 <UDD_Init+0xc8>)
   81606:	f44f 7280 	mov.w	r2, #256	; 0x100
   8160a:	f883 4328 	strb.w	r4, [r3, #808]	; 0x328
   8160e:	605a      	str	r2, [r3, #4]
   81610:	4b24      	ldr	r3, [pc, #144]	; (816a4 <UDD_Init+0xcc>)
   81612:	4620      	mov	r0, r4
   81614:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81618:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   8161c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   81620:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81624:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   81628:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   8162c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81630:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   81634:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   81638:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8163c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   81640:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   81644:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81648:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   8164c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   81650:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   81658:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   8165c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   81664:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   81668:	681a      	ldr	r2, [r3, #0]
   8166a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   8166e:	601a      	str	r2, [r3, #0]
   81670:	681a      	ldr	r2, [r3, #0]
   81672:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
   81676:	601a      	str	r2, [r3, #0]
   81678:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8167c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81680:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   81684:	bd10      	pop	{r4, pc}
   81686:	bf00      	nop
   81688:	200704c8 	.word	0x200704c8
   8168c:	200704a0 	.word	0x200704a0
   81690:	000813a5 	.word	0x000813a5
   81694:	0008138d 	.word	0x0008138d
   81698:	000813ed 	.word	0x000813ed
   8169c:	00081401 	.word	0x00081401
   816a0:	e000e100 	.word	0xe000e100
   816a4:	400ac000 	.word	0x400ac000

000816a8 <UDD_Attach>:
   816a8:	4b10      	ldr	r3, [pc, #64]	; (816ec <UDD_Attach+0x44>)
   816aa:	6819      	ldr	r1, [r3, #0]
   816ac:	b672      	cpsid	i
   816ae:	f3bf 8f5f 	dmb	sy
   816b2:	2200      	movs	r2, #0
   816b4:	601a      	str	r2, [r3, #0]
   816b6:	4a0e      	ldr	r2, [pc, #56]	; (816f0 <UDD_Attach+0x48>)
   816b8:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
   816bc:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
   816c0:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
   816c4:	461a      	mov	r2, r3
   816c6:	4b0a      	ldr	r3, [pc, #40]	; (816f0 <UDD_Attach+0x48>)
   816c8:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
   816cc:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   816d0:	d0f9      	beq.n	816c6 <UDD_Attach+0x1e>
   816d2:	6818      	ldr	r0, [r3, #0]
   816d4:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   816d8:	6018      	str	r0, [r3, #0]
   816da:	2008      	movs	r0, #8
   816dc:	6198      	str	r0, [r3, #24]
   816de:	b121      	cbz	r1, 816ea <UDD_Attach+0x42>
   816e0:	2301      	movs	r3, #1
   816e2:	6013      	str	r3, [r2, #0]
   816e4:	f3bf 8f5f 	dmb	sy
   816e8:	b662      	cpsie	i
   816ea:	4770      	bx	lr
   816ec:	2007004c 	.word	0x2007004c
   816f0:	400ac000 	.word	0x400ac000

000816f4 <UDD_InitEP>:
   816f4:	4b09      	ldr	r3, [pc, #36]	; (8171c <UDD_InitEP+0x28>)
   816f6:	f000 000f 	and.w	r0, r0, #15
   816fa:	f100 0240 	add.w	r2, r0, #64	; 0x40
   816fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   81702:	2201      	movs	r2, #1
   81704:	4082      	lsls	r2, r0
   81706:	69d9      	ldr	r1, [r3, #28]
   81708:	430a      	orrs	r2, r1
   8170a:	61da      	str	r2, [r3, #28]
   8170c:	4b04      	ldr	r3, [pc, #16]	; (81720 <UDD_InitEP+0x2c>)
   8170e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   81712:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   81716:	d100      	bne.n	8171a <UDD_InitEP+0x26>
   81718:	e7fe      	b.n	81718 <UDD_InitEP+0x24>
   8171a:	4770      	bx	lr
   8171c:	400ac000 	.word	0x400ac000
   81720:	400ac130 	.word	0x400ac130

00081724 <UDD_InitEndpoints>:
   81724:	b570      	push	{r4, r5, r6, lr}
   81726:	2301      	movs	r3, #1
   81728:	4c0b      	ldr	r4, [pc, #44]	; (81758 <UDD_InitEndpoints+0x34>)
   8172a:	e012      	b.n	81752 <UDD_InitEndpoints+0x2e>
   8172c:	4a0b      	ldr	r2, [pc, #44]	; (8175c <UDD_InitEndpoints+0x38>)
   8172e:	f850 6f04 	ldr.w	r6, [r0, #4]!
   81732:	f103 0540 	add.w	r5, r3, #64	; 0x40
   81736:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
   8173a:	2501      	movs	r5, #1
   8173c:	409d      	lsls	r5, r3
   8173e:	69d6      	ldr	r6, [r2, #28]
   81740:	4335      	orrs	r5, r6
   81742:	61d5      	str	r5, [r2, #28]
   81744:	f854 2b04 	ldr.w	r2, [r4], #4
   81748:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   8174c:	d100      	bne.n	81750 <UDD_InitEndpoints+0x2c>
   8174e:	e7fe      	b.n	8174e <UDD_InitEndpoints+0x2a>
   81750:	3301      	adds	r3, #1
   81752:	428b      	cmp	r3, r1
   81754:	d3ea      	bcc.n	8172c <UDD_InitEndpoints+0x8>
   81756:	bd70      	pop	{r4, r5, r6, pc}
   81758:	400ac134 	.word	0x400ac134
   8175c:	400ac000 	.word	0x400ac000

00081760 <UDD_WaitIN>:
   81760:	4b03      	ldr	r3, [pc, #12]	; (81770 <UDD_WaitIN+0x10>)
   81762:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   81766:	f013 0f01 	tst.w	r3, #1
   8176a:	d0f9      	beq.n	81760 <UDD_WaitIN>
   8176c:	4770      	bx	lr
   8176e:	bf00      	nop
   81770:	400ac000 	.word	0x400ac000

00081774 <UDD_WaitOUT>:
   81774:	4b03      	ldr	r3, [pc, #12]	; (81784 <UDD_WaitOUT+0x10>)
   81776:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   8177a:	f013 0f02 	tst.w	r3, #2
   8177e:	d0f9      	beq.n	81774 <UDD_WaitOUT>
   81780:	4770      	bx	lr
   81782:	bf00      	nop
   81784:	400ac000 	.word	0x400ac000

00081788 <UDD_ClearIN>:
   81788:	4b03      	ldr	r3, [pc, #12]	; (81798 <UDD_ClearIN+0x10>)
   8178a:	2201      	movs	r2, #1
   8178c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   81790:	4b02      	ldr	r3, [pc, #8]	; (8179c <UDD_ClearIN+0x14>)
   81792:	3a01      	subs	r2, #1
   81794:	601a      	str	r2, [r3, #0]
   81796:	4770      	bx	lr
   81798:	400ac000 	.word	0x400ac000
   8179c:	200704c8 	.word	0x200704c8

000817a0 <UDD_ClearOUT>:
   817a0:	4b03      	ldr	r3, [pc, #12]	; (817b0 <UDD_ClearOUT+0x10>)
   817a2:	2202      	movs	r2, #2
   817a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   817a8:	4b02      	ldr	r3, [pc, #8]	; (817b4 <UDD_ClearOUT+0x14>)
   817aa:	3a02      	subs	r2, #2
   817ac:	601a      	str	r2, [r3, #0]
   817ae:	4770      	bx	lr
   817b0:	400ac000 	.word	0x400ac000
   817b4:	200704a0 	.word	0x200704a0

000817b8 <UDD_ReceivedSetupInt>:
   817b8:	4b02      	ldr	r3, [pc, #8]	; (817c4 <UDD_ReceivedSetupInt+0xc>)
   817ba:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   817be:	f000 0004 	and.w	r0, r0, #4
   817c2:	4770      	bx	lr
   817c4:	400ac000 	.word	0x400ac000

000817c8 <UDD_ClearSetupInt>:
   817c8:	4b02      	ldr	r3, [pc, #8]	; (817d4 <UDD_ClearSetupInt+0xc>)
   817ca:	2204      	movs	r2, #4
   817cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   817d0:	4770      	bx	lr
   817d2:	bf00      	nop
   817d4:	400ac000 	.word	0x400ac000

000817d8 <UDD_Send>:
   817d8:	b570      	push	{r4, r5, r6, lr}
   817da:	4615      	mov	r5, r2
   817dc:	03c2      	lsls	r2, r0, #15
   817de:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   817e2:	4603      	mov	r3, r0
   817e4:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   817e8:	481c      	ldr	r0, [pc, #112]	; (8185c <UDD_Send+0x84>)
   817ea:	f103 044c 	add.w	r4, r3, #76	; 0x4c
   817ee:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   817f2:	f010 0f01 	tst.w	r0, #1
   817f6:	d0f7      	beq.n	817e8 <UDD_Send+0x10>
   817f8:	4c19      	ldr	r4, [pc, #100]	; (81860 <UDD_Send+0x88>)
   817fa:	b93b      	cbnz	r3, 8180c <UDD_Send+0x34>
   817fc:	6820      	ldr	r0, [r4, #0]
   817fe:	1828      	adds	r0, r5, r0
   81800:	2840      	cmp	r0, #64	; 0x40
   81802:	d906      	bls.n	81812 <UDD_Send+0x3a>
   81804:	6825      	ldr	r5, [r4, #0]
   81806:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
   8180a:	e002      	b.n	81812 <UDD_Send+0x3a>
   8180c:	2000      	movs	r0, #0
   8180e:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
   81812:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   81816:	1810      	adds	r0, r2, r0
   81818:	2200      	movs	r2, #0
   8181a:	e002      	b.n	81822 <UDD_Send+0x4a>
   8181c:	5c8e      	ldrb	r6, [r1, r2]
   8181e:	5486      	strb	r6, [r0, r2]
   81820:	3201      	adds	r2, #1
   81822:	42aa      	cmp	r2, r5
   81824:	d1fa      	bne.n	8181c <UDD_Send+0x44>
   81826:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   8182a:	18aa      	adds	r2, r5, r2
   8182c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   81830:	b933      	cbnz	r3, 81840 <UDD_Send+0x68>
   81832:	4b0b      	ldr	r3, [pc, #44]	; (81860 <UDD_Send+0x88>)
   81834:	681b      	ldr	r3, [r3, #0]
   81836:	2b40      	cmp	r3, #64	; 0x40
   81838:	d10d      	bne.n	81856 <UDD_Send+0x7e>
   8183a:	4b0a      	ldr	r3, [pc, #40]	; (81864 <UDD_Send+0x8c>)
   8183c:	4798      	blx	r3
   8183e:	e00a      	b.n	81856 <UDD_Send+0x7e>
   81840:	4a06      	ldr	r2, [pc, #24]	; (8185c <UDD_Send+0x84>)
   81842:	f103 0158 	add.w	r1, r3, #88	; 0x58
   81846:	2001      	movs	r0, #1
   81848:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   8184c:	3388      	adds	r3, #136	; 0x88
   8184e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   81852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   81856:	4628      	mov	r0, r5
   81858:	bd70      	pop	{r4, r5, r6, pc}
   8185a:	bf00      	nop
   8185c:	400ac000 	.word	0x400ac000
   81860:	200704c8 	.word	0x200704c8
   81864:	00081789 	.word	0x00081789

00081868 <UDD_Send8>:
   81868:	4b08      	ldr	r3, [pc, #32]	; (8188c <UDD_Send8+0x24>)
   8186a:	b510      	push	{r4, lr}
   8186c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   81870:	03c4      	lsls	r4, r0, #15
   81872:	18a2      	adds	r2, r4, r2
   81874:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   81878:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   8187c:	7011      	strb	r1, [r2, #0]
   8187e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   81882:	3201      	adds	r2, #1
   81884:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   81888:	bd10      	pop	{r4, pc}
   8188a:	bf00      	nop
   8188c:	200704c8 	.word	0x200704c8

00081890 <UDD_Recv8>:
   81890:	4a08      	ldr	r2, [pc, #32]	; (818b4 <UDD_Recv8+0x24>)
   81892:	4603      	mov	r3, r0
   81894:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   81898:	03c0      	lsls	r0, r0, #15
   8189a:	1841      	adds	r1, r0, r1
   8189c:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   818a0:	f501 11c0 	add.w	r1, r1, #1572864	; 0x180000
   818a4:	7808      	ldrb	r0, [r1, #0]
   818a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   818aa:	3101      	adds	r1, #1
   818ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   818b0:	4770      	bx	lr
   818b2:	bf00      	nop
   818b4:	200704a0 	.word	0x200704a0

000818b8 <UDD_Recv>:
   818b8:	b570      	push	{r4, r5, r6, lr}
   818ba:	4c0b      	ldr	r4, [pc, #44]	; (818e8 <UDD_Recv+0x30>)
   818bc:	03c3      	lsls	r3, r0, #15
   818be:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   818c2:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   818c6:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   818ca:	195d      	adds	r5, r3, r5
   818cc:	2300      	movs	r3, #0
   818ce:	e002      	b.n	818d6 <UDD_Recv+0x1e>
   818d0:	5cee      	ldrb	r6, [r5, r3]
   818d2:	54ce      	strb	r6, [r1, r3]
   818d4:	3301      	adds	r3, #1
   818d6:	4293      	cmp	r3, r2
   818d8:	d1fa      	bne.n	818d0 <UDD_Recv+0x18>
   818da:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
   818de:	189b      	adds	r3, r3, r2
   818e0:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
   818e4:	bd70      	pop	{r4, r5, r6, pc}
   818e6:	bf00      	nop
   818e8:	200704a0 	.word	0x200704a0

000818ec <UDD_Stall>:
   818ec:	4b03      	ldr	r3, [pc, #12]	; (818fc <UDD_Stall+0x10>)
   818ee:	2201      	movs	r2, #1
   818f0:	61da      	str	r2, [r3, #28]
   818f2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   818f6:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
   818fa:	4770      	bx	lr
   818fc:	400ac000 	.word	0x400ac000

00081900 <UDD_FifoByteCount>:
   81900:	4b04      	ldr	r3, [pc, #16]	; (81914 <UDD_FifoByteCount+0x14>)
   81902:	304c      	adds	r0, #76	; 0x4c
   81904:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   81908:	4803      	ldr	r0, [pc, #12]	; (81918 <UDD_FifoByteCount+0x18>)
   8190a:	ea03 0000 	and.w	r0, r3, r0
   8190e:	0d00      	lsrs	r0, r0, #20
   81910:	4770      	bx	lr
   81912:	bf00      	nop
   81914:	400ac000 	.word	0x400ac000
   81918:	7ff00000 	.word	0x7ff00000

0008191c <UDD_ReleaseRX>:
   8191c:	4b08      	ldr	r3, [pc, #32]	; (81940 <UDD_ReleaseRX+0x24>)
   8191e:	f100 0258 	add.w	r2, r0, #88	; 0x58
   81922:	2102      	movs	r1, #2
   81924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   81928:	f100 0288 	add.w	r2, r0, #136	; 0x88
   8192c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   81930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   81934:	4b03      	ldr	r3, [pc, #12]	; (81944 <UDD_ReleaseRX+0x28>)
   81936:	2200      	movs	r2, #0
   81938:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   8193c:	4770      	bx	lr
   8193e:	bf00      	nop
   81940:	400ac000 	.word	0x400ac000
   81944:	200704a0 	.word	0x200704a0

00081948 <UDD_ReleaseTX>:
   81948:	4b08      	ldr	r3, [pc, #32]	; (8196c <UDD_ReleaseTX+0x24>)
   8194a:	f100 0258 	add.w	r2, r0, #88	; 0x58
   8194e:	2101      	movs	r1, #1
   81950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   81954:	f100 0288 	add.w	r2, r0, #136	; 0x88
   81958:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8195c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   81960:	4b03      	ldr	r3, [pc, #12]	; (81970 <UDD_ReleaseTX+0x28>)
   81962:	2200      	movs	r2, #0
   81964:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   81968:	4770      	bx	lr
   8196a:	bf00      	nop
   8196c:	400ac000 	.word	0x400ac000
   81970:	200704c8 	.word	0x200704c8

00081974 <UDD_SetAddress>:
   81974:	4b06      	ldr	r3, [pc, #24]	; (81990 <UDD_SetAddress+0x1c>)
   81976:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8197a:	681a      	ldr	r2, [r3, #0]
   8197c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81980:	ea40 0202 	orr.w	r2, r0, r2
   81984:	601a      	str	r2, [r3, #0]
   81986:	681a      	ldr	r2, [r3, #0]
   81988:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8198c:	601a      	str	r2, [r3, #0]
   8198e:	4770      	bx	lr
   81990:	400ac000 	.word	0x400ac000

00081994 <UOTGHS_Handler>:
   81994:	b508      	push	{r3, lr}
   81996:	4b02      	ldr	r3, [pc, #8]	; (819a0 <UOTGHS_Handler+0xc>)
   81998:	681b      	ldr	r3, [r3, #0]
   8199a:	b103      	cbz	r3, 8199e <UOTGHS_Handler+0xa>
   8199c:	4798      	blx	r3
   8199e:	bd08      	pop	{r3, pc}
   819a0:	200704f0 	.word	0x200704f0

000819a4 <__libc_init_array>:
   819a4:	b570      	push	{r4, r5, r6, lr}
   819a6:	f242 76f4 	movw	r6, #10228	; 0x27f4
   819aa:	f242 75f4 	movw	r5, #10228	; 0x27f4
   819ae:	f2c0 0608 	movt	r6, #8
   819b2:	f2c0 0508 	movt	r5, #8
   819b6:	1b76      	subs	r6, r6, r5
   819b8:	10b6      	asrs	r6, r6, #2
   819ba:	d006      	beq.n	819ca <__libc_init_array+0x26>
   819bc:	2400      	movs	r4, #0
   819be:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   819c2:	3401      	adds	r4, #1
   819c4:	4798      	blx	r3
   819c6:	42a6      	cmp	r6, r4
   819c8:	d8f9      	bhi.n	819be <__libc_init_array+0x1a>
   819ca:	f242 75f4 	movw	r5, #10228	; 0x27f4
   819ce:	f642 0608 	movw	r6, #10248	; 0x2808
   819d2:	f2c0 0508 	movt	r5, #8
   819d6:	f2c0 0608 	movt	r6, #8
   819da:	1b76      	subs	r6, r6, r5
   819dc:	f000 ff04 	bl	827e8 <_init>
   819e0:	10b6      	asrs	r6, r6, #2
   819e2:	d006      	beq.n	819f2 <__libc_init_array+0x4e>
   819e4:	2400      	movs	r4, #0
   819e6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   819ea:	3401      	adds	r4, #1
   819ec:	4798      	blx	r3
   819ee:	42a6      	cmp	r6, r4
   819f0:	d8f9      	bhi.n	819e6 <__libc_init_array+0x42>
   819f2:	bd70      	pop	{r4, r5, r6, pc}

000819f4 <memset>:
   819f4:	2a03      	cmp	r2, #3
   819f6:	b2c9      	uxtb	r1, r1
   819f8:	b430      	push	{r4, r5}
   819fa:	d807      	bhi.n	81a0c <memset+0x18>
   819fc:	b122      	cbz	r2, 81a08 <memset+0x14>
   819fe:	2300      	movs	r3, #0
   81a00:	54c1      	strb	r1, [r0, r3]
   81a02:	3301      	adds	r3, #1
   81a04:	4293      	cmp	r3, r2
   81a06:	d1fb      	bne.n	81a00 <memset+0xc>
   81a08:	bc30      	pop	{r4, r5}
   81a0a:	4770      	bx	lr
   81a0c:	eb00 0c02 	add.w	ip, r0, r2
   81a10:	4603      	mov	r3, r0
   81a12:	e001      	b.n	81a18 <memset+0x24>
   81a14:	f803 1c01 	strb.w	r1, [r3, #-1]
   81a18:	f003 0403 	and.w	r4, r3, #3
   81a1c:	461a      	mov	r2, r3
   81a1e:	3301      	adds	r3, #1
   81a20:	2c00      	cmp	r4, #0
   81a22:	d1f7      	bne.n	81a14 <memset+0x20>
   81a24:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
   81a28:	ebc2 040c 	rsb	r4, r2, ip
   81a2c:	fb03 f301 	mul.w	r3, r3, r1
   81a30:	e01f      	b.n	81a72 <memset+0x7e>
   81a32:	f842 3c40 	str.w	r3, [r2, #-64]
   81a36:	f842 3c3c 	str.w	r3, [r2, #-60]
   81a3a:	f842 3c38 	str.w	r3, [r2, #-56]
   81a3e:	f842 3c34 	str.w	r3, [r2, #-52]
   81a42:	f842 3c30 	str.w	r3, [r2, #-48]
   81a46:	f842 3c2c 	str.w	r3, [r2, #-44]
   81a4a:	f842 3c28 	str.w	r3, [r2, #-40]
   81a4e:	f842 3c24 	str.w	r3, [r2, #-36]
   81a52:	f842 3c20 	str.w	r3, [r2, #-32]
   81a56:	f842 3c1c 	str.w	r3, [r2, #-28]
   81a5a:	f842 3c18 	str.w	r3, [r2, #-24]
   81a5e:	f842 3c14 	str.w	r3, [r2, #-20]
   81a62:	f842 3c10 	str.w	r3, [r2, #-16]
   81a66:	f842 3c0c 	str.w	r3, [r2, #-12]
   81a6a:	f842 3c08 	str.w	r3, [r2, #-8]
   81a6e:	f842 3c04 	str.w	r3, [r2, #-4]
   81a72:	4615      	mov	r5, r2
   81a74:	3240      	adds	r2, #64	; 0x40
   81a76:	2c3f      	cmp	r4, #63	; 0x3f
   81a78:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
   81a7c:	dcd9      	bgt.n	81a32 <memset+0x3e>
   81a7e:	462a      	mov	r2, r5
   81a80:	ebc5 040c 	rsb	r4, r5, ip
   81a84:	e007      	b.n	81a96 <memset+0xa2>
   81a86:	f842 3c10 	str.w	r3, [r2, #-16]
   81a8a:	f842 3c0c 	str.w	r3, [r2, #-12]
   81a8e:	f842 3c08 	str.w	r3, [r2, #-8]
   81a92:	f842 3c04 	str.w	r3, [r2, #-4]
   81a96:	4615      	mov	r5, r2
   81a98:	3210      	adds	r2, #16
   81a9a:	2c0f      	cmp	r4, #15
   81a9c:	f1a4 0410 	sub.w	r4, r4, #16
   81aa0:	dcf1      	bgt.n	81a86 <memset+0x92>
   81aa2:	462a      	mov	r2, r5
   81aa4:	ebc5 050c 	rsb	r5, r5, ip
   81aa8:	e001      	b.n	81aae <memset+0xba>
   81aaa:	f842 3c04 	str.w	r3, [r2, #-4]
   81aae:	4614      	mov	r4, r2
   81ab0:	3204      	adds	r2, #4
   81ab2:	2d03      	cmp	r5, #3
   81ab4:	f1a5 0504 	sub.w	r5, r5, #4
   81ab8:	dcf7      	bgt.n	81aaa <memset+0xb6>
   81aba:	e001      	b.n	81ac0 <memset+0xcc>
   81abc:	f804 1b01 	strb.w	r1, [r4], #1
   81ac0:	4564      	cmp	r4, ip
   81ac2:	d3fb      	bcc.n	81abc <memset+0xc8>
   81ac4:	e7a0      	b.n	81a08 <memset+0x14>
   81ac6:	bf00      	nop

00081ac8 <strlen>:
   81ac8:	f020 0103 	bic.w	r1, r0, #3
   81acc:	f010 0003 	ands.w	r0, r0, #3
   81ad0:	f1c0 0000 	rsb	r0, r0, #0
   81ad4:	f851 3b04 	ldr.w	r3, [r1], #4
   81ad8:	f100 0c04 	add.w	ip, r0, #4
   81adc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81ae0:	f06f 0200 	mvn.w	r2, #0
   81ae4:	bf1c      	itt	ne
   81ae6:	fa22 f20c 	lsrne.w	r2, r2, ip
   81aea:	4313      	orrne	r3, r2
   81aec:	f04f 0c01 	mov.w	ip, #1
   81af0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81af4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81af8:	eba3 020c 	sub.w	r2, r3, ip
   81afc:	ea22 0203 	bic.w	r2, r2, r3
   81b00:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81b04:	bf04      	itt	eq
   81b06:	f851 3b04 	ldreq.w	r3, [r1], #4
   81b0a:	3004      	addeq	r0, #4
   81b0c:	d0f4      	beq.n	81af8 <strlen+0x30>
   81b0e:	f013 0fff 	tst.w	r3, #255	; 0xff
   81b12:	bf1f      	itttt	ne
   81b14:	3001      	addne	r0, #1
   81b16:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   81b1a:	3001      	addne	r0, #1
   81b1c:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81b20:	bf18      	it	ne
   81b22:	3001      	addne	r0, #1
   81b24:	4770      	bx	lr
   81b26:	bf00      	nop

00081b28 <_ZTV9UARTClass>:
	...
   81b30:	0415 0008 0261 0008 03cd 0008 03ed 0008     ....a...........
   81b40:	03db 0008 0409 0008 03a5 0008 0000 0000     ................

00081b50 <USB_DeviceDescriptorA>:
   81b50:	0112 0200 0002 4000 2341 003e 0100 0201     .......@A#>.....
   81b60:	0100 0000                                   ....

00081b64 <USB_DeviceDescriptor>:
   81b64:	0112 0200 0000 4000 2341 003e 0100 0201     .......@A#>.....
   81b74:	0100 0000                                   ....

00081b78 <_ZL9EndPoints>:
   81b78:	2032 0000 3936 0000 3066 0000 3166 0000     2 ..69..f0..f1..
   81b88:	3936 0000                                   69..

00081b8c <STRING_LANGUAGE>:
   81b8c:	0304 0409                                   ....

00081b90 <_ZL18test_packet_buffer>:
	...
   81b98:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   81ba8:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   81bb8:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...

00081bc8 <STRING_PRODUCT>:
   81bc8:	7241 7564 6e69 206f 7544 0065               Arduino Due.

00081bd4 <STRING_MANUFACTURER>:
   81bd4:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

00081be0 <_ZL19USB_DeviceQualifier>:
   81be0:	060a 0200 0000 4000 0001 0000 0000 0000     .......@........
	...

00081bf8 <_ZTV9Keyboard_>:
	...
   81c00:	0c11 0008 0261 0008 0ced 0008 0c79 0008     ....a.......y...
   81c10:	0c61 0008 0000 0000                         a.......

00081c18 <_asciimap>:
	...
   81c20:	2b2a 0028 0000 0000 0000 0000 0000 0000     *+(.............
	...
   81c38:	9e2c a0b4 a2a1 34a4 a7a6 aea5 2d36 3837     ,......4....6-78
   81c48:	1e27 201f 2221 2423 2625 33b3 2eb6 b8b7     '.. !"#$%&.3....
   81c58:	849f 8685 8887 8a89 8c8b 8e8d 908f 9291     ................
   81c68:	9493 9695 9897 9a99 9c9b 2f9d 3031 ada3     .........../10..
   81c78:	0435 0605 0807 0a09 0c0b 0e0d 100f 1211     5...............
   81c88:	1413 1615 1817 1a19 1c1b af1d b0b1 00b5     ................

00081c98 <_hidInterface>:
   81c98:	0409 0002 0301 0000 0900 0121 0001 2201     ..........!...."
   81ca8:	0065 0507 0384 0040 0001 0000               e.....@.....

00081cb4 <_hidReportDescriptor>:
   81cb4:	0105 0209 01a1 0109 00a1 0185 0905 0119     ................
   81cc4:	0329 0015 0125 0395 0175 0281 0195 0575     )...%...u.....u.
   81cd4:	0381 0105 3009 3109 3809 8115 7f25 0875     .....0.1.8..%.u.
   81ce4:	0395 0681 c0c0 0105 0609 01a1 0285 0705     ................
   81cf4:	e019 e729 0015 0125 0175 0895 0281 0195     ..)...%.u.......
   81d04:	0875 0381 0695 0875 0015 6525 0705 0019     u.....u...%e....
   81d14:	6529 0081 00c0 0000                         )e......

00081d1c <g_APinDescription>:
   81d1c:	0e00 400e 0100 0000 000b 0000 0001 0000     ...@............
   81d2c:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   81d3c:	0200 0000 000b 0000 0001 0000 0000 0000     ................
   81d4c:	0004 0000 ffff ffff 1000 400e 0000 0200     ...........@....
   81d5c:	000c 0000 0002 0000 0000 0000 0014 0000     ................
   81d6c:	ffff 00ff 1200 400e 0000 1000 000d 0000     .......@........
   81d7c:	0002 0000 0000 0000 0014 0000 ffff 0eff     ................
   81d8c:	1200 400e 0000 0400 000d 0000 0002 0000     ...@............
   81d9c:	0000 0000 0014 0000 ffff 0dff 1200 400e     ...............@
   81dac:	0000 0200 000d 0000 0002 0000 0000 0000     ................
   81dbc:	0014 0000 ffff 0cff 1200 400e 0000 0100     ...........@....
   81dcc:	000d 0000 0002 0000 0000 0000 000c 0000     ................
   81ddc:	ffff ff07 1200 400e 0000 0080 000d 0000     .......@........
   81dec:	0002 0000 0000 0000 000c 0000 ffff ff06     ................
   81dfc:	1200 400e 0000 0040 000d 0000 0002 0000     ...@..@.........
   81e0c:	0000 0000 000c 0000 ffff ff05 1200 400e     ...............@
   81e1c:	0000 0020 000d 0000 0002 0000 0000 0000     .. .............
   81e2c:	000c 0000 ffff ff04 1200 400e 0000 2000     ...........@... 
   81e3c:	000d 0000 0002 0000 0000 0000 0014 0000     ................
   81e4c:	ffff 0fff 1400 400e 0080 0000 000e 0000     .......@........
   81e5c:	0002 0000 0000 0000 0014 0000 ffff 10ff     ................
   81e6c:	1400 400e 0100 0000 000e 0000 0002 0000     ...@............
   81e7c:	0000 0000 0014 0000 ffff 11ff 1000 400e     ...............@
   81e8c:	0000 0800 000c 0000 0002 0000 0000 0000     ................
   81e9c:	0014 0000 ffff 01ff 1400 400e 0010 0000     ...........@....
   81eac:	000e 0000 0002 0000 0000 0000 0004 0000     ................
   81ebc:	ffff ffff 1400 400e 0020 0000 000e 0000     .......@ .......
   81ecc:	0002 0000 0000 0000 0004 0000 ffff ffff     ................
   81edc:	0e00 400e 2000 0000 000b 0000 0001 0000     ...@. ..........
   81eec:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   81efc:	1000 0000 000b 0000 0001 0000 0000 0000     ................
   81f0c:	0004 0000 ffff ffff 0e00 400e 0800 0000     ...........@....
   81f1c:	000b 0000 0001 0000 0000 0000 0004 0000     ................
   81f2c:	ffff ffff 0e00 400e 0400 0000 000b 0000     .......@........
   81f3c:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   81f4c:	1000 400e 1000 0000 000c 0000 0001 0000     ...@............
   81f5c:	0000 0000 0004 0000 ffff ffff 1000 400e     ...............@
   81f6c:	2000 0000 000c 0000 0001 0000 0000 0000     . ..............
   81f7c:	0004 0000 ffff ffff 1000 400e 0000 0400     ...........@....
   81f8c:	000c 0000 0004 0000 0000 0000 0004 0000     ................
   81f9c:	ffff ffff 0e00 400e 4000 0000 000b 0000     .......@.@......
   81fac:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   81fbc:	0e00 400e 8000 0000 000b 0000 0004 0000     ...@............
   81fcc:	0000 0000 0004 0000 ffff ffff 1400 400e     ...............@
   81fdc:	0001 0000 000e 0000 0004 0000 0000 0000     ................
   81fec:	0004 0000 ffff ffff 1400 400e 0002 0000     ...........@....
   81ffc:	000e 0000 0004 0000 0000 0000 0004 0000     ................
   8200c:	ffff ffff 1400 400e 0004 0000 000e 0000     .......@........
   8201c:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   8202c:	1400 400e 0008 0000 000e 0000 0004 0000     ...@............
   8203c:	0000 0000 0004 0000 ffff ffff 1400 400e     ...............@
   8204c:	0040 0000 000e 0000 0004 0000 0000 0000     @...............
   8205c:	0004 0000 ffff ffff 1400 400e 0200 0000     ...........@....
   8206c:	000e 0000 0004 0000 0000 0000 0004 0000     ................
   8207c:	ffff ffff 0e00 400e 0080 0000 000b 0000     .......@........
   8208c:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   8209c:	1400 400e 0400 0000 000e 0000 0004 0000     ...@............
   820ac:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   820bc:	0002 0000 000d 0000 0004 0000 0000 0000     ................
   820cc:	0004 0000 ffff ffff 1200 400e 0004 0000     ...........@....
   820dc:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   820ec:	ffff ffff 1200 400e 0008 0000 000d 0000     .......@........
   820fc:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   8210c:	1200 400e 0010 0000 000d 0000 0004 0000     ...@............
   8211c:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   8212c:	0020 0000 000d 0000 0004 0000 0000 0000      ...............
   8213c:	0004 0000 ffff ffff 1200 400e 0040 0000     ...........@@...
   8214c:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   8215c:	ffff ffff 1200 400e 0080 0000 000d 0000     .......@........
   8216c:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   8217c:	1200 400e 0100 0000 000d 0000 0004 0000     ...@............
   8218c:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   8219c:	0200 0000 000d 0000 0004 0000 0000 0000     ................
   821ac:	0004 0000 ffff ffff 0e00 400e 0000 0008     ...........@....
   821bc:	000b 0000 0004 0000 0000 0000 0004 0000     ................
   821cc:	ffff ffff 0e00 400e 0000 0010 000b 0000     .......@........
   821dc:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   821ec:	1200 400e 0000 0008 000d 0000 0004 0000     ...@............
   821fc:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   8220c:	0000 0004 000d 0000 0004 0000 0000 0000     ................
   8221c:	0004 0000 ffff ffff 1200 400e 0000 0002     ...........@....
   8222c:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   8223c:	ffff ffff 1200 400e 0000 0001 000d 0000     .......@........
   8224c:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   8225c:	1200 400e 8000 0000 000d 0000 0004 0000     ...@............
   8226c:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   8227c:	4000 0000 000d 0000 0004 0000 0000 0000     .@..............
   8228c:	0004 0000 ffff ffff 1200 400e 2000 0000     ...........@. ..
   8229c:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   822ac:	ffff ffff 1200 400e 1000 0000 000d 0000     .......@........
   822bc:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   822cc:	1000 400e 0000 0020 000c 0000 0004 0000     ...@.. .........
   822dc:	0000 0000 0004 0000 ffff ffff 1000 400e     ...............@
   822ec:	4000 0000 000c 0000 0004 0000 0000 0000     .@..............
   822fc:	0004 0000 ffff ffff 0e00 400e 0000 0001     ...........@....
   8230c:	000b 0000 0003 0000 0000 0000 0002 0000     ................
   8231c:	0700 ffff 0e00 400e 0000 0100 000b 0000     .......@........
   8232c:	0003 0000 0000 0000 0002 0000 0601 ffff     ................
   8233c:	0e00 400e 0000 0080 000b 0000 0003 0000     ...@............
   8234c:	0000 0000 0002 0000 0502 ffff 0e00 400e     ...............@
   8235c:	0000 0040 000b 0000 0003 0000 0000 0000     ..@.............
   8236c:	0002 0000 0403 ffff 0e00 400e 0040 0000     ...........@@...
   8237c:	000b 0000 0003 0000 0000 0000 0002 0000     ................
   8238c:	0304 05ff 0e00 400e 0010 0000 000b 0000     .......@........
   8239c:	0003 0000 0000 0000 0002 0000 0205 ffff     ................
   823ac:	0e00 400e 0008 0000 000b 0000 0003 0000     ...@............
   823bc:	0000 0000 0002 0000 0106 03ff 0e00 400e     ...............@
   823cc:	0004 0000 000b 0000 0003 0000 0000 0000     ................
   823dc:	0002 0000 0007 02ff 1000 400e 0000 0002     ...........@....
   823ec:	000c 0000 0003 0000 0000 0000 0002 0000     ................
   823fc:	0a08 ffff 1000 400e 0000 0004 000c 0000     .......@........
   8240c:	0003 0000 0000 0000 0002 0000 0b09 ffff     ................
   8241c:	1000 400e 0000 0008 000c 0000 0003 0000     ...@............
   8242c:	0000 0000 0002 0000 0c0a ffff 1000 400e     ...............@
   8243c:	0000 0010 000c 0000 0003 0000 0000 0000     ................
   8244c:	0002 0000 0d0b ffff 1000 400e 8000 0000     ...........@....
   8245c:	000c 0000 0003 0000 0000 0000 0002 0000     ................
   8246c:	100c ffff 1000 400e 0000 0001 000c 0000     .......@........
   8247c:	0003 0000 0000 0000 0002 0000 110d ffff     ................
   8248c:	0e00 400e 0002 0000 000b 0000 0001 0000     ...@............
   8249c:	0000 0000 0004 0000 ff0e ffff 0e00 400e     ...............@
   824ac:	0001 0000 000b 0000 0001 0000 0000 0000     ................
   824bc:	0004 0000 ff0f ffff 0e00 400e 0000 0002     ...........@....
   824cc:	000b 0000 0001 0000 0000 0000 0004 0000     ................
   824dc:	ffff ffff 0e00 400e 0000 0004 000b 0000     .......@........
   824ec:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   824fc:	1200 400e 0000 4000 000d 0000 0004 0000     ...@...@........
   8250c:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   8251c:	0000 0020 000b 0000 0004 0000 0000 0000     .. .............
   8252c:	0004 0000 ffff ffff 0e00 400e 0000 0200     ...........@....
   8253c:	000b 0000 0001 0000 0000 0000 0004 0000     ................
   8254c:	ffff ffff 0e00 400e 0000 0400 000b 0000     .......@........
   8255c:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   8256c:	0e00 400e 0000 0800 000b 0000 0001 0000     ...@............
   8257c:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   8258c:	0000 1000 000b 0000 0001 0000 0000 0000     ................
   8259c:	0004 0000 ffff ffff 1000 400e 0000 0080     ...........@....
   825ac:	000c 0000 0002 0000 0000 0000 0004 0000     ................
   825bc:	ffff ffff 0e00 400e 0000 0006 000b 0000     .......@........
   825cc:	0001 0000 0000 0000 0005 0000 ffff ffff     ................
   825dc:	1000 400e 3000 0000 000c 0000 0001 0000     ...@.0..........
   825ec:	0000 0000 0005 0000 ffff ffff 0e00 400e     ...............@
   825fc:	0300 0000 000b 0000 0001 0000 0000 0000     ................
   8260c:	0005 0000 ffff ffff 0e00 400e 0c00 0000     ...........@....
   8261c:	000b 0000 0001 0000 0000 0000 0005 0000     ................
   8262c:	ffff ffff 0e00 400e 3000 0000 000b 0000     .......@.0......
   8263c:	0001 0000 0000 0000 0005 0000 ffff ffff     ................
   8264c:	1400 400e 0030 0000 000e 0000 0002 0000     ...@0...........
   8265c:	0000 0000 0005 0000 ffff ffff 1000 400e     ...............@
   8266c:	0c00 0000 000c 0000 0001 0000 0000 0000     ................
   8267c:	0004 0000 ffff ffff 1000 400e 0000 0020     ...........@.. .
   8268c:	000c 0000 0002 0000 0000 0000 0004 0000     ................
   8269c:	ffff ffff 0e00 400e 0000 2000 000b 0000     .......@... ....
   826ac:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   826bc:	1000 400e 8000 0000 000c 0000 0001 0000     ...@............
   826cc:	0000 0000 0004 0000 ffff ffff 1000 400e     ...............@
   826dc:	4000 0000 000c 0000 0001 0000 0000 0000     .@..............
   826ec:	0004 0000 ffff ffff 0000 0000 0000 0000     ................
	...
   8270c:	ffff ffff                                   ....

00082710 <_ZTV10USARTClass>:
	...
   82718:	1045 0008 0261 0008 0ffd 0008 101d 0008     E...a...........
   82728:	100b 0008 1039 0008 0fd5 0008 0000 0000     ....9...........

00082738 <_ZTV7Serial_>:
	...
   82740:	10b9 0008 10cd 0008 1081 0008 10fd 0008     ................
   82750:	1099 0008 10f5 0008 1141 0008 0000 0000     ........A.......

00082760 <_ZL18_cdcOtherInterface>:
   82760:	0b08 0200 0202 0001 0409 0000 0201 0002     ................
   82770:	0500 0024 0110 2405 0101 0401 0224 0506     ..$....$....$...
   82780:	0624 0100 0507 0381 0010 0910 0104 0200     $...............
   82790:	000a 0000 0507 0202 0040 0700 8305 4002     ........@......@
   827a0:	0000 0000                                   ....

000827a4 <_ZL13_cdcInterface>:
   827a4:	0b08 0200 0202 0001 0409 0000 0201 0002     ................
   827b4:	0500 0024 0110 2405 0101 0401 0224 0506     ..$....$....$...
   827c4:	0624 0100 0507 0381 0010 0910 0104 0200     $...............
   827d4:	000a 0000 0507 0202 0200 0700 8305 0002     ................
   827e4:	0002 0000                                   ....

000827e8 <_init>:
   827e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   827ea:	bf00      	nop
   827ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   827ee:	bc08      	pop	{r3}
   827f0:	469e      	mov	lr, r3
   827f2:	4770      	bx	lr

000827f4 <__init_array_start>:
   827f4:	00080109 	.word	0x00080109
   827f8:	00080ba9 	.word	0x00080ba9
   827fc:	00080dad 	.word	0x00080dad
   82800:	00080f15 	.word	0x00080f15
   82804:	00081235 	.word	0x00081235

00082808 <_fini>:
   82808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8280a:	bf00      	nop
   8280c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8280e:	bc08      	pop	{r3}
   82810:	469e      	mov	lr, r3
   82812:	4770      	bx	lr

00082814 <__fini_array_start>:
   82814:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <banzai>:
20070000:	b672      	cpsid	i
	__disable_irq();

	// Set bootflag to run SAM-BA bootloader at restart
	const int EEFC_FCMD_CGPB = 0x0C;
	const int EEFC_KEY = 0x5A;
	while (EFC0->EEFC_FSR & EEFC_FSR_FRDY == 0);
20070002:	4b07      	ldr	r3, [pc, #28]	; (20070020 <banzai+0x20>)
20070004:	689a      	ldr	r2, [r3, #8]
	EFC0->EEFC_FCR =
		EEFC_FCR_FCMD(EEFC_FCMD_CGPB) |
		EEFC_FCR_FARG(1) |
		EEFC_FCR_FKEY(EEFC_KEY);
20070006:	4a07      	ldr	r2, [pc, #28]	; (20070024 <banzai+0x24>)
20070008:	605a      	str	r2, [r3, #4]
	while (EFC0->EEFC_FSR & EEFC_FSR_FRDY == 0);
2007000a:	689b      	ldr	r3, [r3, #8]
2007000c:	2300      	movs	r3, #0

	// From here flash memory is no more available.

	// Memory swap needs some time to stabilize
	for (uint32_t i=0; i<1000000; i++)
2007000e:	4a06      	ldr	r2, [pc, #24]	; (20070028 <banzai+0x28>)
20070010:	3301      	adds	r3, #1
20070012:	4293      	cmp	r3, r2
20070014:	d1fb      	bne.n	2007000e <banzai+0xe>
	// BANZAIIIIIII!!!
	const int RSTC_KEY = 0xA5;
	RSTC->RSTC_CR =
		RSTC_CR_KEY(RSTC_KEY) |
		RSTC_CR_PROCRST |
		RSTC_CR_PERRST;
20070016:	4a05      	ldr	r2, [pc, #20]	; (2007002c <banzai+0x2c>)
20070018:	4b05      	ldr	r3, [pc, #20]	; (20070030 <banzai+0x30>)
2007001a:	601a      	str	r2, [r3, #0]
2007001c:	e7fe      	b.n	2007001c <banzai+0x1c>
2007001e:	bf00      	nop
20070020:	400e0a00 	.word	0x400e0a00
20070024:	5a00010c 	.word	0x5a00010c
20070028:	000f4240 	.word	0x000f4240
2007002c:	a5000005 	.word	0xa5000005
20070030:	400e1a00 	.word	0x400e1a00

20070034 <_readResolution>:
20070034:	0000000a                                ....

20070038 <_ZL5ticks>:
20070038:	ffffffff                                ....

2007003c <_hid_protocol>:
2007003c:	00000101                                         .

2007003d <_hid_idle>:
2007003d:	00000001                                         ...

20070040 <_ZL12_usbLineInfo>:
20070040:	0000e100 00080000                       ........

20070048 <SystemCoreClock>:
20070048:	003d0900                                ..=.

2007004c <g_interrupt_enabled>:
2007004c:	00000001                                ....
