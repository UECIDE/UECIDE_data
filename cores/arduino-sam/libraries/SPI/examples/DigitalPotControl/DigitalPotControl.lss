/home/matt/.uecide/compilers/pic32-gcc/bin/pic32-objdump -h -S /tmp/build-71f3bd7f-412d-4caf-b3ea-9bea8e7d4441/DigitalPotControl.elf 

/tmp/build-71f3bd7f-412d-4caf-b3ea-9bea8e7d4441/DigitalPotControl.elf:     file format elf32-tradlittlemips

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00000010  9d001000  9d001000  00011000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .image_ptr_table 00000008  9d0000f8  9d0000f8  000100f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .app_excpt    00000010  9d000180  9d000180  00010180  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .vector_0     00000014  9d000200  9d000200  00010200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .vector_1     00000014  9d000220  9d000220  00010220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .vector_2     00000014  9d000240  9d000240  00010240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .vector_3     00000014  9d000260  9d000260  00010260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .vector_4     00000014  9d000280  9d000280  00010280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .vector_5     00000014  9d0002a0  9d0002a0  000102a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .vector_6     00000014  9d0002c0  9d0002c0  000102c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .vector_7     00000014  9d0002e0  9d0002e0  000102e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .vector_8     00000014  9d000300  9d000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .vector_9     00000014  9d000320  9d000320  00010320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .vector_10    00000014  9d000340  9d000340  00010340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .vector_11    00000014  9d000360  9d000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .vector_12    00000014  9d000380  9d000380  00010380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .vector_13    00000014  9d0003a0  9d0003a0  000103a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .vector_14    00000014  9d0003c0  9d0003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .vector_15    00000014  9d0003e0  9d0003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .vector_16    00000014  9d000400  9d000400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .vector_17    00000014  9d000420  9d000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .vector_18    00000014  9d000440  9d000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .vector_19    00000014  9d000460  9d000460  00010460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .vector_20    00000014  9d000480  9d000480  00010480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .vector_21    00000014  9d0004a0  9d0004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .vector_22    00000014  9d0004c0  9d0004c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .vector_23    00000014  9d0004e0  9d0004e0  000104e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .vector_24    00000014  9d000500  9d000500  00010500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .vector_25    00000014  9d000520  9d000520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .vector_26    00000014  9d000540  9d000540  00010540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .vector_27    00000014  9d000560  9d000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .vector_28    00000014  9d000580  9d000580  00010580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .vector_29    00000014  9d0005a0  9d0005a0  000105a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .vector_30    00000014  9d0005c0  9d0005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .vector_31    00000014  9d0005e0  9d0005e0  000105e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .vector_32    00000014  9d000600  9d000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .vector_33    00000014  9d000620  9d000620  00010620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .vector_34    00000014  9d000640  9d000640  00010640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .vector_35    00000014  9d000660  9d000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .vector_36    00000014  9d000680  9d000680  00010680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .vector_37    00000014  9d0006a0  9d0006a0  000106a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .vector_38    00000014  9d0006c0  9d0006c0  000106c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .vector_39    00000014  9d0006e0  9d0006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .vector_40    00000014  9d000700  9d000700  00010700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .vector_41    00000014  9d000720  9d000720  00010720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .vector_42    00000014  9d000740  9d000740  00010740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .vector_43    00000014  9d000760  9d000760  00010760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .vector_44    00000014  9d000780  9d000780  00010780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .vector_45    00000014  9d0007a0  9d0007a0  000107a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .vector_46    00000014  9d0007c0  9d0007c0  000107c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .vector_47    00000014  9d0007e0  9d0007e0  000107e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .vector_48    00000014  9d000800  9d000800  00010800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .vector_49    00000014  9d000820  9d000820  00010820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .vector_50    00000014  9d000840  9d000840  00010840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .vector_51    00000014  9d000860  9d000860  00010860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .vector_52    00000014  9d000880  9d000880  00010880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .vector_53    00000014  9d0008a0  9d0008a0  000108a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .vector_54    00000014  9d0008c0  9d0008c0  000108c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .vector_55    00000014  9d0008e0  9d0008e0  000108e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .vector_56    00000014  9d000900  9d000900  00010900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .vector_57    00000014  9d000920  9d000920  00010920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .vector_58    00000014  9d000940  9d000940  00010940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .vector_59    00000014  9d000960  9d000960  00010960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .vector_60    00000014  9d000980  9d000980  00010980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .vector_61    00000014  9d0009a0  9d0009a0  000109a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .vector_62    00000014  9d0009c0  9d0009c0  000109c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .vector_63    00000014  9d0009e0  9d0009e0  000109e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 67 .startup      000001e0  9d001010  9d001010  00011010  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 68 .text         00000d68  9d0011f0  9d0011f0  000111f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .init         00000024  9d001f58  9d001f58  00011f58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .fini         0000001c  9d001f7c  9d001f7c  00011f7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .ctors        00000008  9d001f98  9d001f98  00011f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 72 .dtors        00000008  9d001fa0  9d001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 73 .header_info  0000004c  9d001fa8  9d001fa8  00011fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 74 .ram_exchange_data 00000008  a0000000  a0000000  00021800  2**0
                  CONTENTS
 75 .rodata       000001c4  9d001ff4  9d001ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 76 .data         000000cc  a0000008  9d0021b8  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 77 .sbss         00000024  a00000d4  9d002284  000200d4  2**2
                  ALLOC
 78 .bss          000000c0  a00000f8  9d002284  000200f8  2**2
                  ALLOC
 79 .heap         00000800  a00001b8  9d002284  000201b8  2**0
                  ALLOC
 80 .stack        00000800  a00009b8  9d002284  000209b8  2**0
                  ALLOC
 81 .comment      00000095  00000000  00000000  00021808  2**0
                  CONTENTS, READONLY
 82 .debug_aranges 000004a8  00000000  00000000  000218a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 83 .debug_pubnames 000006a2  00000000  00000000  00021d48  2**0
                  CONTENTS, READONLY, DEBUGGING
 84 .debug_info   00002c66  00000000  00000000  000223ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 85 .debug_abbrev 00000dc2  00000000  00000000  00025050  2**0
                  CONTENTS, READONLY, DEBUGGING
 86 .debug_line   00001666  00000000  00000000  00025e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 87 .debug_frame  0000051c  00000000  00000000  00027478  2**2
                  CONTENTS, READONLY, DEBUGGING
 88 .debug_str    00000e29  00000000  00000000  00027994  2**0
                  CONTENTS, READONLY, DEBUGGING
 89 .debug_loc    000011e9  00000000  00000000  000287bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 90 .debug_pubtypes 00000303  00000000  00000000  000299a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 91 .debug_ranges 00000488  00000000  00000000  00029cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 92 .gnu.attributes 00000010  00000000  00000000  0002a138  2**0
                  CONTENTS, READONLY
 93 .mdebug.abi32 00000000  a0001800  a0001800  00021800  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .reset:

9d001000 <_reset>:
9d001000:	3c1a9d00 	lui	k0,0x9d00
9d001004:	275a1010 	addiu	k0,k0,4112
9d001008:	03400008 	jr	k0
9d00100c:	00000000 	nop

Disassembly of section .app_excpt:

9d000180 <_gen_exception>:
9d000180:	3c1a9d00 	lui	k0,0x9d00
9d000184:	275a1e04 	addiu	k0,k0,7684
9d000188:	03400008 	jr	k0
9d00018c:	00000000 	nop

Disassembly of section .vector_0:

9d000200 <__vector_0>:
    lw       k0,4 * number (k0); \
    jr       k0; \
    .end VECTOR_SYMBOLNAME(number); \
    .size VECTOR_SYMBOLNAME(number), .-VECTOR_SYMBOLNAME(number);

 VECTOR_ENTRY(0)
9d000200:	3c1aa000 	lui	k0,0xa000
9d000204:	275a0020 	addiu	k0,k0,32
9d000208:	8f5a0000 	lw	k0,0(k0)
9d00020c:	03400008 	jr	k0
9d000210:	00000000 	nop

Disassembly of section .vector_1:

9d000220 <__vector_1>:
 VECTOR_ENTRY(1)
9d000220:	3c1aa000 	lui	k0,0xa000
9d000224:	275a0020 	addiu	k0,k0,32
9d000228:	8f5a0004 	lw	k0,4(k0)
9d00022c:	03400008 	jr	k0
9d000230:	00000000 	nop

Disassembly of section .vector_2:

9d000240 <__vector_2>:
 VECTOR_ENTRY(2)
9d000240:	3c1aa000 	lui	k0,0xa000
9d000244:	275a0020 	addiu	k0,k0,32
9d000248:	8f5a0008 	lw	k0,8(k0)
9d00024c:	03400008 	jr	k0
9d000250:	00000000 	nop

Disassembly of section .vector_3:

9d000260 <__vector_3>:
 VECTOR_ENTRY(3)
9d000260:	3c1aa000 	lui	k0,0xa000
9d000264:	275a0020 	addiu	k0,k0,32
9d000268:	8f5a000c 	lw	k0,12(k0)
9d00026c:	03400008 	jr	k0
9d000270:	00000000 	nop

Disassembly of section .vector_4:

9d000280 <__vector_4>:
 VECTOR_ENTRY(4)
9d000280:	3c1aa000 	lui	k0,0xa000
9d000284:	275a0020 	addiu	k0,k0,32
9d000288:	8f5a0010 	lw	k0,16(k0)
9d00028c:	03400008 	jr	k0
9d000290:	00000000 	nop

Disassembly of section .vector_5:

9d0002a0 <__vector_5>:
 VECTOR_ENTRY(5)
9d0002a0:	3c1aa000 	lui	k0,0xa000
9d0002a4:	275a0020 	addiu	k0,k0,32
9d0002a8:	8f5a0014 	lw	k0,20(k0)
9d0002ac:	03400008 	jr	k0
9d0002b0:	00000000 	nop

Disassembly of section .vector_6:

9d0002c0 <__vector_6>:
 VECTOR_ENTRY(6)
9d0002c0:	3c1aa000 	lui	k0,0xa000
9d0002c4:	275a0020 	addiu	k0,k0,32
9d0002c8:	8f5a0018 	lw	k0,24(k0)
9d0002cc:	03400008 	jr	k0
9d0002d0:	00000000 	nop

Disassembly of section .vector_7:

9d0002e0 <__vector_7>:
 VECTOR_ENTRY(7)
9d0002e0:	3c1aa000 	lui	k0,0xa000
9d0002e4:	275a0020 	addiu	k0,k0,32
9d0002e8:	8f5a001c 	lw	k0,28(k0)
9d0002ec:	03400008 	jr	k0
9d0002f0:	00000000 	nop

Disassembly of section .vector_8:

9d000300 <__vector_8>:
 VECTOR_ENTRY(8)
9d000300:	3c1aa000 	lui	k0,0xa000
9d000304:	275a0020 	addiu	k0,k0,32
9d000308:	8f5a0020 	lw	k0,32(k0)
9d00030c:	03400008 	jr	k0
9d000310:	00000000 	nop

Disassembly of section .vector_9:

9d000320 <__vector_9>:
 VECTOR_ENTRY(9)
9d000320:	3c1aa000 	lui	k0,0xa000
9d000324:	275a0020 	addiu	k0,k0,32
9d000328:	8f5a0024 	lw	k0,36(k0)
9d00032c:	03400008 	jr	k0
9d000330:	00000000 	nop

Disassembly of section .vector_10:

9d000340 <__vector_10>:
 VECTOR_ENTRY(10)
9d000340:	3c1aa000 	lui	k0,0xa000
9d000344:	275a0020 	addiu	k0,k0,32
9d000348:	8f5a0028 	lw	k0,40(k0)
9d00034c:	03400008 	jr	k0
9d000350:	00000000 	nop

Disassembly of section .vector_11:

9d000360 <__vector_11>:
 VECTOR_ENTRY(11)
9d000360:	3c1aa000 	lui	k0,0xa000
9d000364:	275a0020 	addiu	k0,k0,32
9d000368:	8f5a002c 	lw	k0,44(k0)
9d00036c:	03400008 	jr	k0
9d000370:	00000000 	nop

Disassembly of section .vector_12:

9d000380 <__vector_12>:
 VECTOR_ENTRY(12)
9d000380:	3c1aa000 	lui	k0,0xa000
9d000384:	275a0020 	addiu	k0,k0,32
9d000388:	8f5a0030 	lw	k0,48(k0)
9d00038c:	03400008 	jr	k0
9d000390:	00000000 	nop

Disassembly of section .vector_13:

9d0003a0 <__vector_13>:
 VECTOR_ENTRY(13)
9d0003a0:	3c1aa000 	lui	k0,0xa000
9d0003a4:	275a0020 	addiu	k0,k0,32
9d0003a8:	8f5a0034 	lw	k0,52(k0)
9d0003ac:	03400008 	jr	k0
9d0003b0:	00000000 	nop

Disassembly of section .vector_14:

9d0003c0 <__vector_14>:
 VECTOR_ENTRY(14)
9d0003c0:	3c1aa000 	lui	k0,0xa000
9d0003c4:	275a0020 	addiu	k0,k0,32
9d0003c8:	8f5a0038 	lw	k0,56(k0)
9d0003cc:	03400008 	jr	k0
9d0003d0:	00000000 	nop

Disassembly of section .vector_15:

9d0003e0 <__vector_15>:
 VECTOR_ENTRY(15)
9d0003e0:	3c1aa000 	lui	k0,0xa000
9d0003e4:	275a0020 	addiu	k0,k0,32
9d0003e8:	8f5a003c 	lw	k0,60(k0)
9d0003ec:	03400008 	jr	k0
9d0003f0:	00000000 	nop

Disassembly of section .vector_16:

9d000400 <__vector_16>:
 VECTOR_ENTRY(16)
9d000400:	3c1aa000 	lui	k0,0xa000
9d000404:	275a0020 	addiu	k0,k0,32
9d000408:	8f5a0040 	lw	k0,64(k0)
9d00040c:	03400008 	jr	k0
9d000410:	00000000 	nop

Disassembly of section .vector_17:

9d000420 <__vector_17>:
 VECTOR_ENTRY(17)
9d000420:	3c1aa000 	lui	k0,0xa000
9d000424:	275a0020 	addiu	k0,k0,32
9d000428:	8f5a0044 	lw	k0,68(k0)
9d00042c:	03400008 	jr	k0
9d000430:	00000000 	nop

Disassembly of section .vector_18:

9d000440 <__vector_18>:
 VECTOR_ENTRY(18)
9d000440:	3c1aa000 	lui	k0,0xa000
9d000444:	275a0020 	addiu	k0,k0,32
9d000448:	8f5a0048 	lw	k0,72(k0)
9d00044c:	03400008 	jr	k0
9d000450:	00000000 	nop

Disassembly of section .vector_19:

9d000460 <__vector_19>:
 VECTOR_ENTRY(19)
9d000460:	3c1aa000 	lui	k0,0xa000
9d000464:	275a0020 	addiu	k0,k0,32
9d000468:	8f5a004c 	lw	k0,76(k0)
9d00046c:	03400008 	jr	k0
9d000470:	00000000 	nop

Disassembly of section .vector_20:

9d000480 <__vector_20>:
 VECTOR_ENTRY(20)
9d000480:	3c1aa000 	lui	k0,0xa000
9d000484:	275a0020 	addiu	k0,k0,32
9d000488:	8f5a0050 	lw	k0,80(k0)
9d00048c:	03400008 	jr	k0
9d000490:	00000000 	nop

Disassembly of section .vector_21:

9d0004a0 <__vector_21>:
 VECTOR_ENTRY(21)
9d0004a0:	3c1aa000 	lui	k0,0xa000
9d0004a4:	275a0020 	addiu	k0,k0,32
9d0004a8:	8f5a0054 	lw	k0,84(k0)
9d0004ac:	03400008 	jr	k0
9d0004b0:	00000000 	nop

Disassembly of section .vector_22:

9d0004c0 <__vector_22>:
 VECTOR_ENTRY(22)
9d0004c0:	3c1aa000 	lui	k0,0xa000
9d0004c4:	275a0020 	addiu	k0,k0,32
9d0004c8:	8f5a0058 	lw	k0,88(k0)
9d0004cc:	03400008 	jr	k0
9d0004d0:	00000000 	nop

Disassembly of section .vector_23:

9d0004e0 <__vector_23>:
 VECTOR_ENTRY(23)
9d0004e0:	3c1aa000 	lui	k0,0xa000
9d0004e4:	275a0020 	addiu	k0,k0,32
9d0004e8:	8f5a005c 	lw	k0,92(k0)
9d0004ec:	03400008 	jr	k0
9d0004f0:	00000000 	nop

Disassembly of section .vector_24:

9d000500 <__vector_24>:
 VECTOR_ENTRY(24)
9d000500:	3c1aa000 	lui	k0,0xa000
9d000504:	275a0020 	addiu	k0,k0,32
9d000508:	8f5a0060 	lw	k0,96(k0)
9d00050c:	03400008 	jr	k0
9d000510:	00000000 	nop

Disassembly of section .vector_25:

9d000520 <__vector_25>:
 VECTOR_ENTRY(25)
9d000520:	3c1aa000 	lui	k0,0xa000
9d000524:	275a0020 	addiu	k0,k0,32
9d000528:	8f5a0064 	lw	k0,100(k0)
9d00052c:	03400008 	jr	k0
9d000530:	00000000 	nop

Disassembly of section .vector_26:

9d000540 <__vector_26>:
 VECTOR_ENTRY(26)
9d000540:	3c1aa000 	lui	k0,0xa000
9d000544:	275a0020 	addiu	k0,k0,32
9d000548:	8f5a0068 	lw	k0,104(k0)
9d00054c:	03400008 	jr	k0
9d000550:	00000000 	nop

Disassembly of section .vector_27:

9d000560 <__vector_27>:
 VECTOR_ENTRY(27)
9d000560:	3c1aa000 	lui	k0,0xa000
9d000564:	275a0020 	addiu	k0,k0,32
9d000568:	8f5a006c 	lw	k0,108(k0)
9d00056c:	03400008 	jr	k0
9d000570:	00000000 	nop

Disassembly of section .vector_28:

9d000580 <__vector_28>:
 VECTOR_ENTRY(28)
9d000580:	3c1aa000 	lui	k0,0xa000
9d000584:	275a0020 	addiu	k0,k0,32
9d000588:	8f5a0070 	lw	k0,112(k0)
9d00058c:	03400008 	jr	k0
9d000590:	00000000 	nop

Disassembly of section .vector_29:

9d0005a0 <__vector_29>:
 VECTOR_ENTRY(29)
9d0005a0:	3c1aa000 	lui	k0,0xa000
9d0005a4:	275a0020 	addiu	k0,k0,32
9d0005a8:	8f5a0074 	lw	k0,116(k0)
9d0005ac:	03400008 	jr	k0
9d0005b0:	00000000 	nop

Disassembly of section .vector_30:

9d0005c0 <__vector_30>:
 VECTOR_ENTRY(30)
9d0005c0:	3c1aa000 	lui	k0,0xa000
9d0005c4:	275a0020 	addiu	k0,k0,32
9d0005c8:	8f5a0078 	lw	k0,120(k0)
9d0005cc:	03400008 	jr	k0
9d0005d0:	00000000 	nop

Disassembly of section .vector_31:

9d0005e0 <__vector_31>:
 VECTOR_ENTRY(31)
9d0005e0:	3c1aa000 	lui	k0,0xa000
9d0005e4:	275a0020 	addiu	k0,k0,32
9d0005e8:	8f5a007c 	lw	k0,124(k0)
9d0005ec:	03400008 	jr	k0
9d0005f0:	00000000 	nop

Disassembly of section .vector_32:

9d000600 <__vector_32>:
 VECTOR_ENTRY(32)
9d000600:	3c1aa000 	lui	k0,0xa000
9d000604:	275a0020 	addiu	k0,k0,32
9d000608:	8f5a0080 	lw	k0,128(k0)
9d00060c:	03400008 	jr	k0
9d000610:	00000000 	nop

Disassembly of section .vector_33:

9d000620 <__vector_33>:
 VECTOR_ENTRY(33)
9d000620:	3c1aa000 	lui	k0,0xa000
9d000624:	275a0020 	addiu	k0,k0,32
9d000628:	8f5a0084 	lw	k0,132(k0)
9d00062c:	03400008 	jr	k0
9d000630:	00000000 	nop

Disassembly of section .vector_34:

9d000640 <__vector_34>:
 VECTOR_ENTRY(34)
9d000640:	3c1aa000 	lui	k0,0xa000
9d000644:	275a0020 	addiu	k0,k0,32
9d000648:	8f5a0088 	lw	k0,136(k0)
9d00064c:	03400008 	jr	k0
9d000650:	00000000 	nop

Disassembly of section .vector_35:

9d000660 <__vector_35>:
 VECTOR_ENTRY(35)
9d000660:	3c1aa000 	lui	k0,0xa000
9d000664:	275a0020 	addiu	k0,k0,32
9d000668:	8f5a008c 	lw	k0,140(k0)
9d00066c:	03400008 	jr	k0
9d000670:	00000000 	nop

Disassembly of section .vector_36:

9d000680 <__vector_36>:
 VECTOR_ENTRY(36)
9d000680:	3c1aa000 	lui	k0,0xa000
9d000684:	275a0020 	addiu	k0,k0,32
9d000688:	8f5a0090 	lw	k0,144(k0)
9d00068c:	03400008 	jr	k0
9d000690:	00000000 	nop

Disassembly of section .vector_37:

9d0006a0 <__vector_37>:
 VECTOR_ENTRY(37)
9d0006a0:	3c1aa000 	lui	k0,0xa000
9d0006a4:	275a0020 	addiu	k0,k0,32
9d0006a8:	8f5a0094 	lw	k0,148(k0)
9d0006ac:	03400008 	jr	k0
9d0006b0:	00000000 	nop

Disassembly of section .vector_38:

9d0006c0 <__vector_38>:
 VECTOR_ENTRY(38)
9d0006c0:	3c1aa000 	lui	k0,0xa000
9d0006c4:	275a0020 	addiu	k0,k0,32
9d0006c8:	8f5a0098 	lw	k0,152(k0)
9d0006cc:	03400008 	jr	k0
9d0006d0:	00000000 	nop

Disassembly of section .vector_39:

9d0006e0 <__vector_39>:
 VECTOR_ENTRY(39)
9d0006e0:	3c1aa000 	lui	k0,0xa000
9d0006e4:	275a0020 	addiu	k0,k0,32
9d0006e8:	8f5a009c 	lw	k0,156(k0)
9d0006ec:	03400008 	jr	k0
9d0006f0:	00000000 	nop

Disassembly of section .vector_40:

9d000700 <__vector_40>:
 VECTOR_ENTRY(40)
9d000700:	3c1aa000 	lui	k0,0xa000
9d000704:	275a0020 	addiu	k0,k0,32
9d000708:	8f5a00a0 	lw	k0,160(k0)
9d00070c:	03400008 	jr	k0
9d000710:	00000000 	nop

Disassembly of section .vector_41:

9d000720 <__vector_41>:
 VECTOR_ENTRY(41)
9d000720:	3c1aa000 	lui	k0,0xa000
9d000724:	275a0020 	addiu	k0,k0,32
9d000728:	8f5a00a4 	lw	k0,164(k0)
9d00072c:	03400008 	jr	k0
9d000730:	00000000 	nop

Disassembly of section .vector_42:

9d000740 <__vector_42>:
 VECTOR_ENTRY(42)
9d000740:	3c1aa000 	lui	k0,0xa000
9d000744:	275a0020 	addiu	k0,k0,32
9d000748:	8f5a00a8 	lw	k0,168(k0)
9d00074c:	03400008 	jr	k0
9d000750:	00000000 	nop

Disassembly of section .vector_43:

9d000760 <__vector_43>:
 VECTOR_ENTRY(43)
9d000760:	3c1aa000 	lui	k0,0xa000
9d000764:	275a0020 	addiu	k0,k0,32
9d000768:	8f5a00ac 	lw	k0,172(k0)
9d00076c:	03400008 	jr	k0
9d000770:	00000000 	nop

Disassembly of section .vector_44:

9d000780 <__vector_44>:
 VECTOR_ENTRY(44)
9d000780:	3c1aa000 	lui	k0,0xa000
9d000784:	275a0020 	addiu	k0,k0,32
9d000788:	8f5a00b0 	lw	k0,176(k0)
9d00078c:	03400008 	jr	k0
9d000790:	00000000 	nop

Disassembly of section .vector_45:

9d0007a0 <__vector_45>:
 VECTOR_ENTRY(45)
9d0007a0:	3c1aa000 	lui	k0,0xa000
9d0007a4:	275a0020 	addiu	k0,k0,32
9d0007a8:	8f5a00b4 	lw	k0,180(k0)
9d0007ac:	03400008 	jr	k0
9d0007b0:	00000000 	nop

Disassembly of section .vector_46:

9d0007c0 <__vector_46>:
 VECTOR_ENTRY(46)
9d0007c0:	3c1aa000 	lui	k0,0xa000
9d0007c4:	275a0020 	addiu	k0,k0,32
9d0007c8:	8f5a00b8 	lw	k0,184(k0)
9d0007cc:	03400008 	jr	k0
9d0007d0:	00000000 	nop

Disassembly of section .vector_47:

9d0007e0 <__vector_47>:
 VECTOR_ENTRY(47)
9d0007e0:	3c1aa000 	lui	k0,0xa000
9d0007e4:	275a0020 	addiu	k0,k0,32
9d0007e8:	8f5a00bc 	lw	k0,188(k0)
9d0007ec:	03400008 	jr	k0
9d0007f0:	00000000 	nop

Disassembly of section .vector_48:

9d000800 <__vector_48>:
 VECTOR_ENTRY(48)
9d000800:	3c1aa000 	lui	k0,0xa000
9d000804:	275a0020 	addiu	k0,k0,32
9d000808:	8f5a00c0 	lw	k0,192(k0)
9d00080c:	03400008 	jr	k0
9d000810:	00000000 	nop

Disassembly of section .vector_49:

9d000820 <__vector_49>:
 VECTOR_ENTRY(49)
9d000820:	3c1aa000 	lui	k0,0xa000
9d000824:	275a0020 	addiu	k0,k0,32
9d000828:	8f5a00c4 	lw	k0,196(k0)
9d00082c:	03400008 	jr	k0
9d000830:	00000000 	nop

Disassembly of section .vector_50:

9d000840 <__vector_50>:
 VECTOR_ENTRY(50)
9d000840:	3c1aa000 	lui	k0,0xa000
9d000844:	275a0020 	addiu	k0,k0,32
9d000848:	8f5a00c8 	lw	k0,200(k0)
9d00084c:	03400008 	jr	k0
9d000850:	00000000 	nop

Disassembly of section .vector_51:

9d000860 <__vector_51>:
 VECTOR_ENTRY(51)
9d000860:	3c1aa000 	lui	k0,0xa000
9d000864:	275a0020 	addiu	k0,k0,32
9d000868:	8f5a00cc 	lw	k0,204(k0)
9d00086c:	03400008 	jr	k0
9d000870:	00000000 	nop

Disassembly of section .vector_52:

9d000880 <__vector_52>:
 VECTOR_ENTRY(52)
9d000880:	3c1aa000 	lui	k0,0xa000
9d000884:	275a0020 	addiu	k0,k0,32
9d000888:	8f5a00d0 	lw	k0,208(k0)
9d00088c:	03400008 	jr	k0
9d000890:	00000000 	nop

Disassembly of section .vector_53:

9d0008a0 <__vector_53>:
 VECTOR_ENTRY(53)
9d0008a0:	3c1aa000 	lui	k0,0xa000
9d0008a4:	275a0020 	addiu	k0,k0,32
9d0008a8:	8f5a00d4 	lw	k0,212(k0)
9d0008ac:	03400008 	jr	k0
9d0008b0:	00000000 	nop

Disassembly of section .vector_54:

9d0008c0 <__vector_54>:
 VECTOR_ENTRY(54)
9d0008c0:	3c1aa000 	lui	k0,0xa000
9d0008c4:	275a0020 	addiu	k0,k0,32
9d0008c8:	8f5a00d8 	lw	k0,216(k0)
9d0008cc:	03400008 	jr	k0
9d0008d0:	00000000 	nop

Disassembly of section .vector_55:

9d0008e0 <__vector_55>:
 VECTOR_ENTRY(55)
9d0008e0:	3c1aa000 	lui	k0,0xa000
9d0008e4:	275a0020 	addiu	k0,k0,32
9d0008e8:	8f5a00dc 	lw	k0,220(k0)
9d0008ec:	03400008 	jr	k0
9d0008f0:	00000000 	nop

Disassembly of section .vector_56:

9d000900 <__vector_56>:
 VECTOR_ENTRY(56)
9d000900:	3c1aa000 	lui	k0,0xa000
9d000904:	275a0020 	addiu	k0,k0,32
9d000908:	8f5a00e0 	lw	k0,224(k0)
9d00090c:	03400008 	jr	k0
9d000910:	00000000 	nop

Disassembly of section .vector_57:

9d000920 <__vector_57>:
 VECTOR_ENTRY(57)
9d000920:	3c1aa000 	lui	k0,0xa000
9d000924:	275a0020 	addiu	k0,k0,32
9d000928:	8f5a00e4 	lw	k0,228(k0)
9d00092c:	03400008 	jr	k0
9d000930:	00000000 	nop

Disassembly of section .vector_58:

9d000940 <__vector_58>:
 VECTOR_ENTRY(58)
9d000940:	3c1aa000 	lui	k0,0xa000
9d000944:	275a0020 	addiu	k0,k0,32
9d000948:	8f5a00e8 	lw	k0,232(k0)
9d00094c:	03400008 	jr	k0
9d000950:	00000000 	nop

Disassembly of section .vector_59:

9d000960 <__vector_59>:
 VECTOR_ENTRY(59)
9d000960:	3c1aa000 	lui	k0,0xa000
9d000964:	275a0020 	addiu	k0,k0,32
9d000968:	8f5a00ec 	lw	k0,236(k0)
9d00096c:	03400008 	jr	k0
9d000970:	00000000 	nop

Disassembly of section .vector_60:

9d000980 <__vector_60>:
 VECTOR_ENTRY(60)
9d000980:	3c1aa000 	lui	k0,0xa000
9d000984:	275a0020 	addiu	k0,k0,32
9d000988:	8f5a00f0 	lw	k0,240(k0)
9d00098c:	03400008 	jr	k0
9d000990:	00000000 	nop

Disassembly of section .vector_61:

9d0009a0 <__vector_61>:
 VECTOR_ENTRY(61)
9d0009a0:	3c1aa000 	lui	k0,0xa000
9d0009a4:	275a0020 	addiu	k0,k0,32
9d0009a8:	8f5a00f4 	lw	k0,244(k0)
9d0009ac:	03400008 	jr	k0
9d0009b0:	00000000 	nop

Disassembly of section .vector_62:

9d0009c0 <__vector_62>:
 VECTOR_ENTRY(62)
9d0009c0:	3c1aa000 	lui	k0,0xa000
9d0009c4:	275a0020 	addiu	k0,k0,32
9d0009c8:	8f5a00f8 	lw	k0,248(k0)
9d0009cc:	03400008 	jr	k0
9d0009d0:	00000000 	nop

Disassembly of section .vector_63:

9d0009e0 <__vector_63>:
 VECTOR_ENTRY(63)
9d0009e0:	3c1aa000 	lui	k0,0xa000
9d0009e4:	275a0020 	addiu	k0,k0,32
9d0009e8:	8f5a00fc 	lw	k0,252(k0)
9d0009ec:	03400008 	jr	k0
9d0009f0:	00000000 	nop

Disassembly of section .startup:

9d001010 <_startup>:
9d001010:	401a6000 	mfc0	k0,c0_status
9d001014:	7f5a04c0 	ext	k0,k0,0x13,0x1
9d001018:	13400005 	beqz	k0,9d001030 <_no_nmi>
9d00101c:	00000000 	nop
9d001020:	3c1a9d00 	lui	k0,0x9d00
9d001024:	275a1eec 	addiu	k0,k0,7916
9d001028:	03400008 	jr	k0
9d00102c:	00000000 	nop

9d001030 <_no_nmi>:
9d001030:	3c1da000 	lui	sp,0xa000
9d001034:	27bd4000 	addiu	sp,sp,16384
9d001038:	3c1ca001 	lui	gp,0xa001
9d00103c:	279c80d0 	addiu	gp,gp,-32560
9d001040:	40096002 	mfc0	t1,c0_srsctl
9d001044:	01205820 	add	t3,t1,zero
9d001048:	7d2a1e80 	ext	t2,t1,0x1a,0x4
9d00104c:	7d494984 	ins	t1,t2,0x6,0x4
9d001050:	40896002 	mtc0	t1,c0_srsctl
9d001054:	41dce000 	wrpgpr	gp,gp
9d001058:	408b6002 	mtc0	t3,c0_srsctl
9d00105c:	3c089d00 	lui	t0,0x9d00
9d001060:	25081edc 	addiu	t0,t0,7900
9d001064:	0100f809 	jalr	t0
9d001068:	00000000 	nop
9d00106c:	3c08a000 	lui	t0,0xa000
9d001070:	250800d4 	addiu	t0,t0,212
9d001074:	3c09a000 	lui	t1,0xa000
9d001078:	252901b8 	addiu	t1,t1,440
9d00107c:	10000006 	b	9d001098 <_bss_check>
9d001080:	00000000 	nop

9d001084 <_bss_init>:
9d001084:	ad000000 	sw	zero,0(t0)
9d001088:	ad000004 	sw	zero,4(t0)
9d00108c:	ad000008 	sw	zero,8(t0)
9d001090:	ad00000c 	sw	zero,12(t0)
9d001094:	25080010 	addiu	t0,t0,16

9d001098 <_bss_check>:
9d001098:	0109082b 	sltu	at,t0,t1
9d00109c:	1420fff9 	bnez	at,9d001084 <_bss_init>
9d0010a0:	00000000 	nop
9d0010a4:	3c089d00 	lui	t0,0x9d00
9d0010a8:	250821b8 	addiu	t0,t0,8632
9d0010ac:	3c09a000 	lui	t1,0xa000
9d0010b0:	25290008 	addiu	t1,t1,8
9d0010b4:	3c0aa000 	lui	t2,0xa000
9d0010b8:	254a00d4 	addiu	t2,t2,212
9d0010bc:	10000005 	b	9d0010d4 <_init_check>
9d0010c0:	00000000 	nop

9d0010c4 <_init_data>:
9d0010c4:	8d0b0000 	lw	t3,0(t0)
9d0010c8:	ad2b0000 	sw	t3,0(t1)
9d0010cc:	25080004 	addiu	t0,t0,4
9d0010d0:	25290004 	addiu	t1,t1,4

9d0010d4 <_init_check>:
9d0010d4:	012a082b 	sltu	at,t1,t2
9d0010d8:	1420fffa 	bnez	at,9d0010c4 <_init_data>
9d0010dc:	00000000 	nop
9d0010e0:	3c090000 	lui	t1,0x0
9d0010e4:	25290000 	addiu	t1,t1,0
9d0010e8:	1120001d 	beqz	t1,9d001160 <_ramfunc_done>
9d0010ec:	00000000 	nop
9d0010f0:	3c089d00 	lui	t0,0x9d00
9d0010f4:	25082284 	addiu	t0,t0,8836
9d0010f8:	3c09a000 	lui	t1,0xa000
9d0010fc:	25291800 	addiu	t1,t1,6144
9d001100:	3c0aa000 	lui	t2,0xa000
9d001104:	254a1800 	addiu	t2,t2,6144

9d001108 <_init_ramfunc>:
9d001108:	8d0b0000 	lw	t3,0(t0)
9d00110c:	ad2b0000 	sw	t3,0(t1)
9d001110:	25080004 	addiu	t0,t0,4
9d001114:	25290004 	addiu	t1,t1,4

9d001118 <_ramfunc_check>:
9d001118:	012a082b 	sltu	at,t1,t2
9d00111c:	1420fffa 	bnez	at,9d001108 <_init_ramfunc>
9d001120:	00000000 	nop
9d001124:	3c090000 	lui	t1,0x0
9d001128:	25291800 	addiu	t1,t1,6144
9d00112c:	3c0abf88 	lui	t2,0xbf88
9d001130:	254a2010 	addiu	t2,t2,8208
9d001134:	ad490000 	sw	t1,0(t2)
9d001138:	3c090000 	lui	t1,0x0
9d00113c:	25294000 	addiu	t1,t1,16384
9d001140:	3c0abf88 	lui	t2,0xbf88
9d001144:	254a2020 	addiu	t2,t2,8224
9d001148:	ad490000 	sw	t1,0(t2)
9d00114c:	3c090000 	lui	t1,0x0
9d001150:	25294000 	addiu	t1,t1,16384
9d001154:	3c0abf88 	lui	t2,0xbf88
9d001158:	254a2030 	addiu	t2,t2,8240
9d00115c:	ad490000 	sw	t1,0(t2)

9d001160 <_ramfunc_done>:
9d001160:	40804800 	mtc0	zero,c0_count
9d001164:	240affff 	li	t2,-1
9d001168:	408a5800 	mtc0	t2,c0_compare
9d00116c:	3c099d00 	lui	t1,0x9d00
9d001170:	25290000 	addiu	t1,t1,0
9d001174:	40897801 	mtc0	t1,c0_ebase
9d001178:	3c090000 	lui	t1,0x0
9d00117c:	25290001 	addiu	t1,t1,1
9d001180:	240a0000 	li	t2,0
9d001184:	7d2a4944 	ins	t2,t1,0x5,0x5
9d001188:	408a6001 	mtc0	t2,c0_intctl
9d00118c:	3c090080 	lui	t1,0x80
9d001190:	40896800 	mtc0	t1,c0_cause
9d001194:	40088000 	mfc0	t0,c0_config
9d001198:	7d090580 	ext	t1,t0,0x16,0x1
9d00119c:	00094c40 	sll	t1,t1,0x11
9d0011a0:	40086000 	mfc0	t0,c0_status
9d0011a4:	3c010058 	lui	at,0x58
9d0011a8:	01014024 	and	t0,t0,at
9d0011ac:	01284025 	or	t0,t1,t0
9d0011b0:	40886000 	mtc0	t0,c0_status
9d0011b4:	3c089d00 	lui	t0,0x9d00
9d0011b8:	25081ee4 	addiu	t0,t0,7908
9d0011bc:	0100f809 	jalr	t0
9d0011c0:	00000000 	nop
9d0011c4:	40086000 	mfc0	t0,c0_status
9d0011c8:	3c01ffbf 	lui	at,0xffbf
9d0011cc:	3421ffff 	ori	at,at,0xffff
9d0011d0:	01014024 	and	t0,t0,at
9d0011d4:	40886000 	mtc0	t0,c0_status
9d0011d8:	30840000 	andi	a0,a0,0x0
9d0011dc:	30a50000 	andi	a1,a1,0x0
9d0011e0:	3c089d00 	lui	t0,0x9d00
9d0011e4:	250811f0 	addiu	t0,t0,4592
9d0011e8:	01000008 	jr	t0
9d0011ec:	00000000 	nop

Disassembly of section .text:

9d0011f0 <_main_entry>:
9d0011f0:	0f4007d6 	jal	9d001f58 <_text_end>
9d0011f4:	00000000 	nop
9d0011f8:	30840000 	andi	a0,a0,0x0
9d0011fc:	30a50000 	andi	a1,a1,0x0
9d001200:	0f400775 	jal	9d001dd4 <main>
9d001204:	00000000 	nop
9d001208:	1000fffd 	b	9d001200 <_main_entry+0x10>
9d00120c:	00000000 	nop

9d001210 <__do_global_dtors_aux>:
9d001210:	27bdffd8 	addiu	sp,sp,-40
9d001214:	afb2001c 	sw	s2,28(sp)
9d001218:	3c12a000 	lui	s2,0xa000
9d00121c:	924200f8 	lbu	v0,248(s2)
9d001220:	afbf0024 	sw	ra,36(sp)
9d001224:	afb30020 	sw	s3,32(sp)
9d001228:	afb10018 	sw	s1,24(sp)
9d00122c:	14400020 	bnez	v0,9d0012b0 <__do_global_dtors_aux+0xa0>
9d001230:	afb00014 	sw	s0,20(sp)
9d001234:	3c119d00 	lui	s1,0x9d00
9d001238:	3c109d00 	lui	s0,0x9d00
9d00123c:	3c13a000 	lui	s3,0xa000
9d001240:	26311fa0 	addiu	s1,s1,8096
9d001244:	26101fa4 	addiu	s0,s0,8100
9d001248:	8e6200fc 	lw	v0,252(s3)
9d00124c:	02118023 	subu	s0,s0,s1
9d001250:	00108083 	sra	s0,s0,0x2
9d001254:	2610ffff 	addiu	s0,s0,-1
9d001258:	0050182b 	sltu	v1,v0,s0
9d00125c:	5060000c 	beqzl	v1,9d001290 <__do_global_dtors_aux+0x80>
9d001260:	3c020000 	lui	v0,0x0
9d001264:	24420001 	addiu	v0,v0,1
9d001268:	00021880 	sll	v1,v0,0x2
9d00126c:	02231821 	addu	v1,s1,v1
9d001270:	8c630000 	lw	v1,0(v1)
9d001274:	0060f809 	jalr	v1
9d001278:	ae6200fc 	sw	v0,252(s3)
9d00127c:	8e6200fc 	lw	v0,252(s3)
9d001280:	0050182b 	sltu	v1,v0,s0
9d001284:	1460fff8 	bnez	v1,9d001268 <__do_global_dtors_aux+0x58>
9d001288:	24420001 	addiu	v0,v0,1
9d00128c:	3c020000 	lui	v0,0x0
9d001290:	24420000 	addiu	v0,v0,0
9d001294:	10400005 	beqz	v0,9d0012ac <__do_global_dtors_aux+0x9c>
9d001298:	24020001 	li	v0,1
9d00129c:	3c04a000 	lui	a0,0xa000
9d0012a0:	0c000000 	jal	90000000 <_imageExecutionJumpToFirstInFlash+0x8e000000>
9d0012a4:	24840008 	addiu	a0,a0,8
9d0012a8:	24020001 	li	v0,1
9d0012ac:	a24200f8 	sb	v0,248(s2)
9d0012b0:	8fbf0024 	lw	ra,36(sp)
9d0012b4:	8fb30020 	lw	s3,32(sp)
9d0012b8:	8fb2001c 	lw	s2,28(sp)
9d0012bc:	8fb10018 	lw	s1,24(sp)
9d0012c0:	8fb00014 	lw	s0,20(sp)
9d0012c4:	03e00008 	jr	ra
9d0012c8:	27bd0028 	addiu	sp,sp,40

9d0012cc <frame_dummy>:
9d0012cc:	3c020000 	lui	v0,0x0
9d0012d0:	27bdffe8 	addiu	sp,sp,-24
9d0012d4:	24420000 	addiu	v0,v0,0
9d0012d8:	10400006 	beqz	v0,9d0012f4 <frame_dummy+0x28>
9d0012dc:	afbf0014 	sw	ra,20(sp)
9d0012e0:	3c04a000 	lui	a0,0xa000
9d0012e4:	3c05a000 	lui	a1,0xa000
9d0012e8:	24840008 	addiu	a0,a0,8
9d0012ec:	0c000000 	jal	90000000 <_imageExecutionJumpToFirstInFlash+0x8e000000>
9d0012f0:	24a50100 	addiu	a1,a1,256
9d0012f4:	3c04a000 	lui	a0,0xa000
9d0012f8:	8c820008 	lw	v0,8(a0)
9d0012fc:	10400007 	beqz	v0,9d00131c <frame_dummy+0x50>
9d001300:	3c190000 	lui	t9,0x0
9d001304:	27390000 	addiu	t9,t9,0
9d001308:	13200004 	beqz	t9,9d00131c <frame_dummy+0x50>
9d00130c:	8fbf0014 	lw	ra,20(sp)
9d001310:	24840008 	addiu	a0,a0,8
9d001314:	03200008 	jr	t9
9d001318:	27bd0018 	addiu	sp,sp,24
9d00131c:	8fbf0014 	lw	ra,20(sp)
9d001320:	03e00008 	jr	ra
9d001324:	27bd0018 	addiu	sp,sp,24

9d001328 <setup>:
9d001328:	2404000d 	li	a0,13
9d00132c:	0b4005c4 	j	9d001710 <pinMode>
9d001330:	24050001 	li	a1,1

9d001334 <loop>:
9d001334:	27bdffe8 	addiu	sp,sp,-24
9d001338:	24050001 	li	a1,1
9d00133c:	afbf0014 	sw	ra,20(sp)
9d001340:	0f40062a 	jal	9d0018a8 <digitalWrite>
9d001344:	2404000d 	li	a0,13
9d001348:	0f400582 	jal	9d001608 <delay>
9d00134c:	24040064 	li	a0,100
9d001350:	2404000d 	li	a0,13
9d001354:	0f40062a 	jal	9d0018a8 <digitalWrite>
9d001358:	00002821 	move	a1,zero
9d00135c:	8fbf0014 	lw	ra,20(sp)
9d001360:	24040064 	li	a0,100
9d001364:	0b400582 	j	9d001608 <delay>
9d001368:	27bd0018 	addiu	sp,sp,24

9d00136c <millisecondCoreTimerService>:
*/
uint32_t millisecondCoreTimerService(uint32_t curTime)
{
    static nextInt = 0;
    uint32_t relWait = 0;
    uint32_t relTime = curTime - nextInt;
9d00136c:	8f858010 	lw	a1,-32752(gp)
    uint32_t millisLocal = gTimer0_millis;  // defeat volatility
9d001370:	8f838004 	lw	v1,-32764(gp)
**
*/
uint32_t millisecondCoreTimerService(uint32_t curTime)
{
    static nextInt = 0;
    uint32_t relWait = 0;
9d001374:	00001021 	move	v0,zero
    uint32_t relTime = curTime - nextInt;
9d001378:	00852023 	subu	a0,a0,a1

    // catch-up up to current time; we may have fallen behind due to interrupts being diabled.
    while(relWait <= relTime)
    {
        millisLocal++;                      // add a ms to our time
        relWait += CORE_TICK_RATE;          // add a ms to our next ISR time
9d00137c:	34079c40 	li	a3,0x9c40
9d001380:	00471021 	addu	v0,v0,a3
    uint32_t relWait = 0;
    uint32_t relTime = curTime - nextInt;
    uint32_t millisLocal = gTimer0_millis;  // defeat volatility

    // catch-up up to current time; we may have fallen behind due to interrupts being diabled.
    while(relWait <= relTime)
9d001384:	0082302b 	sltu	a2,a0,v0
9d001388:	10c0fffd 	beqz	a2,9d001380 <millisecondCoreTimerService+0x14>
9d00138c:	24630001 	addiu	v1,v1,1
        millisLocal++;                      // add a ms to our time
        relWait += CORE_TICK_RATE;          // add a ms to our next ISR time
     }

    // set when we want to be called again
    nextInt += relWait;                     // calculate the absolute interrupt time we want.
9d001390:	00451021 	addu	v0,v0,a1

    // we want to sync gCore_timer_last_val with the last millisecond "count" value
    // curTime may not be exactly on a millisecond boundary, but we know where that is
    // we know nextInt is our next millisecond boundary, so less 1 CORE_TICK_RATE will be our last one
    // gCore_timer_last_val = curTime;         // This is the original bogus code
    gCore_timer_last_val =  nextInt - CORE_TICK_RATE;
9d001394:	34049c40 	li	a0,0x9c40
9d001398:	00442023 	subu	a0,v0,a0
9d00139c:	af848008 	sw	a0,-32760(gp)
        millisLocal++;                      // add a ms to our time
        relWait += CORE_TICK_RATE;          // add a ms to our next ISR time
     }

    // set when we want to be called again
    nextInt += relWait;                     // calculate the absolute interrupt time we want.
9d0013a0:	af828010 	sw	v0,-32752(gp)
    // we know nextInt is our next millisecond boundary, so less 1 CORE_TICK_RATE will be our last one
    // gCore_timer_last_val = curTime;         // This is the original bogus code
    gCore_timer_last_val =  nextInt - CORE_TICK_RATE;

    // update the global millisecond counter.
    gTimer0_millis = millisLocal;           // Total number of ms
9d0013a4:	af838004 	sw	v1,-32764(gp)

    return(nextInt);
}
9d0013a8:	03e00008 	jr	ra
9d0013ac:	00000000 	nop

9d0013b0 <CoreTimerHandler>:
**      each service's logical compare values. And then the next and soonest logical compare value is searched for and set as
**      the real compare value to be interrupted to notify the Serivces when count hits that value.
**
*/
void __attribute__((interrupt(),nomips16)) CoreTimerHandler(void)
{
9d0013b0:	415de800 	rdpgpr	sp,sp
9d0013b4:	401b7000 	mfc0	k1,c0_epc
9d0013b8:	401a6002 	mfc0	k0,c0_srsctl
9d0013bc:	27bdff58 	addiu	sp,sp,-168
9d0013c0:	afbb00a4 	sw	k1,164(sp)
9d0013c4:	401b6000 	mfc0	k1,c0_status
9d0013c8:	afba00a0 	sw	k0,160(sp)
9d0013cc:	401a6800 	mfc0	k0,c0_cause
9d0013d0:	001ad282 	srl	k0,k0,0xa
9d0013d4:	afbb009c 	sw	k1,156(sp)
9d0013d8:	7f5b7a84 	ins	k1,k0,0xa,0x6
9d0013dc:	7c1b2044 	ins	k1,zero,0x1,0x4
9d0013e0:	409b6000 	mtc0	k1,c0_status
9d0013e4:	afa3002c 	sw	v1,44(sp)
9d0013e8:	8fa300a0 	lw	v1,160(sp)
9d0013ec:	3063000f 	andi	v1,v1,0xf
9d0013f0:	1460001a 	bnez	v1,9d00145c <CoreTimerHandler+0xac>
9d0013f4:	afa20028 	sw	v0,40(sp)
9d0013f8:	afbf008c 	sw	ra,140(sp)
9d0013fc:	afbe0088 	sw	s8,136(sp)
9d001400:	afb90084 	sw	t9,132(sp)
9d001404:	afb80080 	sw	t8,128(sp)
9d001408:	afb7007c 	sw	s7,124(sp)
9d00140c:	afb60078 	sw	s6,120(sp)
9d001410:	afb50074 	sw	s5,116(sp)
9d001414:	afb40070 	sw	s4,112(sp)
9d001418:	afb3006c 	sw	s3,108(sp)
9d00141c:	afb20068 	sw	s2,104(sp)
9d001420:	afb10064 	sw	s1,100(sp)
9d001424:	afb00060 	sw	s0,96(sp)
9d001428:	afaf005c 	sw	t7,92(sp)
9d00142c:	afae0058 	sw	t6,88(sp)
9d001430:	afad0054 	sw	t5,84(sp)
9d001434:	afac0050 	sw	t4,80(sp)
9d001438:	afab004c 	sw	t3,76(sp)
9d00143c:	afaa0048 	sw	t2,72(sp)
9d001440:	afa90044 	sw	t1,68(sp)
9d001444:	afa80040 	sw	t0,64(sp)
9d001448:	afa7003c 	sw	a3,60(sp)
9d00144c:	afa60038 	sw	a2,56(sp)
9d001450:	afa50034 	sw	a1,52(sp)
9d001454:	afa40030 	sw	a0,48(sp)
9d001458:	afa10024 	sw	at,36(sp)
9d00145c:	00001012 	mflo	v0
9d001460:	afa20094 	sw	v0,148(sp)
9d001464:	00001810 	mfhi	v1
9d001468:	afa30090 	sw	v1,144(sp)

    // we know that count >= compare, otherwise we would not have been interrupted
    // we also know that count and compare >= gLastBaseCount as this was our last count value.

    // get our current time; this will establish our next base
    read_count(curTime); 
9d00146c:	40134800 	mfc0	s3,c0_count
    relCurTime = curTime - gLastBaseCount;
9d001470:	8f9e800c 	lw	s8,-32756(gp)
9d001474:	3c10a000 	lui	s0,0xa000
        {
            // if the serivce exists
            if(gCoreTimerInfo[i].serivce != NULL)
            {
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d001478:	3c05a000 	lui	a1,0xa000
    // we know that count >= compare, otherwise we would not have been interrupted
    // we also know that count and compare >= gLastBaseCount as this was our last count value.

    // get our current time; this will establish our next base
    read_count(curTime); 
    relCurTime = curTime - gLastBaseCount;
9d00147c:	027ef023 	subu	s8,s3,s8

    // we know that count >= compare, otherwise we would not have been interrupted
    // we also know that count and compare >= gLastBaseCount as this was our last count value.

    // get our current time; this will establish our next base
    read_count(curTime); 
9d001480:	02603021 	move	a2,s3
9d001484:	2610000c 	addiu	s0,s0,12
9d001488:	3c12bf88 	lui	s2,0xbf88
        {
            // if the serivce exists
            if(gCoreTimerInfo[i].serivce != NULL)
            {
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d00148c:	24a50008 	addiu	a1,a1,8
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i=0; i<MaxNbrOfCoreTimerServices; i++)
9d001490:	24030003 	li	v1,3
        // we need to apply our base to convert from relative values to an absolute time.
        compare = relNextInt + gLastBaseCount;
        write_comp(compare); 

        // clear the CT flag
        mCTClearIntFlag();
9d001494:	24110001 	li	s1,1
    // we know that count >= compare, otherwise we would not have been interrupted
    // we also know that count and compare >= gLastBaseCount as this was our last count value.

    // get our current time; this will establish our next base
    read_count(curTime); 
    relCurTime = curTime - gLastBaseCount;
9d001498:	0200b021 	move	s6,s0
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i=0; i<MaxNbrOfCoreTimerServices; i++)
9d00149c:	0000a021 	move	s4,zero
    nextBase = curTime;

    do
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;
9d0014a0:	2415ffff 	li	s5,-1

        // check to see who all we need to call
        for(i=0; i<MaxNbrOfCoreTimerServices; i++)
        {
            // if the serivce exists
            if(gCoreTimerInfo[i].serivce != NULL)
9d0014a4:	8ec20000 	lw	v0,0(s6)
            {
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d0014a8:	0014b8c0 	sll	s7,s4,0x3
9d0014ac:	02e5b821 	addu	s7,s7,a1
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i=0; i<MaxNbrOfCoreTimerServices; i++)
9d0014b0:	26940001 	addiu	s4,s4,1
        {
            // if the serivce exists
            if(gCoreTimerInfo[i].serivce != NULL)
9d0014b4:	10400009 	beqz	v0,9d0014dc <CoreTimerHandler+0x12c>
9d0014b8:	26d60008 	addiu	s6,s6,8
            {
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d0014bc:	8ee70000 	lw	a3,0(s7)
9d0014c0:	8f84800c 	lw	a0,-32756(gp)
9d0014c4:	00e42023 	subu	a0,a3,a0
                if(relInt <= relCurTime)
9d0014c8:	03c4382b 	sltu	a3,s8,a0
9d0014cc:	50e0003d 	beqzl	a3,9d0015c4 <CoreTimerHandler+0x214>
9d0014d0:	00c02021 	move	a0,a2
                    relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
                }

                // see if this is the next interrupt we want to set
                // we are looking for the closest/lowest int to set.
                if(relInt < relNextInt)
9d0014d4:	0095102b 	sltu	v0,a0,s5
9d0014d8:	0082a80b 	movn	s5,a0,v0
    {
        // make sure we find the lowest int to set
        relNextInt = 0xFFFFFFFF;

        // check to see who all we need to call
        for(i=0; i<MaxNbrOfCoreTimerServices; i++)
9d0014dc:	5683fff2 	bnel	s4,v1,9d0014a8 <CoreTimerHandler+0xf8>
9d0014e0:	8ec20000 	lw	v0,0(s6)
        // other service may cause the compare value to be set for an earlier time; but we always know there will be a compare time
        // to set, so we know that relNextInt has a value other than 0xFFFFFFFF in it.

        // Go ahead and set the compare register to the next interrupt we want.
        // we need to apply our base to convert from relative values to an absolute time.
        compare = relNextInt + gLastBaseCount;
9d0014e4:	8f82800c 	lw	v0,-32756(gp)
9d0014e8:	02a21021 	addu	v0,s5,v0
        write_comp(compare); 
9d0014ec:	40825800 	mtc0	v0,c0_compare

        // clear the CT flag
        mCTClearIntFlag();
9d0014f0:	ae511034 	sw	s1,4148(s2)

        // read the count after the CT flag has been set so we can make sure count has not passed compare
        // during our processing of this int
        read_count(curTime); 
9d0014f4:	40064800 	mfc0	a2,c0_count

        // get the relative time so we can operate in the linear portion of our uint32.
        relCurTime = curTime - gLastBaseCount;
9d0014f8:	8f9e800c 	lw	s8,-32756(gp)
9d0014fc:	00def023 	subu	s8,a2,s8

        // if the current time has passed our interrupt time, then we basically hit the interrupt again
        // so we probabaly missed the CT flag being set and we need to reprocess this interrupt and find the next one to set.
    } while(relNextInt <= relCurTime);
9d001500:	03d5a82b 	sltu	s5,s8,s5
9d001504:	52a0ffe5 	beqzl	s5,9d00149c <CoreTimerHandler+0xec>
9d001508:	0200b021 	move	s6,s0
    // otherwise the next interrupt time (compare time) is after the current time and CT will catch it when count == compare.
    // we can safely exit the ISR.

    // but first we must set our new base so the next time we come into this routine we
    // have a valid lower base to shift our times to for comparisons.
    gLastBaseCount = nextBase;
9d00150c:	af93800c 	sw	s3,-32756(gp)
}
9d001510:	8fa20094 	lw	v0,148(sp)
9d001514:	8fa30090 	lw	v1,144(sp)
9d001518:	00400013 	mtlo	v0
9d00151c:	8fa200a0 	lw	v0,160(sp)
9d001520:	3042000f 	andi	v0,v0,0xf
9d001524:	1440001c 	bnez	v0,9d001598 <CoreTimerHandler+0x1e8>
9d001528:	00600011 	mthi	v1
9d00152c:	8fbf008c 	lw	ra,140(sp)
9d001530:	8fbe0088 	lw	s8,136(sp)
9d001534:	8fb90084 	lw	t9,132(sp)
9d001538:	8fb80080 	lw	t8,128(sp)
9d00153c:	8fb7007c 	lw	s7,124(sp)
9d001540:	8fb60078 	lw	s6,120(sp)
9d001544:	8fb50074 	lw	s5,116(sp)
9d001548:	8fb40070 	lw	s4,112(sp)
9d00154c:	8fb3006c 	lw	s3,108(sp)
9d001550:	8fb20068 	lw	s2,104(sp)
9d001554:	8fb10064 	lw	s1,100(sp)
9d001558:	8fb00060 	lw	s0,96(sp)
9d00155c:	8faf005c 	lw	t7,92(sp)
9d001560:	8fae0058 	lw	t6,88(sp)
9d001564:	8fad0054 	lw	t5,84(sp)
9d001568:	8fac0050 	lw	t4,80(sp)
9d00156c:	8fab004c 	lw	t3,76(sp)
9d001570:	8faa0048 	lw	t2,72(sp)
9d001574:	8fa90044 	lw	t1,68(sp)
9d001578:	8fa80040 	lw	t0,64(sp)
9d00157c:	8fa7003c 	lw	a3,60(sp)
9d001580:	8fa60038 	lw	a2,56(sp)
9d001584:	8fa50034 	lw	a1,52(sp)
9d001588:	8fa40030 	lw	a0,48(sp)
9d00158c:	8fa3002c 	lw	v1,44(sp)
9d001590:	8fa20028 	lw	v0,40(sp)
9d001594:	8fa10024 	lw	at,36(sp)
9d001598:	41606000 	di
9d00159c:	000000c0 	ehb
9d0015a0:	8fba00a4 	lw	k0,164(sp)
9d0015a4:	8fbb009c 	lw	k1,156(sp)
9d0015a8:	409a7000 	mtc0	k0,c0_epc
9d0015ac:	8fba00a0 	lw	k0,160(sp)
9d0015b0:	27bd00a8 	addiu	sp,sp,168
9d0015b4:	409a6002 	mtc0	k0,c0_srsctl
9d0015b8:	41dde800 	wrpgpr	sp,sp
9d0015bc:	409b6000 	mtc0	k1,c0_status
9d0015c0:	42000018 	eret
                // if their time has come up
                relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
                if(relInt <= relCurTime)
                {
                    // call their routine to get their next interrupt time
                    gCoreTimerInfo[i].nextInt = gCoreTimerInfo[i].serivce(curTime);
9d0015c4:	afa30018 	sw	v1,24(sp)
9d0015c8:	afa50014 	sw	a1,20(sp)
9d0015cc:	0040f809 	jalr	v0
9d0015d0:	afa60010 	sw	a2,16(sp)
9d0015d4:	aee20000 	sw	v0,0(s7)

                    // recalculate the relative time of thier next int
                    // so we can see if this is the next int we need to set
                    relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d0015d8:	8ee40000 	lw	a0,0(s7)
9d0015dc:	8f82800c 	lw	v0,-32756(gp)
9d0015e0:	8fa60010 	lw	a2,16(sp)
9d0015e4:	8fa50014 	lw	a1,20(sp)
9d0015e8:	00822023 	subu	a0,a0,v0
                }

                // see if this is the next interrupt we want to set
                // we are looking for the closest/lowest int to set.
                if(relInt < relNextInt)
9d0015ec:	0095102b 	sltu	v0,a0,s5
                    // call their routine to get their next interrupt time
                    gCoreTimerInfo[i].nextInt = gCoreTimerInfo[i].serivce(curTime);

                    // recalculate the relative time of thier next int
                    // so we can see if this is the next int we need to set
                    relInt = gCoreTimerInfo[i].nextInt - gLastBaseCount;
9d0015f0:	8fa30018 	lw	v1,24(sp)
                }

                // see if this is the next interrupt we want to set
                // we are looking for the closest/lowest int to set.
                if(relInt < relNextInt)
9d0015f4:	0b400537 	j	9d0014dc <CoreTimerHandler+0x12c>
9d0015f8:	0082a80b 	movn	s5,a0,v0

9d0015fc <millis>:
uint8_t ppsGlobalLock = false;

//************************************************************************
unsigned long millis()
{
	return(gTimer0_millis);
9d0015fc:	8f828004 	lw	v0,-32764(gp)
}
9d001600:	03e00008 	jr	ra
9d001604:	00000000 	nop

9d001608 <delay>:
}

//************************************************************************
// Delay for a given number of milliseconds.
void delay(unsigned long ms)
{
9d001608:	27bdffe0 	addiu	sp,sp,-32
9d00160c:	afb10018 	sw	s1,24(sp)
unsigned long	startMillis;

	startMillis	=	gTimer0_millis;
9d001610:	8f918004 	lw	s1,-32764(gp)
	while ((gTimer0_millis - startMillis) < ms)
9d001614:	8f828004 	lw	v0,-32764(gp)
}

//************************************************************************
// Delay for a given number of milliseconds.
void delay(unsigned long ms)
{
9d001618:	afb00014 	sw	s0,20(sp)
9d00161c:	afbf001c 	sw	ra,28(sp)
unsigned long	startMillis;

	startMillis	=	gTimer0_millis;
	while ((gTimer0_millis - startMillis) < ms)
9d001620:	00511023 	subu	v0,v0,s1
9d001624:	0044102b 	sltu	v0,v0,a0
9d001628:	10400008 	beqz	v0,9d00164c <delay+0x44>
9d00162c:	00808021 	move	s0,a0
	{
		_scheduleTask();
9d001630:	0f40068e 	jal	9d001a38 <_scheduleTask>
9d001634:	00000000 	nop
void delay(unsigned long ms)
{
unsigned long	startMillis;

	startMillis	=	gTimer0_millis;
	while ((gTimer0_millis - startMillis) < ms)
9d001638:	8f828004 	lw	v0,-32764(gp)
9d00163c:	00511023 	subu	v0,v0,s1
9d001640:	0050102b 	sltu	v0,v0,s0
9d001644:	1440fffa 	bnez	v0,9d001630 <delay+0x28>
9d001648:	00000000 	nop
	{
		_scheduleTask();
	}
}
9d00164c:	8fbf001c 	lw	ra,28(sp)
9d001650:	8fb10018 	lw	s1,24(sp)
9d001654:	8fb00014 	lw	s0,20(sp)
9d001658:	03e00008 	jr	ra
9d00165c:	27bd0020 	addiu	sp,sp,32

9d001660 <init>:
	__PIC32_pbClk	=	SYSTEMConfigPerformance(F_CPU);
#endif
#endif

	// Configure the processor for the proper number of wait states and caching.
	_configSystem(F_CPU);
9d001660:	3c0404c4 	lui	a0,0x4c4
}


//************************************************************************
void init()
{
9d001664:	27bdffe8 	addiu	sp,sp,-24
9d001668:	afbf0014 	sw	ra,20(sp)
	__PIC32_pbClk	=	SYSTEMConfigPerformance(F_CPU);
#endif
#endif

	// Configure the processor for the proper number of wait states and caching.
	_configSystem(F_CPU);
9d00166c:	0f400748 	jal	9d001d20 <_configSystem>
9d001670:	3484b400 	ori	a0,a0,0xb400

	// Enable multi-vector interrupts
	_enableMultiVectorInterrupts();
9d001674:	0f400769 	jal	9d001da4 <_enableMultiVectorInterrupts>
9d001678:	00000000 	nop

	// Initialize the core timer for use to maintain the system timer tick.
	_initCoreTimer(CORE_TICK_RATE);
9d00167c:	0f400772 	jal	9d001dc8 <_initCoreTimer>
9d001680:	34049c40 	li	a0,0x9c40

    initIntVector();
9d001684:	0f4006fc 	jal	9d001bf0 <initIntVector>
9d001688:	00000000 	nop

	setIntPriority(_CORE_TIMER_VECTOR, _CT_IPL_IPC, _CT_SPL_IPC);
9d00168c:	00003021 	move	a2,zero
9d001690:	00002021 	move	a0,zero
9d001694:	0f40072a 	jal	9d001ca8 <setIntPriority>
9d001698:	24050007 	li	a1,7
	setIntVector(_CORE_TIMER_VECTOR, CoreTimerHandler);
9d00169c:	3c059d00 	lui	a1,0x9d00
9d0016a0:	24a513b0 	addiu	a1,a1,5040
9d0016a4:	0f400711 	jal	9d001c44 <setIntVector>
9d0016a8:	00002021 	move	a0,zero
	setIntEnable(_CORE_TIMER_IRQ);
9d0016ac:	0f40071c 	jal	9d001c70 <setIntEnable>
9d0016b0:	00002021 	move	a0,zero

	// Save the peripheral bus frequency for later use.
	__PIC32_pbClk = getPeripheralClock();
9d0016b4:	0f400741 	jal	9d001d04 <getPeripheralClock>
9d0016b8:	00000000 	nop

   // allow for debugging, this will stop the core timer when the debugger takes control
    _CP0_BIC_DEBUG(_CP0_DEBUG_COUNTDM_MASK); 
9d0016bc:	3c030200 	lui	v1,0x200
	setIntPriority(_CORE_TIMER_VECTOR, _CT_IPL_IPC, _CT_SPL_IPC);
	setIntVector(_CORE_TIMER_VECTOR, CoreTimerHandler);
	setIntEnable(_CORE_TIMER_IRQ);

	// Save the peripheral bus frequency for later use.
	__PIC32_pbClk = getPeripheralClock();
9d0016c0:	af828024 	sw	v0,-32732(gp)

   // allow for debugging, this will stop the core timer when the debugger takes control
    _CP0_BIC_DEBUG(_CP0_DEBUG_COUNTDM_MASK); 
9d0016c4:	4002b800 	mfc0	v0,c0_debug
9d0016c8:	00031827 	nor	v1,zero,v1
9d0016cc:	00431824 	and	v1,v0,v1
9d0016d0:	4083b800 	mtc0	v1,c0_debug
9d0016d4:	000000c0 	ehb
	RtccSetTimeDate(0x10073000, 0x10101701);
	// please note that the rsvd field has to be 0 in the time field!
#endif
#endif

	delay(50);
9d0016d8:	0f400582 	jal	9d001608 <delay>
9d0016dc:	24040032 	li	a0,50
#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
	CFGCONbits.JTAGEN = 0;
	//CFGCONbits.TDOEN = 0;
	//OSCCONbits.SOSCEN = 0;
#else
	DDPCONbits.JTAGEN	=	0;
9d0016e0:	3c02bf81 	lui	v0,0xbf81
9d0016e4:	8c43f200 	lw	v1,-3584(v0)
9d0016e8:	7c0318c4 	ins	v1,zero,0x3,0x1
9d0016ec:	ac43f200 	sw	v1,-3584(v0)
void	_board_init(void);
	_board_init();
#endif

	//* Initialize the periodic task manager
	_initTaskManager();
9d0016f0:	0f400681 	jal	9d001a04 <_initTaskManager>
9d0016f4:	00000000 	nop
#if defined(_SER0_BASE)
	p32_uart *	uart;
	uart = (p32_uart *)_SER0_BASE;
	uart->uxMode.clr = (1 << _UARTMODE_ON);
#endif
}
9d0016f8:	8fbf0014 	lw	ra,20(sp)
	//*	Issue #84
	//*	disable the uart so that the pins can be used as general purpose I/O
#if defined(_SER0_BASE)
	p32_uart *	uart;
	uart = (p32_uart *)_SER0_BASE;
	uart->uxMode.clr = (1 << _UARTMODE_ON);
9d0016fc:	34038000 	li	v1,0x8000
9d001700:	3c02bf80 	lui	v0,0xbf80
9d001704:	ac436004 	sw	v1,24580(v0)
#endif
}
9d001708:	03e00008 	jr	ra
9d00170c:	27bd0018 	addiu	sp,sp,24

9d001710 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

//************************************************************************
void pinMode(uint8_t pin, uint8_t mode)
{
9d001710:	308400ff 	andi	a0,a0,0xff
9d001714:	27bdffe0 	addiu	sp,sp,-32
uint8_t		            timer;
uint32_t                cn;

	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d001718:	2c82002f 	sltiu	v0,a0,47
#include "wiring_private.h"
#include "pins_arduino.h"

//************************************************************************
void pinMode(uint8_t pin, uint8_t mode)
{
9d00171c:	afbf001c 	sw	ra,28(sp)
9d001720:	afb10018 	sw	s1,24(sp)
9d001724:	afb00014 	sw	s0,20(sp)
uint8_t		            timer;
uint32_t                cn;

	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d001728:	1040002d 	beqz	v0,9d0017e0 <pinMode+0xd0>
9d00172c:	30a500ff 	andi	a1,a1,0xff
		return;
	}
#endif	// OPT_BOARD_DIGITAL_IO

	//* Get the port number for this pin.
	if ((port = digitalPinToPort(pin)) == NOT_A_PIN)
9d001730:	3c029d00 	lui	v0,0x9d00
9d001734:	24422018 	addiu	v0,v0,8216
9d001738:	00441021 	addu	v0,v0,a0
9d00173c:	90420000 	lbu	v0,0(v0)
9d001740:	10400027 	beqz	v0,9d0017e0 <pinMode+0xd0>
9d001744:	00023080 	sll	a2,v0,0x2
	{
		return;
	}

	//* Obtain pointer to the registers for this io port.
	iop = portRegisters(port);
9d001748:	3c079d00 	lui	a3,0x9d00
9d00174c:	24e71ff4 	addiu	a3,a3,8180
9d001750:	00c73821 	addu	a3,a2,a3

	//* Obtain bit mask for the specific bit for this pin.
	bit = digitalPinToBitMask(pin);
9d001754:	3c069d00 	lui	a2,0x9d00
9d001758:	00041840 	sll	v1,a0,0x1
9d00175c:	24c62048 	addiu	a2,a2,8264
9d001760:	00c33021 	addu	a2,a2,v1
9d001764:	94d00000 	lhu	s0,0(a2)
	// analog input capable pins.
	// Clear the bit in the ANSELx register to ensure that the pin is in
	// digital input mode.
	iop->ansel.clr = bit;
#else
	if (port == _IOPORT_PB)
9d001768:	24060002 	li	a2,2
9d00176c:	1046003a 	beq	v0,a2,9d001858 <pinMode+0x148>
9d001770:	8cf10000 	lw	s1,0(a3)

	}
#endif	// defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)

	// Set the pin to the requested mode.
    switch (mode) {
9d001774:	24020002 	li	v0,2
9d001778:	10a20030 	beq	a1,v0,9d00183c <pinMode+0x12c>
9d00177c:	2ca20003 	sltiu	v0,a1,3
9d001780:	1040001c 	beqz	v0,9d0017f4 <pinMode+0xe4>
9d001784:	2ca20006 	sltiu	v0,a1,6
9d001788:	14a0001d 	bnez	a1,9d001800 <pinMode+0xf0>
9d00178c:	3c029d00 	lui	v0,0x9d00
            } else {
                iop->cnpu.clr = bit;
                iop->cnpd.clr = bit;
            }
#else
            if (mode == INPUT_PULLUP) {
9d001790:	24020003 	li	v0,3
9d001794:	10a2003a 	beq	a1,v0,9d001880 <pinMode+0x170>
9d001798:	3c029d00 	lui	v0,0x9d00
                cn = digitalPinToCN(pin);
                if (cn != NOT_CN_PIN) {
                    CNPUESET = cn;
                } 
            } else {
                cn = digitalPinToCN(pin);
9d00179c:	24422108 	addiu	v0,v0,8456
9d0017a0:	00042080 	sll	a0,a0,0x2
9d0017a4:	00822021 	addu	a0,a0,v0
9d0017a8:	8c820000 	lw	v0,0(a0)
                if (cn != NOT_CN_PIN) {
9d0017ac:	240400ff 	li	a0,255
9d0017b0:	10440002 	beq	v0,a0,9d0017bc <pinMode+0xac>
9d0017b4:	3c04bf88 	lui	a0,0xbf88
                    CNPUECLR = cn;
9d0017b8:	ac8261e4 	sw	v0,25060(a0)
            }
#endif
            // continue into INPUT case
            //* Determine if this is an output compare pin. If so,
            //* we need to make sure PWM output is off.
            timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
9d0017bc:	3c029d00 	lui	v0,0x9d00
9d0017c0:	244220a8 	addiu	v0,v0,8360
9d0017c4:	00431821 	addu	v1,v0,v1
9d0017c8:	90640000 	lbu	a0,0(v1)
9d0017cc:	3084000f 	andi	a0,a0,0xf
            if (timer != NOT_ON_TIMER)
9d0017d0:	14800025 	bnez	a0,9d001868 <pinMode+0x158>
9d0017d4:	00000000 	nop
            }

            //*	May  1,	2011
            //*	according to item #26 in PIC32MX5XX-6XX-7XX Errata.pdf 
            //*	if we are setting to input, set the data bit to zero first
            iop->lat.clr  = bit;	//clear to output bit		
9d0017d8:	ae300024 	sw	s0,36(s1)
            iop->tris.set = bit;	//make the pin an input
9d0017dc:	ae300008 	sw	s0,8(s1)
            } 
#endif
            iop->tris.clr = bit;	//make the pin an output
            iop->odc.clr  = bit;	//make sure it isn't open drain
	}
}
9d0017e0:	8fbf001c 	lw	ra,28(sp)
9d0017e4:	8fb10018 	lw	s1,24(sp)
9d0017e8:	8fb00014 	lw	s0,20(sp)
9d0017ec:	03e00008 	jr	ra
9d0017f0:	27bd0020 	addiu	sp,sp,32

	}
#endif	// defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)

	// Set the pin to the requested mode.
    switch (mode) {
9d0017f4:	1440ffe7 	bnez	v0,9d001794 <pinMode+0x84>
9d0017f8:	24020003 	li	v0,3
            // than error checking the input value.
#if defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)
            iop->cnpu.clr = bit;
            iop->cnpd.clr = bit;
#else
            cn = digitalPinToCN(pin);
9d0017fc:	3c029d00 	lui	v0,0x9d00
9d001800:	24422108 	addiu	v0,v0,8456
9d001804:	00042080 	sll	a0,a0,0x2
9d001808:	00822021 	addu	a0,a0,v0
9d00180c:	8c820000 	lw	v0,0(a0)
            if (cn != NOT_CN_PIN) {
9d001810:	240300ff 	li	v1,255
9d001814:	10430002 	beq	v0,v1,9d001820 <pinMode+0x110>
9d001818:	3c03bf88 	lui	v1,0xbf88
                CNPUECLR = cn;
9d00181c:	ac6261e4 	sw	v0,25060(v1)
            } 
#endif
            iop->tris.clr = bit;	//make the pin an output
            iop->odc.clr  = bit;	//make sure it isn't open drain
	}
}
9d001820:	8fbf001c 	lw	ra,28(sp)
            cn = digitalPinToCN(pin);
            if (cn != NOT_CN_PIN) {
                CNPUECLR = cn;
            } 
#endif
            iop->tris.clr = bit;	//make the pin an output
9d001824:	ae300004 	sw	s0,4(s1)
            iop->odc.clr  = bit;	//make sure it isn't open drain
9d001828:	ae300034 	sw	s0,52(s1)
	}
}
9d00182c:	8fb10018 	lw	s1,24(sp)
9d001830:	8fb00014 	lw	s0,20(sp)
9d001834:	03e00008 	jr	ra
9d001838:	27bd0020 	addiu	sp,sp,32
9d00183c:	8fbf001c 	lw	ra,28(sp)
            //*	if we are setting to input, set the data bit to zero first
            iop->lat.clr  = bit;	//clear to output bit		
            iop->tris.set = bit;	//make the pin an input
            break;
        case OPEN:
            iop->tris.clr = bit;	//OPEN implies output, make the pin an output
9d001840:	ae300004 	sw	s0,4(s1)
            iop->odc.set  = bit;	//make the pin open drain
9d001844:	ae300038 	sw	s0,56(s1)
            } 
#endif
            iop->tris.clr = bit;	//make the pin an output
            iop->odc.clr  = bit;	//make sure it isn't open drain
	}
}
9d001848:	8fb10018 	lw	s1,24(sp)
9d00184c:	8fb00014 	lw	s0,20(sp)
9d001850:	03e00008 	jr	ra
9d001854:	27bd0020 	addiu	sp,sp,32
		//	You have to set the bit in the AD1PCFG for an analog pin to be used as a 
		//	digital input. They come up after reset as analog input with the digital 
		//	input disabled. For the PORTB pins you switch between analog input and 
		//	digital input using AD1PCFG.

		AD1PCFGSET = bit;
9d001858:	3c02bf81 	lui	v0,0xbf81
9d00185c:	ac509068 	sw	s0,-28568(v0)

	}
#endif	// defined(__PIC32MX1XX__) || defined(__PIC32MX2XX__)

	// Set the pin to the requested mode.
    switch (mode) {
9d001860:	0b4005de 	j	9d001778 <pinMode+0x68>
9d001864:	24020002 	li	v0,2
            //* Determine if this is an output compare pin. If so,
            //* we need to make sure PWM output is off.
            timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
            if (timer != NOT_ON_TIMER)
            {
                turnOffPWM(timer);
9d001868:	0f40066e 	jal	9d0019b8 <turnOffPWM>
9d00186c:	00000000 	nop
            }

            //*	May  1,	2011
            //*	according to item #26 in PIC32MX5XX-6XX-7XX Errata.pdf 
            //*	if we are setting to input, set the data bit to zero first
            iop->lat.clr  = bit;	//clear to output bit		
9d001870:	ae300024 	sw	s0,36(s1)
            iop->tris.set = bit;	//make the pin an input
9d001874:	ae300008 	sw	s0,8(s1)
            } 
#endif
            iop->tris.clr = bit;	//make the pin an output
            iop->odc.clr  = bit;	//make sure it isn't open drain
	}
}
9d001878:	0b4005f9 	j	9d0017e4 <pinMode+0xd4>
9d00187c:	8fbf001c 	lw	ra,28(sp)
                iop->cnpu.clr = bit;
                iop->cnpd.clr = bit;
            }
#else
            if (mode == INPUT_PULLUP) {
                cn = digitalPinToCN(pin);
9d001880:	24422108 	addiu	v0,v0,8456
9d001884:	00042080 	sll	a0,a0,0x2
9d001888:	00822021 	addu	a0,a0,v0
9d00188c:	8c820000 	lw	v0,0(a0)
                if (cn != NOT_CN_PIN) {
9d001890:	240400ff 	li	a0,255
9d001894:	1044ffc9 	beq	v0,a0,9d0017bc <pinMode+0xac>
9d001898:	3c04bf88 	lui	a0,0xbf88
                    CNPUESET = cn;
9d00189c:	ac8261e8 	sw	v0,25064(a0)
            }
#endif
            // continue into INPUT case
            //* Determine if this is an output compare pin. If so,
            //* we need to make sure PWM output is off.
            timer = digitalPinToTimerOC(pin) >> _BN_TIMER_OC;
9d0018a0:	0b4005f0 	j	9d0017c0 <pinMode+0xb0>
9d0018a4:	3c029d00 	lui	v0,0x9d00

9d0018a8 <digitalWrite>:
//*	Reading from PORT gives you a snapshot of the actual pins state regardless of how, 
//*	if at all, the PIC is trying to drive them.  
//*	Reading from LAT gives you the values last written to the pins, whether thru LAT or PORT.
//************************************************************************
void digitalWrite(uint8_t pin, uint8_t val)
{
9d0018a8:	308400ff 	andi	a0,a0,0xff
9d0018ac:	27bdffd8 	addiu	sp,sp,-40
uint8_t					timer;
uint32_t                cn;

	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d0018b0:	2c82002f 	sltiu	v0,a0,47
//*	Reading from PORT gives you a snapshot of the actual pins state regardless of how, 
//*	if at all, the PIC is trying to drive them.  
//*	Reading from LAT gives you the values last written to the pins, whether thru LAT or PORT.
//************************************************************************
void digitalWrite(uint8_t pin, uint8_t val)
{
9d0018b4:	afbf0024 	sw	ra,36(sp)
9d0018b8:	afb10020 	sw	s1,32(sp)
9d0018bc:	afb0001c 	sw	s0,28(sp)
uint8_t					timer;
uint32_t                cn;

	/* Check if pin number is in valid range.
	*/
	if (pin >= NUM_DIGITAL_PINS_EXTENDED)
9d0018c0:	10400020 	beqz	v0,9d001944 <digitalWrite+0x9c>
9d0018c4:	30a500ff 	andi	a1,a1,0xff
		return;
	}
#endif		// OPT_BOARD_DIGITAL_IO

	//* Get the port number for this pin.
	if ((port = digitalPinToPort(pin)) == NOT_A_PIN)
9d0018c8:	3c029d00 	lui	v0,0x9d00
9d0018cc:	24422018 	addiu	v0,v0,8216
9d0018d0:	00821021 	addu	v0,a0,v0
9d0018d4:	90420000 	lbu	v0,0(v0)
9d0018d8:	1040001a 	beqz	v0,9d001944 <digitalWrite+0x9c>
9d0018dc:	3c039d00 	lui	v1,0x9d00
	{
		return;
	}

	//* Obtain pointer to the registers for this io port.
	iop = portRegisters(port);
9d0018e0:	24631ff4 	addiu	v1,v1,8180
9d0018e4:	00021080 	sll	v0,v0,0x2
9d0018e8:	00431021 	addu	v0,v0,v1
9d0018ec:	8c500000 	lw	s0,0(v0)

	//* Obtain bit mask for the specific bit for this pin.
	bit = digitalPinToBitMask(pin);
9d0018f0:	3c069d00 	lui	a2,0x9d00
9d0018f4:	00041040 	sll	v0,a0,0x1
9d0018f8:	24c62048 	addiu	a2,a2,8264
9d0018fc:	00463021 	addu	a2,v0,a2

    //* If the port is in input mode and we write a value to it
    //* we must be enabling or disabling the internal pull-up
    //* resistor.  Only works for pins that have an associated
    //* change notification pin.
    if (iop->tris.reg & bit) {
9d001900:	8e030000 	lw	v1,0(s0)
9d001904:	94d10000 	lhu	s1,0(a2)
9d001908:	02231824 	and	v1,s1,v1
9d00190c:	10600012 	beqz	v1,9d001958 <digitalWrite+0xb0>
9d001910:	3c039d00 	lui	v1,0x9d00
        } else {
            iop->cnpu.set = bit;
            iop->cnpd.clr = bit;
        }
#else
        cn = digitalPinToCN(pin);
9d001914:	3c029d00 	lui	v0,0x9d00
9d001918:	24422108 	addiu	v0,v0,8456
9d00191c:	00042080 	sll	a0,a0,0x2
9d001920:	00822021 	addu	a0,a0,v0
9d001924:	8c820000 	lw	v0,0(a0)
        if (cn != NOT_CN_PIN) {
9d001928:	240300ff 	li	v1,255
9d00192c:	10430006 	beq	v0,v1,9d001948 <digitalWrite+0xa0>
9d001930:	8fbf0024 	lw	ra,36(sp)
            if (val == LOW) {
9d001934:	14a0001a 	bnez	a1,9d0019a0 <digitalWrite+0xf8>
9d001938:	3c03bf88 	lui	v1,0xbf88
                CNPUECLR = cn;
9d00193c:	3c03bf88 	lui	v1,0xbf88
9d001940:	ac6261e4 	sw	v0,25060(v1)
        else
        {
            iop->lat.set = bit;
        }
    }
}
9d001944:	8fbf0024 	lw	ra,36(sp)
9d001948:	8fb10020 	lw	s1,32(sp)
9d00194c:	8fb0001c 	lw	s0,28(sp)
9d001950:	03e00008 	jr	ra
9d001954:	27bd0028 	addiu	sp,sp,40
#endif

    } else {
        //* Determine if this is an output compare pin. If so,
        //* we need to make sure PWM output is off.
        timer = digitalPinToTimerOC(pin);
9d001958:	246320a8 	addiu	v1,v1,8360
9d00195c:	00431021 	addu	v0,v0,v1
9d001960:	90440000 	lbu	a0,0(v0)
9d001964:	3084000f 	andi	a0,a0,0xf
        if (timer != NOT_ON_TIMER)
9d001968:	14800009 	bnez	a0,9d001990 <digitalWrite+0xe8>
9d00196c:	00000000 	nop
        {
            turnOffPWM(timer);
        }

        //* Set the pin state
        if (val == LOW)
9d001970:	10a0000e 	beqz	a1,9d0019ac <digitalWrite+0x104>
9d001974:	00000000 	nop
        else
        {
            iop->lat.set = bit;
        }
    }
}
9d001978:	8fbf0024 	lw	ra,36(sp)
        {
            iop->lat.clr = bit;
        }
        else
        {
            iop->lat.set = bit;
9d00197c:	ae110028 	sw	s1,40(s0)
        }
    }
}
9d001980:	8fb10020 	lw	s1,32(sp)
9d001984:	8fb0001c 	lw	s0,28(sp)
9d001988:	03e00008 	jr	ra
9d00198c:	27bd0028 	addiu	sp,sp,40
        //* Determine if this is an output compare pin. If so,
        //* we need to make sure PWM output is off.
        timer = digitalPinToTimerOC(pin);
        if (timer != NOT_ON_TIMER)
        {
            turnOffPWM(timer);
9d001990:	0f40066e 	jal	9d0019b8 <turnOffPWM>
9d001994:	afa50010 	sw	a1,16(sp)
9d001998:	0b40065c 	j	9d001970 <digitalWrite+0xc8>
9d00199c:	8fa50010 	lw	a1,16(sp)
        cn = digitalPinToCN(pin);
        if (cn != NOT_CN_PIN) {
            if (val == LOW) {
                CNPUECLR = cn;
            } else {
                CNPUESET = cn;
9d0019a0:	ac6261e8 	sw	v0,25064(v1)
        else
        {
            iop->lat.set = bit;
        }
    }
}
9d0019a4:	0b400652 	j	9d001948 <digitalWrite+0xa0>
9d0019a8:	8fbf0024 	lw	ra,36(sp)
        }

        //* Set the pin state
        if (val == LOW)
        {
            iop->lat.clr = bit;
9d0019ac:	ae110024 	sw	s1,36(s0)
        else
        {
            iop->lat.set = bit;
        }
    }
}
9d0019b0:	0b400652 	j	9d001948 <digitalWrite+0xa0>
9d0019b4:	8fbf0024 	lw	ra,36(sp)

9d0019b8 <turnOffPWM>:
}


//************************************************************************
void turnOffPWM(uint8_t timer)
{
9d0019b8:	308400ff 	andi	a0,a0,0xff
	*/
	ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
	ocp->ocxCon.clr = OCCON_ON;

	// Turn off the bit saying that this PWM is active.
	pwm_active &= ~(1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d0019bc:	2482ffff 	addiu	v0,a0,-1
9d0019c0:	24030001 	li	v1,1
9d0019c4:	93858014 	lbu	a1,-32748(gp)
9d0019c8:	00431004 	sllv	v0,v1,v0
{
	p32_oc *	ocp;

	/* Disable the output compare.
	*/
	ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
9d0019cc:	3c03005f 	lui	v1,0x5f
9d0019d0:	3463c017 	ori	v1,v1,0xc017
9d0019d4:	00832021 	addu	a0,a0,v1
	ocp->ocxCon.clr = OCCON_ON;

	// Turn off the bit saying that this PWM is active.
	pwm_active &= ~(1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d0019d8:	00021027 	nor	v0,zero,v0
{
	p32_oc *	ocp;

	/* Disable the output compare.
	*/
	ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
9d0019dc:	00042240 	sll	a0,a0,0x9
	ocp->ocxCon.clr = OCCON_ON;
9d0019e0:	34038000 	li	v1,0x8000

	// Turn off the bit saying that this PWM is active.
	pwm_active &= ~(1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));
9d0019e4:	00451024 	and	v0,v0,a1
	p32_oc *	ocp;

	/* Disable the output compare.
	*/
	ocp = (p32_oc *)(_OCMP1_BASE_ADDRESS + (0x200 * (timer - (_TIMER_OC1 >> _BN_TIMER_OC))));
	ocp->ocxCon.clr = OCCON_ON;
9d0019e8:	ac830004 	sw	v1,4(a0)

	// Turn off the bit saying that this PWM is active.
	pwm_active &= ~(1 << (timer - (_TIMER_OC1 >> _BN_TIMER_OC)));

	// If no PWM are active, turn off the timer.
	if (pwm_active == 0)
9d0019ec:	14400003 	bnez	v0,9d0019fc <turnOffPWM+0x44>
9d0019f0:	a3828014 	sb	v0,-32748(gp)
	{
    	T2CONCLR = TBCON_ON;
9d0019f4:	3c02bf80 	lui	v0,0xbf80
9d0019f8:	ac430804 	sw	v1,2052(v0)
9d0019fc:	03e00008 	jr	ra
9d001a00:	00000000 	nop

9d001a04 <_initTaskManager>:
void
_initTaskManager() {
	int		id;

	for (id = 0; id < NUM_TASKS; id++) {
		rgtaskTable[id].pfnTask = 0;
9d001a04:	3c03a000 	lui	v1,0xa000
9d001a08:	24620118 	addiu	v0,v1,280
9d001a0c:	ac600118 	sw	zero,280(v1)
9d001a10:	ac400014 	sw	zero,20(v0)
9d001a14:	ac400028 	sw	zero,40(v0)
9d001a18:	ac40003c 	sw	zero,60(v0)
9d001a1c:	ac400050 	sw	zero,80(v0)
9d001a20:	ac400064 	sw	zero,100(v0)
9d001a24:	ac400078 	sw	zero,120(v0)
9d001a28:	ac40008c 	sw	zero,140(v0)
	}

	tmsLastEvent = 0;
9d001a2c:	af808020 	sw	zero,-32736(gp)
	tmsNextEvent = 0;

}
9d001a30:	03e00008 	jr	ra
9d001a34:	af80801c 	sw	zero,-32740(gp)

9d001a38 <_scheduleTask>:
	unsigned long	tmsCur;		//current system time
	unsigned long	tmsNxt;		//time for next event for this task
	unsigned long	dtmsNext;
	unsigned long	dtms;

	if (cntActiveTask == 0) {
9d001a38:	8f828018 	lw	v0,-32744(gp)
**	xxxN..C..........................................Lxx
**		current time and next time have wrapped: (N < L) && (C >= N)
*/

void
_scheduleTask() {
9d001a3c:	27bdffc8 	addiu	sp,sp,-56
9d001a40:	afbf0034 	sw	ra,52(sp)
9d001a44:	afb50030 	sw	s5,48(sp)
9d001a48:	afb4002c 	sw	s4,44(sp)
9d001a4c:	afb30028 	sw	s3,40(sp)
9d001a50:	afb20024 	sw	s2,36(sp)
9d001a54:	afb10020 	sw	s1,32(sp)
	unsigned long	tmsCur;		//current system time
	unsigned long	tmsNxt;		//time for next event for this task
	unsigned long	dtmsNext;
	unsigned long	dtms;

	if (cntActiveTask == 0) {
9d001a58:	1440000a 	bnez	v0,9d001a84 <_scheduleTask+0x4c>
9d001a5c:	afb0001c 	sw	s0,28(sp)

	/* Compute when the next event time will be by adding the event
	** time delta to the current time.
	*/
	tmsNextEvent = tmsCur + dtmsNext;
}
9d001a60:	8fbf0034 	lw	ra,52(sp)
9d001a64:	8fb50030 	lw	s5,48(sp)
9d001a68:	8fb4002c 	lw	s4,44(sp)
9d001a6c:	8fb30028 	lw	s3,40(sp)
9d001a70:	8fb20024 	lw	s2,36(sp)
9d001a74:	8fb10020 	lw	s1,32(sp)
9d001a78:	8fb0001c 	lw	s0,28(sp)
9d001a7c:	03e00008 	jr	ra
9d001a80:	27bd0038 	addiu	sp,sp,56

	if (cntActiveTask == 0) {
		return;
	}

	tmsCur = millis();
9d001a84:	0f40057f 	jal	9d0015fc <millis>
9d001a88:	00000000 	nop

	/* The system millisecond timer will overflow every 49.71 days. The complexity of
	** this conditional is to account for the cases where either the next event time has
	** wrapped around or the current time has wrapped around.
	*/
	if ( ((tmsNextEvent >= tmsLastEvent) &&
9d001a8c:	8f84801c 	lw	a0,-32740(gp)
9d001a90:	8f838020 	lw	v1,-32736(gp)
9d001a94:	0083282b 	sltu	a1,a0,v1
9d001a98:	14a00048 	bnez	a1,9d001bbc <_scheduleTask+0x184>
9d001a9c:	0043182b 	sltu	v1,v0,v1
9d001aa0:	14600004 	bnez	v1,9d001ab4 <_scheduleTask+0x7c>
9d001aa4:	3c10a000 	lui	s0,0xa000
				((tmsCur >= tmsLastEvent) && (tmsCur < tmsNextEvent))) ||
9d001aa8:	0044202b 	sltu	a0,v0,a0
9d001aac:	1480ffec 	bnez	a0,9d001a60 <_scheduleTask+0x28>
9d001ab0:	3c10a000 	lui	s0,0xa000
9d001ab4:	26100128 	addiu	s0,s0,296
**	xxxN..C..........................................Lxx
**		current time and next time have wrapped: (N < L) && (C >= N)
*/

void
_scheduleTask() {
9d001ab8:	2413ffff 	li	s3,-1
9d001abc:	00008821 	move	s1,zero

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
			(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
			rgtaskTable[id].fsFlags &= ~fsBusy;
9d001ac0:	2415fffe 	li	s5,-2

			/* Decrement the repeat count.
			*/
			if ((rgtaskTable[id].stTask > 0) &&
9d001ac4:	3414fffe 	li	s4,0xfffe
	** the table for all events that have elapsed and call their
	** associated functions, update their next event timers, and then
	** figure out when the next event time is.
	*/
	dtmsNext = 0xFFFFFFFF;
	for (id = 0; id < NUM_TASKS; id++) {
9d001ac8:	24120008 	li	s2,8
		/* If this isn't an active task, go to the next one.
		*/
		if ((rgtaskTable[id].pfnTask == 0) || 
9d001acc:	8e03fff0 	lw	v1,-16(s0)
9d001ad0:	5060002c 	beqzl	v1,9d001b84 <_scheduleTask+0x14c>
9d001ad4:	26310001 	addiu	s1,s1,1
9d001ad8:	96040000 	lhu	a0,0(s0)
9d001adc:	50800029 	beqzl	a0,9d001b84 <_scheduleTask+0x14c>
9d001ae0:	26310001 	addiu	s1,s1,1
		** occur if a user task function calls delay() or any other
		** function that causes _scheduleTask to be called recursively.
		** This prevents the task function from being called recursively
		** until the system crashes.
		*/
		if ((rgtaskTable[id].fsFlags & fsBusy) != 0) {
9d001ae4:	96040002 	lhu	a0,2(s0)
9d001ae8:	30840001 	andi	a0,a0,0x1
9d001aec:	54800025 	bnezl	a0,9d001b84 <_scheduleTask+0x14c>
9d001af0:	26310001 	addiu	s1,s1,1
			continue;
		}

		/* Check if this task's period has timed out.
		*/
		tmsNxt = rgtaskTable[id].tmsNext;
9d001af4:	8e04fff8 	lw	a0,-8(s0)
		if ( ((tmsNxt >= tmsLastEvent) && 
9d001af8:	8f858020 	lw	a1,-32736(gp)
9d001afc:	0085302b 	sltu	a2,a0,a1
9d001b00:	10c00032 	beqz	a2,9d001bcc <_scheduleTask+0x194>
9d001b04:	0044302b 	sltu	a2,v0,a0
						((tmsCur >= tmsNxt) || (tmsCur < tmsLastEvent))) ||
			 ((tmsNxt <  tmsLastEvent) && 
9d001b08:	54c0001b 	bnezl	a2,9d001b78 <_scheduleTask+0x140>
9d001b0c:	00822023 	subu	a0,a0,v0
						((tmsCur >= tmsNxt) && (tmsCur < tmsLastEvent))) ) {
9d001b10:	0045282b 	sltu	a1,v0,a1
9d001b14:	50a00018 	beqzl	a1,9d001b78 <_scheduleTask+0x140>
9d001b18:	00822023 	subu	a0,a0,v0
			*/
			rgtaskTable[id].tmsNext += rgtaskTable[id].tmsPeriod;

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
9d001b1c:	96060002 	lhu	a2,2(s0)
						((tmsCur >= tmsNxt) && (tmsCur < tmsLastEvent))) ) {

			/* This task event has timed out. Update the event time for the
			** next event on this task.
			*/
			rgtaskTable[id].tmsNext += rgtaskTable[id].tmsPeriod;
9d001b20:	8e07fff4 	lw	a3,-12(s0)

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
			(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
9d001b24:	8e05fffc 	lw	a1,-4(s0)
			*/
			rgtaskTable[id].tmsNext += rgtaskTable[id].tmsPeriod;

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
9d001b28:	34c60001 	ori	a2,a2,0x1
						((tmsCur >= tmsNxt) && (tmsCur < tmsLastEvent))) ) {

			/* This task event has timed out. Update the event time for the
			** next event on this task.
			*/
			rgtaskTable[id].tmsNext += rgtaskTable[id].tmsPeriod;
9d001b2c:	00e42021 	addu	a0,a3,a0
9d001b30:	ae04fff8 	sw	a0,-8(s0)

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
			(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
9d001b34:	afa20010 	sw	v0,16(sp)
9d001b38:	02202021 	move	a0,s1
9d001b3c:	0060f809 	jalr	v1
9d001b40:	a6060002 	sh	a2,2(s0)
			rgtaskTable[id].fsFlags &= ~fsBusy;

			/* Decrement the repeat count.
			*/
			if ((rgtaskTable[id].stTask > 0) &&
9d001b44:	96030000 	lhu	v1,0(s0)

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
			(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
			rgtaskTable[id].fsFlags &= ~fsBusy;
9d001b48:	96050002 	lhu	a1,2(s0)

			/* Decrement the repeat count.
			*/
			if ((rgtaskTable[id].stTask > 0) &&
9d001b4c:	8fa20010 	lw	v0,16(sp)
9d001b50:	2463ffff 	addiu	v1,v1,-1
9d001b54:	3063ffff 	andi	v1,v1,0xffff

			/* Call the event function.
			*/
			rgtaskTable[id].fsFlags |= fsBusy;
			(*rgtaskTable[id].pfnTask)(id, rgtaskTable[id].varTask);
			rgtaskTable[id].fsFlags &= ~fsBusy;
9d001b58:	00b52824 	and	a1,a1,s5

			/* Decrement the repeat count.
			*/
			if ((rgtaskTable[id].stTask > 0) &&
9d001b5c:	0074202b 	sltu	a0,v1,s4
9d001b60:	10800003 	beqz	a0,9d001b70 <_scheduleTask+0x138>
9d001b64:	a6050002 	sh	a1,2(s0)
				rgtaskTable[id].stTask -= 1;

				/* The task state counter has gone to 0. This task is now
				** disabled.
				*/
				if (rgtaskTable[id].stTask == 0) {
9d001b68:	1060001c 	beqz	v1,9d001bdc <_scheduleTask+0x1a4>
9d001b6c:	a6030000 	sh	v1,0(s0)
9d001b70:	8e04fff8 	lw	a0,-8(s0)
		}

		/* Compute delta of this event time from the current time and
		** remember it if it is less than the current delta.
		*/
		dtms = rgtaskTable[id].tmsNext - tmsCur;
9d001b74:	00822023 	subu	a0,a0,v0
		if (dtms < dtmsNext) {
9d001b78:	0093182b 	sltu	v1,a0,s3
9d001b7c:	0083980b 	movn	s3,a0,v1
	** the table for all events that have elapsed and call their
	** associated functions, update their next event timers, and then
	** figure out when the next event time is.
	*/
	dtmsNext = 0xFFFFFFFF;
	for (id = 0; id < NUM_TASKS; id++) {
9d001b80:	26310001 	addiu	s1,s1,1
9d001b84:	1632ffd1 	bne	s1,s2,9d001acc <_scheduleTask+0x94>
9d001b88:	26100014 	addiu	s0,s0,20

	/* Compute when the next event time will be by adding the event
	** time delta to the current time.
	*/
	tmsNextEvent = tmsCur + dtmsNext;
}
9d001b8c:	8fbf0034 	lw	ra,52(sp)
	tmsLastEvent = tmsCur;

	/* Compute when the next event time will be by adding the event
	** time delta to the current time.
	*/
	tmsNextEvent = tmsCur + dtmsNext;
9d001b90:	02629821 	addu	s3,s3,v0
9d001b94:	af93801c 	sw	s3,-32740(gp)
}
9d001b98:	8fb50030 	lw	s5,48(sp)
9d001b9c:	8fb4002c 	lw	s4,44(sp)
9d001ba0:	8fb30028 	lw	s3,40(sp)
9d001ba4:	8fb20024 	lw	s2,36(sp)
9d001ba8:	8fb10020 	lw	s1,32(sp)
9d001bac:	8fb0001c 	lw	s0,28(sp)
	}

	/* All done with event tasks. Update the last event time with
	** the current time.
	*/
	tmsLastEvent = tmsCur;
9d001bb0:	af828020 	sw	v0,-32736(gp)

	/* Compute when the next event time will be by adding the event
	** time delta to the current time.
	*/
	tmsNextEvent = tmsCur + dtmsNext;
}
9d001bb4:	03e00008 	jr	ra
9d001bb8:	27bd0038 	addiu	sp,sp,56
	** this conditional is to account for the cases where either the next event time has
	** wrapped around or the current time has wrapped around.
	*/
	if ( ((tmsNextEvent >= tmsLastEvent) &&
				((tmsCur >= tmsLastEvent) && (tmsCur < tmsNextEvent))) ||
		 ((tmsNextEvent < tmsLastEvent) &&
9d001bbc:	5460ffbb 	bnezl	v1,9d001aac <_scheduleTask+0x74>
9d001bc0:	0044202b 	sltu	a0,v0,a0

	/* Compute when the next event time will be by adding the event
	** time delta to the current time.
	*/
	tmsNextEvent = tmsCur + dtmsNext;
}
9d001bc4:	0b400699 	j	9d001a64 <_scheduleTask+0x2c>
9d001bc8:	8fbf0034 	lw	ra,52(sp)
		}

		/* Check if this task's period has timed out.
		*/
		tmsNxt = rgtaskTable[id].tmsNext;
		if ( ((tmsNxt >= tmsLastEvent) && 
9d001bcc:	50c0ffd4 	beqzl	a2,9d001b20 <_scheduleTask+0xe8>
9d001bd0:	96060002 	lhu	a2,2(s0)
						((tmsCur >= tmsNxt) || (tmsCur < tmsLastEvent))) ||
			 ((tmsNxt <  tmsLastEvent) && 
						((tmsCur >= tmsNxt) && (tmsCur < tmsLastEvent))) ) {
9d001bd4:	0b4006c5 	j	9d001b14 <_scheduleTask+0xdc>
9d001bd8:	0045282b 	sltu	a1,v0,a1
				/* The task state counter has gone to 0. This task is now
				** disabled.
				*/
				if (rgtaskTable[id].stTask == 0) {
					rgtaskTable[id].tmsNext = 0;
					cntActiveTask -= 1;
9d001bdc:	8f838018 	lw	v1,-32744(gp)

				/* The task state counter has gone to 0. This task is now
				** disabled.
				*/
				if (rgtaskTable[id].stTask == 0) {
					rgtaskTable[id].tmsNext = 0;
9d001be0:	ae00fff8 	sw	zero,-8(s0)
					cntActiveTask -= 1;
9d001be4:	2463ffff 	addiu	v1,v1,-1
					continue;
9d001be8:	0b4006e0 	j	9d001b80 <_scheduleTask+0x148>
9d001bec:	af838018 	sw	v1,-32744(gp)

9d001bf0 <initIntVector>:
*/
void initIntVector(void)
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    int i = 0;
    void * pvOrgIntVec = pImageHeader->pOrgVector0;
9d001bf0:	3c029d00 	lui	v0,0x9d00
9d001bf4:	24421fa8 	addiu	v0,v0,8104
9d001bf8:	88430043 	lwl	v1,67(v0)
9d001bfc:	8846004b 	lwl	a2,75(v0)
    {
        // If a compiler installed interrupt handler exits, pre-load it
        // and don't fool with the priority
        if(*((uint32_t *) pvOrgIntVec) != 0xFFFFFFFF)
        {
            _isr_primary_install[i] = (isrFunc) pvOrgIntVec;
9d001c00:	3c08a000 	lui	t0,0xa000
*/
void initIntVector(void)
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    int i = 0;
    void * pvOrgIntVec = pImageHeader->pOrgVector0;
9d001c04:	98430040 	lwr	v1,64(v0)
9d001c08:	98460048 	lwr	a2,72(v0)

    for(i=0; i<NUM_INT_VECTOR; i++)
    {
        // If a compiler installed interrupt handler exits, pre-load it
        // and don't fool with the priority
        if(*((uint32_t *) pvOrgIntVec) != 0xFFFFFFFF)
9d001c0c:	2409ffff 	li	t1,-1
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    int i = 0;
    void * pvOrgIntVec = pImageHeader->pOrgVector0;

    for(i=0; i<NUM_INT_VECTOR; i++)
9d001c10:	00001021 	move	v0,zero
    {
        // If a compiler installed interrupt handler exits, pre-load it
        // and don't fool with the priority
        if(*((uint32_t *) pvOrgIntVec) != 0xFFFFFFFF)
        {
            _isr_primary_install[i] = (isrFunc) pvOrgIntVec;
9d001c14:	25080020 	addiu	t0,t0,32
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    int i = 0;
    void * pvOrgIntVec = pImageHeader->pOrgVector0;

    for(i=0; i<NUM_INT_VECTOR; i++)
9d001c18:	2407002d 	li	a3,45
    {
        // If a compiler installed interrupt handler exits, pre-load it
        // and don't fool with the priority
        if(*((uint32_t *) pvOrgIntVec) != 0xFFFFFFFF)
9d001c1c:	8c640000 	lw	a0,0(v1)
        {
            _isr_primary_install[i] = (isrFunc) pvOrgIntVec;
9d001c20:	00022880 	sll	a1,v0,0x2
9d001c24:	00a82821 	addu	a1,a1,t0

    for(i=0; i<NUM_INT_VECTOR; i++)
    {
        // If a compiler installed interrupt handler exits, pre-load it
        // and don't fool with the priority
        if(*((uint32_t *) pvOrgIntVec) != 0xFFFFFFFF)
9d001c28:	10890002 	beq	a0,t1,9d001c34 <initIntVector+0x44>
9d001c2c:	24420001 	addiu	v0,v0,1
        {
            _isr_primary_install[i] = (isrFunc) pvOrgIntVec;
9d001c30:	aca30000 	sw	v1,0(a1)
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    int i = 0;
    void * pvOrgIntVec = pImageHeader->pOrgVector0;

    for(i=0; i<NUM_INT_VECTOR; i++)
9d001c34:	1447fff9 	bne	v0,a3,9d001c1c <initIntVector+0x2c>
9d001c38:	00661821 	addu	v1,v1,a2
9d001c3c:	03e00008 	jr	ra
9d001c40:	00000000 	nop

9d001c44 <setIntVector>:
isrFunc setIntVector(int vec, isrFunc func)
{
    const IMAGE_HEADER_INFO * pImageHeader = getImageHeaderInfoStructure();
    isrFunc t = 0;

    if (vec < NUM_INT_VECTOR)
9d001c44:	2883002d 	slti	v1,a0,45
9d001c48:	10600007 	beqz	v1,9d001c68 <setIntVector+0x24>
9d001c4c:	00001021 	move	v0,zero
    {
        t = _isr_primary_install[vec];
9d001c50:	3c02a000 	lui	v0,0xa000
9d001c54:	24420020 	addiu	v0,v0,32
9d001c58:	00042080 	sll	a0,a0,0x2
9d001c5c:	00822021 	addu	a0,a0,v0
9d001c60:	8c820000 	lw	v0,0(a0)
        _isr_primary_install[vec] = func;       
9d001c64:	ac850000 	sw	a1,0(a0)
    }

    return t;
}
9d001c68:	03e00008 	jr	ra
9d001c6c:	00000000 	nop

9d001c70 <setIntEnable>:
uint32_t setIntEnable(int irq)
{
	p32_regset *	iec;
	uint32_t		st;

	iec = ((p32_regset *)&IEC0) + (irq / 32);
9d001c70:	28830000 	slti	v1,a0,0
9d001c74:	2482001f 	addiu	v0,a0,31
9d001c78:	0083100a 	movz	v0,a0,v1
9d001c7c:	00021143 	sra	v0,v0,0x5
9d001c80:	3c03bf88 	lui	v1,0xbf88
9d001c84:	00021100 	sll	v0,v0,0x4
	st = iec->reg;
	iec->set = 1 << (irq % 32);
9d001c88:	24050001 	li	a1,1
uint32_t setIntEnable(int irq)
{
	p32_regset *	iec;
	uint32_t		st;

	iec = ((p32_regset *)&IEC0) + (irq / 32);
9d001c8c:	24631060 	addiu	v1,v1,4192
9d001c90:	00621821 	addu	v1,v1,v0
	st = iec->reg;
	iec->set = 1 << (irq % 32);
9d001c94:	00852004 	sllv	a0,a1,a0
{
	p32_regset *	iec;
	uint32_t		st;

	iec = ((p32_regset *)&IEC0) + (irq / 32);
	st = iec->reg;
9d001c98:	8c620000 	lw	v0,0(v1)
	iec->set = 1 << (irq % 32);
9d001c9c:	ac640008 	sw	a0,8(v1)
	return st;
}
9d001ca0:	03e00008 	jr	ra
9d001ca4:	00000000 	nop

9d001ca8 <setIntPriority>:
	ipc = ((p32_regset *)&IPC0) + (vec / 4);

	/* Compute the number of bit positions to shift to get to the
	** correct position for the priority bits for this vector.
	*/
	bn = 8 * (vec % 4);
9d001ca8:	000417c3 	sra	v0,a0,0x1f
9d001cac:	00021782 	srl	v0,v0,0x1e
9d001cb0:	00821821 	addu	v1,a0,v0
	int				bn;

	/* Compute the address of the interrupt priority control register used
	** by this interrupt vector
	*/
	ipc = ((p32_regset *)&IPC0) + (vec / 4);
9d001cb4:	24870003 	addiu	a3,a0,3
9d001cb8:	28880000 	slti	t0,a0,0

	/* Compute the number of bit positions to shift to get to the
	** correct position for the priority bits for this vector.
	*/
	bn = 8 * (vec % 4);
9d001cbc:	30630003 	andi	v1,v1,0x3
	int				bn;

	/* Compute the address of the interrupt priority control register used
	** by this interrupt vector
	*/
	ipc = ((p32_regset *)&IPC0) + (vec / 4);
9d001cc0:	00e8200b 	movn	a0,a3,t0

	/* Compute the number of bit positions to shift to get to the
	** correct position for the priority bits for this vector.
	*/
	bn = 8 * (vec % 4);
9d001cc4:	00621023 	subu	v0,v1,v0
	int				bn;

	/* Compute the address of the interrupt priority control register used
	** by this interrupt vector
	*/
	ipc = ((p32_regset *)&IPC0) + (vec / 4);
9d001cc8:	00042083 	sra	a0,a0,0x2
9d001ccc:	3c03bf88 	lui	v1,0xbf88
9d001cd0:	24631090 	addiu	v1,v1,4240
	bn = 8 * (vec % 4);

	/* Set the interrupt privilege level and sub-privilege level
	*/
	ipc->clr = (0x1F << bn);
	ipc->set = ((ipl << 2) + spl) << bn;
9d001cd4:	00052880 	sll	a1,a1,0x2
	int				bn;

	/* Compute the address of the interrupt priority control register used
	** by this interrupt vector
	*/
	ipc = ((p32_regset *)&IPC0) + (vec / 4);
9d001cd8:	00042100 	sll	a0,a0,0x4
9d001cdc:	00642021 	addu	a0,v1,a0

	/* Compute the number of bit positions to shift to get to the
	** correct position for the priority bits for this vector.
	*/
	bn = 8 * (vec % 4);
9d001ce0:	000210c0 	sll	v0,v0,0x3

	/* Set the interrupt privilege level and sub-privilege level
	*/
	ipc->clr = (0x1F << bn);
	ipc->set = ((ipl << 2) + spl) << bn;
9d001ce4:	00c52821 	addu	a1,a2,a1
	*/
	bn = 8 * (vec % 4);

	/* Set the interrupt privilege level and sub-privilege level
	*/
	ipc->clr = (0x1F << bn);
9d001ce8:	2403001f 	li	v1,31
9d001cec:	00431804 	sllv	v1,v1,v0
	ipc->set = ((ipl << 2) + spl) << bn;
9d001cf0:	00451004 	sllv	v0,a1,v0
	*/
	bn = 8 * (vec % 4);

	/* Set the interrupt privilege level and sub-privilege level
	*/
	ipc->clr = (0x1F << bn);
9d001cf4:	ac830004 	sw	v1,4(a0)
	ipc->set = ((ipl << 2) + spl) << bn;
9d001cf8:	ac820008 	sw	v0,8(a0)
}
9d001cfc:	03e00008 	jr	ra
9d001d00:	00000000 	nop

9d001d04 <getPeripheralClock>:
uint32_t getPeripheralClock()
{
	uint32_t	clkPb;

    clkPb = F_CPU;
    clkPb >>= OSCCONbits.PBDIV;
9d001d04:	3c02bf81 	lui	v0,0xbf81
9d001d08:	8c43f000 	lw	v1,-4096(v0)

    return clkPb;

}
9d001d0c:	3c0204c4 	lui	v0,0x4c4
9d001d10:	3442b400 	ori	v0,v0,0xb400
uint32_t getPeripheralClock()
{
	uint32_t	clkPb;

    clkPb = F_CPU;
    clkPb >>= OSCCONbits.PBDIV;
9d001d14:	7c630cc0 	ext	v1,v1,0x13,0x2

    return clkPb;

}
9d001d18:	03e00008 	jr	ra
9d001d1c:	00621006 	srlv	v0,v0,v1

9d001d20 <_configSystem>:

uint32_t __attribute__((nomips16)) disableInterrupts(void)
{
    uint32_t status = 0;

    asm volatile("di    %0" : "=r"(status));
9d001d20:	41686000 	di	t0

	stInt = disableInterrupts();

	/* Disable wait states in data ram.
	*/
	BMXCONCLR = (1 << _BMXCON_BMXWSDRM_POSITION);
9d001d24:	24030040 	li	v1,64
9d001d28:	3c02bf88 	lui	v0,0xbf88
9d001d2c:	ac432004 	sw	v1,8196(v0)

#ifdef _PCACHE

	stCache = CHECON;
9d001d30:	3c07bf88 	lui	a3,0xbf88
9d001d34:	8ce94000 	lw	t1,16384(a3)
    stCache |= (3 << _CHECON_PREFEN_POSITION);

	/* Turn on caching for KSEG0
	*/
	asm("mfc0 %0,$16,0" :  "=r"(tmp));
	tmp = (tmp & ~7) | 3;
9d001d38:	2402fff8 	li	v0,-8
	*/
    stCache |= (3 << _CHECON_PREFEN_POSITION);

	/* Turn on caching for KSEG0
	*/
	asm("mfc0 %0,$16,0" :  "=r"(tmp));
9d001d3c:	40038000 	mfc0	v1,c0_config
	tmp = (tmp & ~7) | 3;
9d001d40:	00621024 	and	v0,v1,v0
	stCache = CHECON;

	/* Configure predictive prefetch caching for both cached and
	** non-cached memory regions.
	*/
    stCache |= (3 << _CHECON_PREFEN_POSITION);
9d001d44:	35290030 	ori	t1,t1,0x30

	/* Turn on caching for KSEG0
	*/
	asm("mfc0 %0,$16,0" :  "=r"(tmp));
	tmp = (tmp & ~7) | 3;
9d001d48:	34420003 	ori	v0,v0,0x3
	asm("mtc0 %0,$16,0" :: "r" (tmp));
9d001d4c:	40828000 	mtc0	v0,c0_config

	/* Configure the number of wait states in the program flash
	*/
    wait = 0;

    while(clk > FLASH_SPEED_HZ)
9d001d50:	3c0501c9 	lui	a1,0x1c9
9d001d54:	34a5c381 	ori	a1,a1,0xc381
9d001d58:	0085182b 	sltu	v1,a0,a1
9d001d5c:	14600007 	bnez	v1,9d001d7c <_configSystem+0x5c>
9d001d60:	00001021 	move	v0,zero
    {
        wait += 1;
        clk -= FLASH_SPEED_HZ;
9d001d64:	3c06fe36 	lui	a2,0xfe36
9d001d68:	24c63c80 	addiu	a2,a2,15488
9d001d6c:	00862021 	addu	a0,a0,a2

	/* Configure the number of wait states in the program flash
	*/
    wait = 0;

    while(clk > FLASH_SPEED_HZ)
9d001d70:	0085182b 	sltu	v1,a0,a1
9d001d74:	1060fffd 	beqz	v1,9d001d6c <_configSystem+0x4c>
9d001d78:	24420001 	addiu	v0,v0,1
    {
        wait += 1;
        clk -= FLASH_SPEED_HZ;
    }

    stCache &= ~_CHECON_PFMWS_MASK;
9d001d7c:	2404fff8 	li	a0,-8
9d001d80:	01241824 	and	v1,t1,a0
	stCache |= (wait << _CHECON_PFMWS_POSITION);
9d001d84:	00431025 	or	v0,v0,v1
**		enableInterrupts() or disableInterrupts().
*/

void __attribute__((nomips16))  restoreInterrupts(uint32_t st)
{
    if (st & 0x00000001)
9d001d88:	31030001 	andi	v1,t0,0x1
    }

    stCache &= ~_CHECON_PFMWS_MASK;
	stCache |= (wait << _CHECON_PFMWS_POSITION);

	CHECON = stCache;
9d001d8c:	14600003 	bnez	v1,9d001d9c <_configSystem+0x7c>
**		enableInterrupts() or disableInterrupts().
*/

void __attribute__((nomips16))  restoreInterrupts(uint32_t st)
{
    if (st & 0x00000001)
9d001d90:	ace24000 	sw	v0,16384(a3)
	{
        asm volatile("ei");
	}
    else
	{
        asm volatile("di");
9d001d94:	03e00008 	jr	ra
9d001d98:	41606000 	di

void __attribute__((nomips16))  restoreInterrupts(uint32_t st)
{
    if (st & 0x00000001)
	{
        asm volatile("ei");
9d001d9c:	03e00008 	jr	ra
9d001da0:	41606020 	ei

9d001da4 <_enableMultiVectorInterrupts>:
    unsigned int val;

    /* Set the CP0 bit so that interrupt exceptions use the
	** special interrupt vector and not the general exception vector.
	*/
    asm volatile("mfc0   %0,$13" : "=r"(val));
9d001da4:	40036800 	mfc0	v1,c0_cause
    val |= 0x00800000;
9d001da8:	3c020080 	lui	v0,0x80
9d001dac:	00621025 	or	v0,v1,v0
    asm volatile("mtc0   %0,$13" : "+r"(val));
9d001db0:	40826800 	mtc0	v0,c0_cause

	/* Turn on multi-vectored interrupts.
	*/
    INTCONSET = _INTCON_MVEC_MASK;
9d001db4:	24031000 	li	v1,4096
9d001db8:	3c02bf88 	lui	v0,0xbf88
9d001dbc:	ac431008 	sw	v1,4104(v0)

uint32_t __attribute__((nomips16))  enableInterrupts(void)
{
    uint32_t status = 0;

    asm volatile("ei    %0" : "=r"(status));
9d001dc0:	03e00008 	jr	ra

    /* Enable interrupts.
	*/
    enableInterrupts();

}
9d001dc4:	41626020 	ei	v0

9d001dc8 <_initCoreTimer>:

void __attribute__((nomips16)) _initCoreTimer(uint32_t prd)
{
	/* Clear the core timer counter
	*/
    asm volatile("mtc0   $0,$9");
9d001dc8:	40804800 	mtc0	zero,c0_count

    /* Store the requested value in the compare register
	*/
    asm volatile("mtc0   %0,$11" : "+r"(prd));
9d001dcc:	03e00008 	jr	ra
}
9d001dd0:	40845800 	mtc0	a0,c0_compare

9d001dd4 <main>:
__attribute__((section(".comment"))) void (*__use_force_isr_install)(void) = &__use_isr_install;
}

//************************************************************************
int main(void)
{
9d001dd4:	27bdffe8 	addiu	sp,sp,-24
9d001dd8:	afbf0014 	sw	ra,20(sp)
	init();
9d001ddc:	0f400598 	jal	9d001660 <init>
9d001de0:	00000000 	nop

	setup();
9d001de4:	0f4004ca 	jal	9d001328 <setup>
9d001de8:	00000000 	nop

	while (1)
	{
		_scheduleTask();
9d001dec:	0f40068e 	jal	9d001a38 <_scheduleTask>
9d001df0:	00000000 	nop
		loop();
9d001df4:	0f4004cd 	jal	9d001334 <loop>
9d001df8:	00000000 	nop
9d001dfc:	0b40077b 	j	9d001dec <main+0x18>
9d001e00:	00000000 	nop

9d001e04 <_general_exception_context>:
9d001e04:	27bdffa8 	addiu	sp,sp,-88
9d001e08:	afa10004 	sw	at,4(sp)
9d001e0c:	afa20008 	sw	v0,8(sp)
9d001e10:	afa3000c 	sw	v1,12(sp)
9d001e14:	afa40010 	sw	a0,16(sp)
9d001e18:	afa50014 	sw	a1,20(sp)
9d001e1c:	afa60018 	sw	a2,24(sp)
9d001e20:	afa7001c 	sw	a3,28(sp)
9d001e24:	afa80020 	sw	t0,32(sp)
9d001e28:	afa90024 	sw	t1,36(sp)
9d001e2c:	afaa0028 	sw	t2,40(sp)
9d001e30:	afab002c 	sw	t3,44(sp)
9d001e34:	afac0030 	sw	t4,48(sp)
9d001e38:	afad0034 	sw	t5,52(sp)
9d001e3c:	afae0038 	sw	t6,56(sp)
9d001e40:	afaf003c 	sw	t7,60(sp)
9d001e44:	afb80040 	sw	t8,64(sp)
9d001e48:	afb90044 	sw	t9,68(sp)
9d001e4c:	afbf0048 	sw	ra,72(sp)
9d001e50:	00004012 	mflo	t0
9d001e54:	afa8004c 	sw	t0,76(sp)
9d001e58:	00004010 	mfhi	t0
9d001e5c:	afa80050 	sw	t0,80(sp)
9d001e60:	40046800 	mfc0	a0,c0_cause
9d001e64:	40056000 	mfc0	a1,c0_status
9d001e68:	0f4007b5 	jal	9d001ed4 <_general_exception_handler>
9d001e6c:	00000000 	nop
9d001e70:	8fa80050 	lw	t0,80(sp)
9d001e74:	01000011 	mthi	t0
9d001e78:	8fa8004c 	lw	t0,76(sp)
9d001e7c:	01000013 	mtlo	t0
9d001e80:	8fa10004 	lw	at,4(sp)
9d001e84:	8fa20008 	lw	v0,8(sp)
9d001e88:	8fa3000c 	lw	v1,12(sp)
9d001e8c:	8fa40010 	lw	a0,16(sp)
9d001e90:	8fa50014 	lw	a1,20(sp)
9d001e94:	8fa60018 	lw	a2,24(sp)
9d001e98:	8fa7001c 	lw	a3,28(sp)
9d001e9c:	8fa80020 	lw	t0,32(sp)
9d001ea0:	8fa90024 	lw	t1,36(sp)
9d001ea4:	8faa0028 	lw	t2,40(sp)
9d001ea8:	8fab002c 	lw	t3,44(sp)
9d001eac:	8fac0030 	lw	t4,48(sp)
9d001eb0:	8fad0034 	lw	t5,52(sp)
9d001eb4:	8fae0038 	lw	t6,56(sp)
9d001eb8:	8faf003c 	lw	t7,60(sp)
9d001ebc:	8fb80040 	lw	t8,64(sp)
9d001ec0:	8fb90044 	lw	t9,68(sp)
9d001ec4:	8fbf0048 	lw	ra,72(sp)
9d001ec8:	27bd0058 	addiu	sp,sp,88
9d001ecc:	000000c0 	ehb
9d001ed0:	42000018 	eret

9d001ed4 <_general_exception_handler>:
9d001ed4:	0b4007b5 	j	9d001ed4 <_general_exception_handler>
9d001ed8:	00000000 	nop

9d001edc <_on_reset>:
9d001edc:	03e00008 	jr	ra
9d001ee0:	00000000 	nop

9d001ee4 <_on_bootstrap>:
9d001ee4:	03e00008 	jr	ra
9d001ee8:	00000000 	nop

9d001eec <_nmi_handler>:
9d001eec:	401a6000 	mfc0	k0,c0_status
9d001ef0:	3c1bffbf 	lui	k1,0xffbf
9d001ef4:	377bffff 	ori	k1,k1,0xffff
9d001ef8:	035bd024 	and	k0,k0,k1
9d001efc:	409a6000 	mtc0	k0,c0_status
9d001f00:	42000018 	eret

9d001f04 <__do_global_ctors_aux>:
9d001f04:	3c029d00 	lui	v0,0x9d00
9d001f08:	8c421f98 	lw	v0,8088(v0)
9d001f0c:	27bdffe0 	addiu	sp,sp,-32
9d001f10:	2403ffff 	li	v1,-1
9d001f14:	afbf001c 	sw	ra,28(sp)
9d001f18:	afb10018 	sw	s1,24(sp)
9d001f1c:	10430009 	beq	v0,v1,9d001f44 <__do_global_ctors_aux+0x40>
9d001f20:	afb00014 	sw	s0,20(sp)
9d001f24:	3c119d00 	lui	s1,0x9d00
9d001f28:	26311f98 	addiu	s1,s1,8088
9d001f2c:	2410ffff 	li	s0,-1
9d001f30:	0040f809 	jalr	v0
9d001f34:	2631fffc 	addiu	s1,s1,-4
9d001f38:	8e220000 	lw	v0,0(s1)
9d001f3c:	1450fffc 	bne	v0,s0,9d001f30 <__do_global_ctors_aux+0x2c>
9d001f40:	00000000 	nop
9d001f44:	8fbf001c 	lw	ra,28(sp)
9d001f48:	8fb10018 	lw	s1,24(sp)
9d001f4c:	8fb00014 	lw	s0,20(sp)
9d001f50:	03e00008 	jr	ra
9d001f54:	27bd0020 	addiu	sp,sp,32

Disassembly of section .init:

9d001f58 <_init>:
9d001f58:	27bdffe0 	addiu	sp,sp,-32
9d001f5c:	afbf0014 	sw	ra,20(sp)
9d001f60:	0f4004b3 	jal	9d0012cc <frame_dummy>
9d001f64:	00000000 	nop
9d001f68:	0f4007c1 	jal	9d001f04 <__do_global_ctors_aux>
9d001f6c:	00000000 	nop
9d001f70:	8fbf0014 	lw	ra,20(sp)
9d001f74:	03e00008 	jr	ra
9d001f78:	27bd0020 	addiu	sp,sp,32

Disassembly of section .fini:

9d001f7c <_fini>:
9d001f7c:	27bdffe0 	addiu	sp,sp,-32
9d001f80:	afbf0014 	sw	ra,20(sp)
9d001f84:	0f400484 	jal	9d001210 <__do_global_dtors_aux>
9d001f88:	00000000 	nop
9d001f8c:	8fbf0014 	lw	ra,20(sp)
9d001f90:	03e00008 	jr	ra
9d001f94:	27bd0020 	addiu	sp,sp,32
