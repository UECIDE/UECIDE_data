/home/matt/.uecide/compilers/avr-sam-gcc/bin/arm-none-eabi-objdump -h -S /tmp/build-e1d6b0d0-50aa-46ea-9d32-e5cd507a066a/DigitalReadSerial.elf 

/tmp/build-e1d6b0d0-50aa-46ea-9d32-e5cd507a066a/DigitalReadSerial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002890  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000050  20070000  00082890  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004a0  20070050  000828e0  00010050  2**2
                  ALLOC
  3 .ARM.attributes 00000025  00000000  00000000  00010050  2**0
                  CONTENTS, READONLY
  4 .comment      00000386  00000000  00000000  00010075  2**0
                  CONTENTS, READONLY
  5 .debug_abbrev 00002b6b  00000000  00000000  000103fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010b15  00000000  00000000  00012f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003e24  00000000  00000000  00023a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000046d5  00000000  00000000  0002789f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00001501  00000000  00000000  0002bf74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000968  00000000  00000000  0002d475  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001188  00000000  00000000  0002dddd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00003bf5  00000000  00000000  0002ef65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002974  00000000  00000000  00032b5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20088000 	.word	0x20088000
   80004:	00081565 	.word	0x00081565
   80008:	0008018b 	.word	0x0008018b
   8000c:	0008018b 	.word	0x0008018b
   80010:	0008018b 	.word	0x0008018b
   80014:	0008018b 	.word	0x0008018b
   80018:	0008018b 	.word	0x0008018b
	...
   8002c:	000801a7 	.word	0x000801a7
   80030:	0008018b 	.word	0x0008018b
   80034:	00000000 	.word	0x00000000
   80038:	000801a3 	.word	0x000801a3
   8003c:	0008018d 	.word	0x0008018d
   80040:	0008018b 	.word	0x0008018b
   80044:	0008018b 	.word	0x0008018b
   80048:	0008018b 	.word	0x0008018b
   8004c:	0008018b 	.word	0x0008018b
   80050:	0008018b 	.word	0x0008018b
   80054:	0008018b 	.word	0x0008018b
   80058:	0008018b 	.word	0x0008018b
   8005c:	0008018b 	.word	0x0008018b
   80060:	00080f2d 	.word	0x00080f2d
   80064:	0008018b 	.word	0x0008018b
   80068:	00000000 	.word	0x00000000
   8006c:	0008018b 	.word	0x0008018b
   80070:	0008018b 	.word	0x0008018b
   80074:	0008018b 	.word	0x0008018b
   80078:	0008018b 	.word	0x0008018b
	...
   80084:	00080f21 	.word	0x00080f21
   80088:	00080f15 	.word	0x00080f15
   8008c:	0008018b 	.word	0x0008018b
   80090:	00080f09 	.word	0x00080f09
   80094:	0008018b 	.word	0x0008018b
   80098:	0008018b 	.word	0x0008018b
   8009c:	0008018b 	.word	0x0008018b
   800a0:	0008018b 	.word	0x0008018b
   800a4:	00000000 	.word	0x00000000
   800a8:	0008018b 	.word	0x0008018b
   800ac:	0008018b 	.word	0x0008018b
   800b0:	0008018b 	.word	0x0008018b
   800b4:	0008018b 	.word	0x0008018b
   800b8:	0008018b 	.word	0x0008018b
   800bc:	0008018b 	.word	0x0008018b
   800c0:	0008018b 	.word	0x0008018b
   800c4:	0008018b 	.word	0x0008018b
   800c8:	0008018b 	.word	0x0008018b
   800cc:	0008018b 	.word	0x0008018b
   800d0:	0008018b 	.word	0x0008018b
   800d4:	0008018b 	.word	0x0008018b
   800d8:	0008018b 	.word	0x0008018b
   800dc:	0008018b 	.word	0x0008018b
   800e0:	00081a0d 	.word	0x00081a0d
   800e4:	0008018b 	.word	0x0008018b
   800e8:	0008018b 	.word	0x0008018b
   800ec:	0008018b 	.word	0x0008018b
   800f0:	0008018b 	.word	0x0008018b

000800f4 <__do_global_dtors_aux>:
   800f4:	f240 0350 	movw	r3, #80	; 0x50
   800f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   800fc:	781a      	ldrb	r2, [r3, #0]
   800fe:	b90a      	cbnz	r2, 80104 <__do_global_dtors_aux+0x10>
   80100:	2001      	movs	r0, #1
   80102:	7018      	strb	r0, [r3, #0]
   80104:	4770      	bx	lr
   80106:	bf00      	nop

00080108 <frame_dummy>:
   80108:	f642 0090 	movw	r0, #10384	; 0x2890
   8010c:	f2c0 0008 	movt	r0, #8
   80110:	b508      	push	{r3, lr}
   80112:	6803      	ldr	r3, [r0, #0]
   80114:	b12b      	cbz	r3, 80122 <frame_dummy+0x1a>
   80116:	f240 0300 	movw	r3, #0
   8011a:	f2c0 0300 	movt	r3, #0
   8011e:	b103      	cbz	r3, 80122 <frame_dummy+0x1a>
   80120:	4798      	blx	r3
   80122:	bd08      	pop	{r3, pc}

00080124 <loop>:
   80124:	4b07      	ldr	r3, [pc, #28]	; (80144 <loop+0x20>)
   80126:	b510      	push	{r4, lr}
   80128:	6818      	ldr	r0, [r3, #0]
   8012a:	f000 f83f 	bl	801ac <digitalRead>
   8012e:	220a      	movs	r2, #10
   80130:	4601      	mov	r1, r0
   80132:	4805      	ldr	r0, [pc, #20]	; (80148 <loop+0x24>)
   80134:	f000 f920 	bl	80378 <_ZN5Print7printlnEii>
   80138:	2001      	movs	r0, #1
   8013a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8013e:	f000 b817 	b.w	80170 <delay>
   80142:	bf00      	nop
   80144:	20070034 	.word	0x20070034
   80148:	20070088 	.word	0x20070088

0008014c <setup>:
   8014c:	b510      	push	{r4, lr}
   8014e:	4806      	ldr	r0, [pc, #24]	; (80168 <setup+0x1c>)
   80150:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   80154:	f000 f98e 	bl	80474 <_ZN9UARTClass5beginEm>
   80158:	4b04      	ldr	r3, [pc, #16]	; (8016c <setup+0x20>)
   8015a:	2100      	movs	r1, #0
   8015c:	6818      	ldr	r0, [r3, #0]
   8015e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80162:	f000 b85b 	b.w	8021c <pinMode>
   80166:	bf00      	nop
   80168:	20070088 	.word	0x20070088
   8016c:	20070034 	.word	0x20070034

00080170 <delay>:
//     return count * 1000 + (SysTick->LOAD + 1 - ticks) / (SystemCoreClock/1000000) ;
// }


void delay( uint32_t ms )
{
   80170:	b510      	push	{r4, lr}
   80172:	4604      	mov	r4, r0
    uint32_t end = GetTickCount() + ms;
   80174:	f001 f99e 	bl	814b4 <GetTickCount>
   80178:	1904      	adds	r4, r0, r4
    while (GetTickCount() < end)
   8017a:	e001      	b.n	80180 <delay+0x10>
    	yield();
   8017c:	f000 ff2c 	bl	80fd8 <yield>


void delay( uint32_t ms )
{
    uint32_t end = GetTickCount() + ms;
    while (GetTickCount() < end)
   80180:	f001 f998 	bl	814b4 <GetTickCount>
   80184:	42a0      	cmp	r0, r4
   80186:	d3f9      	bcc.n	8017c <delay+0xc>
    	yield();
}
   80188:	bd10      	pop	{r4, pc}

0008018a <ADC_Handler>:

#ifdef __cplusplus
extern "C" {
#endif

static void __halt() {
   8018a:	e7fe      	b.n	8018a <ADC_Handler>

0008018c <SysTick_Handler>:
void DebugMon_Handler  (void) __attribute__ ((weak, alias("__halt")));
void SVC_Handler       (void) { svcHook(); }
void PendSV_Handler    (void) {	pendSVHook(); }

void SysTick_Handler(void)
{
   8018c:	b510      	push	{r4, lr}
	if (sysTickHook())
   8018e:	f000 ff24 	bl	80fda <sysTickHook>
   80192:	b928      	cbnz	r0, 801a0 <SysTick_Handler+0x14>
		return;

	tickReset();
   80194:	f000 f908 	bl	803a8 <tickReset>

	// Increment tick count each ms
	TimeTick_Increment();
}
   80198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return;

	tickReset();

	// Increment tick count each ms
	TimeTick_Increment();
   8019c:	f001 b982 	b.w	814a4 <TimeTick_Increment>
   801a0:	bd10      	pop	{r4, pc}

000801a2 <PendSV_Handler>:
void MemManage_Handler (void) __attribute__ ((weak, alias("__halt")));
void BusFault_Handler  (void) __attribute__ ((weak, alias("__halt")));
void UsageFault_Handler(void) __attribute__ ((weak, alias("__halt")));
void DebugMon_Handler  (void) __attribute__ ((weak, alias("__halt")));
void SVC_Handler       (void) { svcHook(); }
void PendSV_Handler    (void) {	pendSVHook(); }
   801a2:	f000 bf1c 	b.w	80fde <pendSVHook>

000801a6 <SVC_Handler>:
void HardFault_Handler (void) __attribute__ ((weak, alias("__halt")));
void MemManage_Handler (void) __attribute__ ((weak, alias("__halt")));
void BusFault_Handler  (void) __attribute__ ((weak, alias("__halt")));
void UsageFault_Handler(void) __attribute__ ((weak, alias("__halt")));
void DebugMon_Handler  (void) __attribute__ ((weak, alias("__halt")));
void SVC_Handler       (void) { svcHook(); }
   801a6:	f000 bf1a 	b.w	80fde <pendSVHook>
	...

000801ac <digitalRead>:
    PIO_SetOutput( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal, 0, PIO_PULLUP ) ;
  }
}

extern int digitalRead( uint32_t ulPin )
{
   801ac:	b508      	push	{r3, lr}
	if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
   801ae:	231c      	movs	r3, #28
   801b0:	fb03 f100 	mul.w	r1, r3, r0
   801b4:	4a06      	ldr	r2, [pc, #24]	; (801d0 <digitalRead+0x24>)
   801b6:	188b      	adds	r3, r1, r2
   801b8:	7b18      	ldrb	r0, [r3, #12]
   801ba:	b140      	cbz	r0, 801ce <digitalRead+0x22>
    {
        return LOW ;
    }

	if ( PIO_Get( g_APinDescription[ulPin].pPort, PIO_INPUT, g_APinDescription[ulPin].ulPin ) == 1 )
   801bc:	5888      	ldr	r0, [r1, r2]
   801be:	2103      	movs	r1, #3
   801c0:	685a      	ldr	r2, [r3, #4]
   801c2:	f001 f868 	bl	81296 <PIO_Get>
   801c6:	2801      	cmp	r0, #1
   801c8:	bf14      	ite	ne
   801ca:	2000      	movne	r0, #0
   801cc:	2001      	moveq	r0, #1
    {
        return HIGH ;
    }

	return LOW ;
}
   801ce:	bd08      	pop	{r3, pc}
   801d0:	00081d94 	.word	0x00081d94

000801d4 <digitalWrite>:
}

extern void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  /* Handle */
	if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
   801d4:	221c      	movs	r2, #28
   801d6:	4342      	muls	r2, r0
   801d8:	4b0f      	ldr	r3, [pc, #60]	; (80218 <digitalWrite+0x44>)
        break ;
    }
}

extern void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
   801da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   801dc:	460e      	mov	r6, r1
  /* Handle */
	if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
   801de:	18d1      	adds	r1, r2, r3
   801e0:	7b08      	ldrb	r0, [r1, #12]
   801e2:	b1b0      	cbz	r0, 80212 <digitalWrite+0x3e>
  {
    return ;
  }

  if ( PIO_GetOutputDataStatus( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin ) == 0 )
   801e4:	58d5      	ldr	r5, [r2, r3]
   801e6:	684c      	ldr	r4, [r1, #4]
   801e8:	4628      	mov	r0, r5
   801ea:	4621      	mov	r1, r4
   801ec:	f001 f8ea 	bl	813c4 <PIO_GetOutputDataStatus>
   801f0:	b938      	cbnz	r0, 80202 <digitalWrite+0x2e>
  {
    PIO_PullUp( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal ) ;
   801f2:	4628      	mov	r0, r5
   801f4:	4621      	mov	r1, r4
   801f6:	4632      	mov	r2, r6
  }
  else
  {
    PIO_SetOutput( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal, 0, PIO_PULLUP ) ;
  }
}
   801f8:	b002      	add	sp, #8
   801fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return ;
  }

  if ( PIO_GetOutputDataStatus( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin ) == 0 )
  {
    PIO_PullUp( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal ) ;
   801fe:	f001 b845 	b.w	8128c <PIO_PullUp>
  }
  else
  {
    PIO_SetOutput( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal, 0, PIO_PULLUP ) ;
   80202:	2301      	movs	r3, #1
   80204:	9300      	str	r3, [sp, #0]
   80206:	4628      	mov	r0, r5
   80208:	4621      	mov	r1, r4
   8020a:	4632      	mov	r2, r6
   8020c:	3b01      	subs	r3, #1
   8020e:	f001 f883 	bl	81318 <PIO_SetOutput>
  }
}
   80212:	b002      	add	sp, #8
   80214:	bd70      	pop	{r4, r5, r6, pc}
   80216:	bf00      	nop
   80218:	00081d94 	.word	0x00081d94

0008021c <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

extern void pinMode( uint32_t ulPin, uint32_t ulMode )
{
   8021c:	b570      	push	{r4, r5, r6, lr}
	if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
   8021e:	261c      	movs	r6, #28
   80220:	4346      	muls	r6, r0
   80222:	4d17      	ldr	r5, [pc, #92]	; (80280 <pinMode+0x64>)
   80224:	1974      	adds	r4, r6, r5
   80226:	7b23      	ldrb	r3, [r4, #12]
   80228:	2b00      	cmp	r3, #0
   8022a:	d028      	beq.n	8027e <pinMode+0x62>
    {
        return ;
    }

	switch ( ulMode )
   8022c:	2901      	cmp	r1, #1
   8022e:	d016      	beq.n	8025e <pinMode+0x42>
   80230:	d302      	bcc.n	80238 <pinMode+0x1c>
   80232:	2902      	cmp	r1, #2
   80234:	d123      	bne.n	8027e <pinMode+0x62>
   80236:	e007      	b.n	80248 <pinMode+0x2c>
    {
        case INPUT:
            /* Enable peripheral for clocking input */
            pmc_enable_periph_clk( g_APinDescription[ulPin].ulPeripheralId ) ;
   80238:	68a0      	ldr	r0, [r4, #8]
   8023a:	f001 f8db 	bl	813f4 <pmc_enable_periph_clk>
            PIO_Configure(
   8023e:	5970      	ldr	r0, [r6, r5]
   80240:	2103      	movs	r1, #3
   80242:	6862      	ldr	r2, [r4, #4]
   80244:	2300      	movs	r3, #0
   80246:	e006      	b.n	80256 <pinMode+0x3a>
            	0 ) ;
        break ;

        case INPUT_PULLUP:
            /* Enable peripheral for clocking input */
            pmc_enable_periph_clk( g_APinDescription[ulPin].ulPeripheralId ) ;
   80248:	68a0      	ldr	r0, [r4, #8]
   8024a:	f001 f8d3 	bl	813f4 <pmc_enable_periph_clk>
            PIO_Configure(
   8024e:	5970      	ldr	r0, [r6, r5]
   80250:	6862      	ldr	r2, [r4, #4]
   80252:	2103      	movs	r1, #3
   80254:	2301      	movs	r3, #1
        break ;

        default:
        break ;
    }
}
   80256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        break ;

        case INPUT_PULLUP:
            /* Enable peripheral for clocking input */
            pmc_enable_periph_clk( g_APinDescription[ulPin].ulPeripheralId ) ;
            PIO_Configure(
   8025a:	f001 b879 	b.w	81350 <PIO_Configure>
            	g_APinDescription[ulPin].ulPin,
            	PIO_PULLUP ) ;
        break ;

        case OUTPUT:
            PIO_Configure(
   8025e:	5975      	ldr	r5, [r6, r5]
   80260:	2105      	movs	r1, #5
   80262:	6923      	ldr	r3, [r4, #16]
   80264:	4628      	mov	r0, r5
   80266:	6862      	ldr	r2, [r4, #4]
   80268:	f001 f872 	bl	81350 <PIO_Configure>
            	PIO_OUTPUT_1,
            	g_APinDescription[ulPin].ulPin,
            	g_APinDescription[ulPin].ulPinConfiguration ) ;

            /* if all pins are output, disable PIO Controller clocking, reduce power consumption */
            if ( g_APinDescription[ulPin].pPort->PIO_OSR == 0xffffffff )
   8026c:	69ab      	ldr	r3, [r5, #24]
   8026e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80272:	d104      	bne.n	8027e <pinMode+0x62>
            {
                pmc_disable_periph_clk( g_APinDescription[ulPin].ulPeripheralId ) ;
   80274:	68a0      	ldr	r0, [r4, #8]
        break ;

        default:
        break ;
    }
}
   80276:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            	g_APinDescription[ulPin].ulPinConfiguration ) ;

            /* if all pins are output, disable PIO Controller clocking, reduce power consumption */
            if ( g_APinDescription[ulPin].pPort->PIO_OSR == 0xffffffff )
            {
                pmc_disable_periph_clk( g_APinDescription[ulPin].ulPeripheralId ) ;
   8027a:	f001 b8df 	b.w	8143c <pmc_disable_periph_clk>
   8027e:	bd70      	pop	{r4, r5, r6, pc}
   80280:	00081d94 	.word	0x00081d94

00080284 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   80284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80288:	2600      	movs	r6, #0
   8028a:	4604      	mov	r4, r0
   8028c:	460d      	mov	r5, r1
   8028e:	4690      	mov	r8, r2
   80290:	4637      	mov	r7, r6
  size_t n = 0;
  while (size--) {
   80292:	e008      	b.n	802a6 <_ZN5Print5writeEPKhj+0x22>
    n += write(*buffer++);
   80294:	6823      	ldr	r3, [r4, #0]
   80296:	5da9      	ldrb	r1, [r5, r6]
   80298:	681b      	ldr	r3, [r3, #0]
   8029a:	4620      	mov	r0, r4
   8029c:	4798      	blx	r3
   8029e:	3601      	adds	r6, #1
   802a0:	183f      	adds	r7, r7, r0
   802a2:	f108 38ff 	add.w	r8, r8, #4294967295

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   802a6:	f1b8 0f00 	cmp.w	r8, #0
   802aa:	d1f3      	bne.n	80294 <_ZN5Print5writeEPKhj+0x10>
    n += write(*buffer++);
  }
  return n;
}
   802ac:	4638      	mov	r0, r7
   802ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000802b2 <_ZN5Print5printEc>:
{
  return write(str);
}

size_t Print::print(char c)
{
   802b2:	b508      	push	{r3, lr}
  return write(c);
   802b4:	6803      	ldr	r3, [r0, #0]
   802b6:	681b      	ldr	r3, [r3, #0]
   802b8:	4798      	blx	r3
}
   802ba:	bd08      	pop	{r3, pc}

000802bc <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   802bc:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   802be:	210d      	movs	r1, #13
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
   802c0:	4605      	mov	r5, r0
  size_t n = print('\r');
   802c2:	f7ff fff6 	bl	802b2 <_ZN5Print5printEc>
  n += print('\n');
   802c6:	210a      	movs	r1, #10
  return x.printTo(*this);
}

size_t Print::println(void)
{
  size_t n = print('\r');
   802c8:	4604      	mov	r4, r0
  n += print('\n');
   802ca:	4628      	mov	r0, r5
   802cc:	f7ff fff1 	bl	802b2 <_ZN5Print5printEc>
  return n;
}
   802d0:	1900      	adds	r0, r0, r4
   802d2:	bd38      	pop	{r3, r4, r5, pc}

000802d4 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   802d4:	b538      	push	{r3, r4, r5, lr}
   802d6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   802d8:	460c      	mov	r4, r1
   802da:	b909      	cbnz	r1, 802e0 <_ZN5Print5writeEPKc+0xc>
   802dc:	4608      	mov	r0, r1
   802de:	bd38      	pop	{r3, r4, r5, pc}
      return write((const uint8_t *)str, strlen(str));
   802e0:	4608      	mov	r0, r1
   802e2:	f001 fc2d 	bl	81b40 <strlen>
   802e6:	682b      	ldr	r3, [r5, #0]
   802e8:	4602      	mov	r2, r0
   802ea:	685b      	ldr	r3, [r3, #4]
   802ec:	4628      	mov	r0, r5
   802ee:	4621      	mov	r1, r4
   802f0:	4798      	blx	r3
    }
   802f2:	bd38      	pop	{r3, r4, r5, pc}

000802f4 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   802f4:	b510      	push	{r4, lr}
   802f6:	b08a      	sub	sp, #40	; 0x28
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   802f8:	ab0a      	add	r3, sp, #40	; 0x28
   802fa:	f04f 0c00 	mov.w	ip, #0
   802fe:	f803 cd04 	strb.w	ip, [r3, #-4]!

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   80302:	2a01      	cmp	r2, #1
   80304:	bf98      	it	ls
   80306:	220a      	movls	r2, #10

  do {
    unsigned long m = n;
    n /= base;
   80308:	fbb1 f4f2 	udiv	r4, r1, r2
    char c = m - base * n;
   8030c:	fb04 1112 	mls	r1, r4, r2, r1
   80310:	b2c9      	uxtb	r1, r1
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   80312:	3b01      	subs	r3, #1
   80314:	2909      	cmp	r1, #9
   80316:	d801      	bhi.n	8031c <_ZN5Print11printNumberEmh+0x28>
   80318:	3130      	adds	r1, #48	; 0x30
   8031a:	e000      	b.n	8031e <_ZN5Print11printNumberEmh+0x2a>
   8031c:	3137      	adds	r1, #55	; 0x37
   8031e:	b2c9      	uxtb	r1, r1
   80320:	7019      	strb	r1, [r3, #0]
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   80322:	b10c      	cbz	r4, 80328 <_ZN5Print11printNumberEmh+0x34>
   80324:	4621      	mov	r1, r4
   80326:	e7ef      	b.n	80308 <_ZN5Print11printNumberEmh+0x14>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   80328:	4619      	mov	r1, r3
   8032a:	f7ff ffd3 	bl	802d4 <_ZN5Print5writeEPKc>
}
   8032e:	b00a      	add	sp, #40	; 0x28
   80330:	bd10      	pop	{r4, pc}

00080332 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
   80332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80336:	4606      	mov	r6, r0
   80338:	460d      	mov	r5, r1
  if (base == 0) {
   8033a:	4614      	mov	r4, r2
   8033c:	b92a      	cbnz	r2, 8034a <_ZN5Print5printEli+0x18>
    return write(n);
   8033e:	6803      	ldr	r3, [r0, #0]
   80340:	b2c9      	uxtb	r1, r1
   80342:	681b      	ldr	r3, [r3, #0]
   80344:	4798      	blx	r3
   80346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (base == 10) {
   8034a:	2a0a      	cmp	r2, #10
   8034c:	d10d      	bne.n	8036a <_ZN5Print5printEli+0x38>
    if (n < 0) {
   8034e:	2900      	cmp	r1, #0
   80350:	da0c      	bge.n	8036c <_ZN5Print5printEli+0x3a>
      int t = print('-');
   80352:	212d      	movs	r1, #45	; 0x2d
   80354:	f7ff ffad 	bl	802b2 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
   80358:	4269      	negs	r1, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
   8035a:	4607      	mov	r7, r0
      n = -n;
      return printNumber(n, 10) + t;
   8035c:	4622      	mov	r2, r4
   8035e:	4630      	mov	r0, r6
   80360:	f7ff ffc8 	bl	802f4 <_ZN5Print11printNumberEmh>
   80364:	19c0      	adds	r0, r0, r7
   80366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   8036a:	b2d2      	uxtb	r2, r2
  }
}
   8036c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
   80370:	f7ff bfc0 	b.w	802f4 <_ZN5Print11printNumberEmh>

00080374 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
   80374:	f7ff bfdd 	b.w	80332 <_ZN5Print5printEli>

00080378 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
   80378:	b538      	push	{r3, r4, r5, lr}
   8037a:	4604      	mov	r4, r0
  size_t n = print(num, base);
   8037c:	f7ff fffa 	bl	80374 <_ZN5Print5printEii>
   80380:	4605      	mov	r5, r0
  n += println();
   80382:	4620      	mov	r0, r4
   80384:	f7ff ff9a 	bl	802bc <_ZN5Print7printlnEv>
  return n;
}
   80388:	1940      	adds	r0, r0, r5
   8038a:	bd38      	pop	{r3, r4, r5, pc}

0008038c <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
   8038c:	4b01      	ldr	r3, [pc, #4]	; (80394 <initiateReset+0x8>)
   8038e:	6018      	str	r0, [r3, #0]
	ticks = _ticks;
}
   80390:	4770      	bx	lr
   80392:	bf00      	nop
   80394:	20070038 	.word	0x20070038

00080398 <cancelReset>:

void cancelReset() {
   80398:	4b02      	ldr	r3, [pc, #8]	; (803a4 <cancelReset+0xc>)
   8039a:	f04f 32ff 	mov.w	r2, #4294967295
   8039e:	601a      	str	r2, [r3, #0]
	ticks = -1;
}
   803a0:	4770      	bx	lr
   803a2:	bf00      	nop
   803a4:	20070038 	.word	0x20070038

000803a8 <tickReset>:

void tickReset() {
   803a8:	4a05      	ldr	r2, [pc, #20]	; (803c0 <tickReset+0x18>)
   803aa:	b508      	push	{r3, lr}
	if (ticks == -1)
   803ac:	6813      	ldr	r3, [r2, #0]
   803ae:	f1b3 3fff 	cmp.w	r3, #4294967295
   803b2:	d004      	beq.n	803be <tickReset+0x16>
		return;
	ticks--;
   803b4:	3b01      	subs	r3, #1
   803b6:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
   803b8:	b90b      	cbnz	r3, 803be <tickReset+0x16>
		banzai();
   803ba:	4b02      	ldr	r3, [pc, #8]	; (803c4 <tickReset+0x1c>)
   803bc:	4798      	blx	r3
   803be:	bd08      	pop	{r3, pc}
   803c0:	20070038 	.word	0x20070038
   803c4:	20070001 	.word	0x20070001

000803c8 <_ZN9UARTClasscvbEv>:
#elif defined __ICCARM__ /* IAR Ewarm 5.41+ */
//    virtual void write( const char *str ) ;
//    virtual void write( const uint8_t *buffer, size_t size ) ;
#endif

    operator bool() { return true; }; // UART always active
   803c8:	2001      	movs	r0, #1
   803ca:	4770      	bx	lr

000803cc <_ZN9UARTClassC1EP4Uart4IRQnmP10RingBuffer>:
#include <string.h>
#include "UARTClass.h"

// Constructors ////////////////////////////////////////////////////////////////

UARTClass::UARTClass( Uart* pUart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
   803cc:	b530      	push	{r4, r5, lr}
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   803ce:	2500      	movs	r5, #0
   803d0:	6045      	str	r5, [r0, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   803d2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   803d6:	6085      	str	r5, [r0, #8]
   803d8:	4d04      	ldr	r5, [pc, #16]	; (803ec <_ZN9UARTClassC1EP4Uart4IRQnmP10RingBuffer+0x20>)
   803da:	4604      	mov	r4, r0
   803dc:	6005      	str	r5, [r0, #0]
{
  _rx_buffer = pRx_buffer ;
   803de:	9d03      	ldr	r5, [sp, #12]

  _pUart=pUart ;
   803e0:	6141      	str	r1, [r0, #20]

// Constructors ////////////////////////////////////////////////////////////////

UARTClass::UARTClass( Uart* pUart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
{
  _rx_buffer = pRx_buffer ;
   803e2:	6105      	str	r5, [r0, #16]

  _pUart=pUart ;
  _dwIrq=dwIrq ;
   803e4:	7602      	strb	r2, [r0, #24]
  _dwId=dwId ;
   803e6:	61c3      	str	r3, [r0, #28]
}
   803e8:	bd30      	pop	{r4, r5, pc}
   803ea:	bf00      	nop
   803ec:	00081ba8 	.word	0x00081ba8

000803f0 <_ZN9UARTClass9availableEv>:
  pmc_disable_periph_clk( _dwId ) ;
}

int UARTClass::available( void )
{
  return (uint32_t)(SERIAL_BUFFER_SIZE + _rx_buffer->_iHead - _rx_buffer->_iTail) % SERIAL_BUFFER_SIZE ;
   803f0:	6903      	ldr	r3, [r0, #16]
   803f2:	6c18      	ldr	r0, [r3, #64]	; 0x40
   803f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   803f6:	1ac0      	subs	r0, r0, r3
}
   803f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   803fc:	4770      	bx	lr

000803fe <_ZN9UARTClass4peekEv>:

int UARTClass::peek( void )
{
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   803fe:	6903      	ldr	r3, [r0, #16]
   80400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80402:	6c19      	ldr	r1, [r3, #64]	; 0x40
   80404:	4291      	cmp	r1, r2
   80406:	bf0c      	ite	eq
   80408:	f04f 30ff 	moveq.w	r0, #4294967295
    return -1 ;

  return _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   8040c:	5c98      	ldrbne	r0, [r3, r2]
}
   8040e:	4770      	bx	lr

00080410 <_ZN9UARTClass4readEv>:

int UARTClass::read( void )
{
  // if the head isn't ahead of the tail, we don't have any characters
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   80410:	6903      	ldr	r3, [r0, #16]
   80412:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80414:	6c19      	ldr	r1, [r3, #64]	; 0x40
   80416:	4291      	cmp	r1, r2
   80418:	d102      	bne.n	80420 <_ZN9UARTClass4readEv+0x10>
   8041a:	f04f 30ff 	mov.w	r0, #4294967295
   8041e:	4770      	bx	lr
    return -1 ;

  uint8_t uc = _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   80420:	5c98      	ldrb	r0, [r3, r2]
  _rx_buffer->_iTail = (unsigned int)(_rx_buffer->_iTail + 1) % SERIAL_BUFFER_SIZE ;
   80422:	3201      	adds	r2, #1
   80424:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   80428:	645a      	str	r2, [r3, #68]	; 0x44
  return uc ;
}
   8042a:	4770      	bx	lr

0008042c <_ZN9UARTClass5flushEv>:

void UARTClass::flush( void )
{
  // Wait for transmission to complete
  while ((_pUart->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   8042c:	6943      	ldr	r3, [r0, #20]
   8042e:	695a      	ldr	r2, [r3, #20]
   80430:	f012 0f02 	tst.w	r2, #2
   80434:	d0fb      	beq.n	8042e <_ZN9UARTClass5flushEv+0x2>
    ;
}
   80436:	4770      	bx	lr

00080438 <_ZN9UARTClass5writeEh>:

size_t UARTClass::write( const uint8_t uc_data )
{
  // Check if the transmitter is ready
  while ((_pUart->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80438:	6943      	ldr	r3, [r0, #20]
   8043a:	695a      	ldr	r2, [r3, #20]
   8043c:	f012 0f02 	tst.w	r2, #2
   80440:	d0fb      	beq.n	8043a <_ZN9UARTClass5writeEh+0x2>
    ;

  // Send character
  _pUart->UART_THR = uc_data;
   80442:	61d9      	str	r1, [r3, #28]
  return 1;
}
   80444:	2001      	movs	r0, #1
   80446:	4770      	bx	lr

00080448 <_ZN9UARTClass10IrqHandlerEv>:

void UARTClass::IrqHandler( void )
{
   80448:	b538      	push	{r3, r4, r5, lr}
  uint32_t status = _pUart->UART_SR;
   8044a:	6943      	ldr	r3, [r0, #20]
  _pUart->UART_THR = uc_data;
  return 1;
}

void UARTClass::IrqHandler( void )
{
   8044c:	4604      	mov	r4, r0
  uint32_t status = _pUart->UART_SR;
   8044e:	695d      	ldr	r5, [r3, #20]

  // Did we receive data ?
  if ((status & UART_SR_RXRDY) == UART_SR_RXRDY)
   80450:	f015 0f01 	tst.w	r5, #1
   80454:	d004      	beq.n	80460 <_ZN9UARTClass10IrqHandlerEv+0x18>
    _rx_buffer->store_char(_pUart->UART_RHR);
   80456:	6999      	ldr	r1, [r3, #24]
   80458:	6900      	ldr	r0, [r0, #16]
   8045a:	b2c9      	uxtb	r1, r1
   8045c:	f000 fdc0 	bl	80fe0 <_ZN10RingBuffer10store_charEh>

  // Acknowledge errors
  if ((status & UART_SR_OVRE) == UART_SR_OVRE ||
   80460:	f015 0f60 	tst.w	r5, #96	; 0x60
   80464:	d004      	beq.n	80470 <_ZN9UARTClass10IrqHandlerEv+0x28>
		  (status & UART_SR_FRAME) == UART_SR_FRAME)
  {
	// TODO: error reporting outside ISR
    _pUart->UART_CR |= UART_CR_RSTSTA;
   80466:	6963      	ldr	r3, [r4, #20]
   80468:	681a      	ldr	r2, [r3, #0]
   8046a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8046e:	601a      	str	r2, [r3, #0]
   80470:	bd38      	pop	{r3, r4, r5, pc}
	...

00080474 <_ZN9UARTClass5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void UARTClass::begin( const uint32_t dwBaudRate )
{
   80474:	b538      	push	{r3, r4, r5, lr}
   80476:	4604      	mov	r4, r0
  // Configure PMC
  pmc_enable_periph_clk( _dwId ) ;
   80478:	69c0      	ldr	r0, [r0, #28]
}

// Public Methods //////////////////////////////////////////////////////////////

void UARTClass::begin( const uint32_t dwBaudRate )
{
   8047a:	460d      	mov	r5, r1
  // Configure PMC
  pmc_enable_periph_clk( _dwId ) ;
   8047c:	f000 ffba 	bl	813f4 <pmc_enable_periph_clk>

  // Disable PDC channel
  _pUart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS ;
   80480:	6963      	ldr	r3, [r4, #20]
   80482:	f240 2202 	movw	r2, #514	; 0x202
   80486:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

  // Reset and disable receiver and transmitter
  _pUart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX | UART_CR_RXDIS | UART_CR_TXDIS ;
   8048a:	22ac      	movs	r2, #172	; 0xac
   8048c:	601a      	str	r2, [r3, #0]

  // Configure mode
  _pUart->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL ;
   8048e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80492:	605a      	str	r2, [r3, #4]

  // Configure baudrate (asynchronous, no oversampling)
  _pUart->UART_BRGR = (SystemCoreClock / dwBaudRate) >> 4 ;
   80494:	4a0c      	ldr	r2, [pc, #48]	; (804c8 <_ZN9UARTClass5beginEm+0x54>)

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80496:	2101      	movs	r1, #1
   80498:	6812      	ldr	r2, [r2, #0]
   8049a:	fbb2 f5f5 	udiv	r5, r2, r5
   8049e:	092d      	lsrs	r5, r5, #4

  // Configure interrupts
  _pUart->UART_IDR = 0xFFFFFFFF;
   804a0:	f04f 32ff 	mov.w	r2, #4294967295

  // Configure mode
  _pUart->UART_MR = UART_MR_PAR_NO | UART_MR_CHMODE_NORMAL ;

  // Configure baudrate (asynchronous, no oversampling)
  _pUart->UART_BRGR = (SystemCoreClock / dwBaudRate) >> 4 ;
   804a4:	621d      	str	r5, [r3, #32]

  // Configure interrupts
  _pUart->UART_IDR = 0xFFFFFFFF;
   804a6:	60da      	str	r2, [r3, #12]
  _pUart->UART_IER = UART_IER_RXRDY | UART_IER_OVRE | UART_IER_FRAME;
   804a8:	3262      	adds	r2, #98	; 0x62
   804aa:	609a      	str	r2, [r3, #8]

  // Enable UART interrupt in NVIC
  NVIC_EnableIRQ(_dwIrq);
   804ac:	7e22      	ldrb	r2, [r4, #24]
   804ae:	b250      	sxtb	r0, r2
   804b0:	f002 021f 	and.w	r2, r2, #31
   804b4:	fa11 f202 	lsls.w	r2, r1, r2
   804b8:	4904      	ldr	r1, [pc, #16]	; (804cc <_ZN9UARTClass5beginEm+0x58>)
   804ba:	0940      	lsrs	r0, r0, #5
   804bc:	f841 2020 	str.w	r2, [r1, r0, lsl #2]

  // Enable receiver and transmitter
  _pUart->UART_CR = UART_CR_RXEN | UART_CR_TXEN ;
   804c0:	2250      	movs	r2, #80	; 0x50
   804c2:	601a      	str	r2, [r3, #0]
}
   804c4:	bd38      	pop	{r3, r4, r5, pc}
   804c6:	bf00      	nop
   804c8:	20070048 	.word	0x20070048
   804cc:	e000e100 	.word	0xe000e100

000804d0 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
   804d0:	b508      	push	{r3, lr}
	init();
   804d2:	f000 fc8b 	bl	80dec <init>

	delay(1);
   804d6:	2001      	movs	r0, #1
   804d8:	f7ff fe4a 	bl	80170 <delay>

#if defined(USBCON)
	USBDevice.attach();
   804dc:	4806      	ldr	r0, [pc, #24]	; (804f8 <main+0x28>)
   804de:	f000 f82b 	bl	80538 <_ZN10USBDevice_6attachEv>
#endif

	setup();
   804e2:	f7ff fe33 	bl	8014c <setup>

	for (;;)
	{
		loop();
   804e6:	f7ff fe1d 	bl	80124 <loop>
		if (serialEventRun) serialEventRun();
   804ea:	4b04      	ldr	r3, [pc, #16]	; (804fc <main+0x2c>)
   804ec:	2b00      	cmp	r3, #0
   804ee:	d0fa      	beq.n	804e6 <main+0x16>
   804f0:	f3af 8000 	nop.w
   804f4:	e7f7      	b.n	804e6 <main+0x16>
   804f6:	bf00      	nop
   804f8:	20070064 	.word	0x20070064
   804fc:	00000000 	.word	0x00000000

00080500 <_Z16USBD_InitControli>:
int _cmark;
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
   80500:	4b02      	ldr	r3, [pc, #8]	; (8050c <_Z16USBD_InitControli+0xc>)
   80502:	2200      	movs	r2, #0
   80504:	601a      	str	r2, [r3, #0]
	_cend = end;
   80506:	4b02      	ldr	r3, [pc, #8]	; (80510 <_Z16USBD_InitControli+0x10>)
   80508:	6018      	str	r0, [r3, #0]
}
   8050a:	4770      	bx	lr
   8050c:	20070054 	.word	0x20070054
   80510:	20070058 	.word	0x20070058

00080514 <_ZL11USB_SendZlpv>:
}


static void USB_SendZlp( void )
{
    while( UOTGHS_DEVEPTISR_TXINI != (UOTGHS->UOTGHS_DEVEPTISR[0] & UOTGHS_DEVEPTISR_TXINI ) )
   80514:	e003      	b.n	8051e <_ZL11USB_SendZlpv+0xa>
    {
        if((UOTGHS->UOTGHS_DEVISR & UOTGHS_DEVISR_SUSP) == UOTGHS_DEVISR_SUSP)
   80516:	685b      	ldr	r3, [r3, #4]
   80518:	f013 0f01 	tst.w	r3, #1
   8051c:	d108      	bne.n	80530 <_ZL11USB_SendZlpv+0x1c>
}


static void USB_SendZlp( void )
{
    while( UOTGHS_DEVEPTISR_TXINI != (UOTGHS->UOTGHS_DEVEPTISR[0] & UOTGHS_DEVEPTISR_TXINI ) )
   8051e:	4b05      	ldr	r3, [pc, #20]	; (80534 <_ZL11USB_SendZlpv+0x20>)
   80520:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   80524:	f012 0f01 	tst.w	r2, #1
   80528:	d0f5      	beq.n	80516 <_ZL11USB_SendZlpv+0x2>
        if((UOTGHS->UOTGHS_DEVISR & UOTGHS_DEVISR_SUSP) == UOTGHS_DEVISR_SUSP)
        {
            return;
        }
    }
    UOTGHS->UOTGHS_DEVEPTICR[0] = UOTGHS_DEVEPTICR_TXINIC;
   8052a:	2201      	movs	r2, #1
   8052c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   80530:	4770      	bx	lr
   80532:	bf00      	nop
   80534:	400ac000 	.word	0x400ac000

00080538 <_ZN10USBDevice_6attachEv>:
		_usbInitialized=1UL;
	}
}

bool USBDevice_::attach(void)
{
   80538:	b508      	push	{r3, lr}
  if (_usbInitialized != 0UL)
   8053a:	4b05      	ldr	r3, [pc, #20]	; (80550 <_ZN10USBDevice_6attachEv+0x18>)
   8053c:	6818      	ldr	r0, [r3, #0]
   8053e:	b128      	cbz	r0, 8054c <_ZN10USBDevice_6attachEv+0x14>
  {
    UDD_Attach();
   80540:	f001 f8ee 	bl	81720 <UDD_Attach>
	_usbConfiguration = 0;
   80544:	4b03      	ldr	r3, [pc, #12]	; (80554 <_ZN10USBDevice_6attachEv+0x1c>)
   80546:	2200      	movs	r2, #0
   80548:	601a      	str	r2, [r3, #0]
   8054a:	2001      	movs	r0, #1
  }
  else
  {
    return false;
  }
}
   8054c:	bd08      	pop	{r3, pc}
   8054e:	bf00      	nop
   80550:	20070060 	.word	0x20070060
   80554:	20070070 	.word	0x20070070

00080558 <_ZN10USBDevice_C1Ev>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
   80558:	b510      	push	{r4, lr}
   8055a:	4604      	mov	r4, r0
{
	UDD_SetStack(&USB_ISR);
   8055c:	4805      	ldr	r0, [pc, #20]	; (80574 <_ZN10USBDevice_C1Ev+0x1c>)
   8055e:	f001 f871 	bl	81644 <UDD_SetStack>

	if (UDD_Init() == 0UL)
   80562:	f001 f875 	bl	81650 <UDD_Init>
   80566:	b910      	cbnz	r0, 8056e <_ZN10USBDevice_C1Ev+0x16>
	{
		_usbInitialized=1UL;
   80568:	4b03      	ldr	r3, [pc, #12]	; (80578 <_ZN10USBDevice_C1Ev+0x20>)
   8056a:	2201      	movs	r2, #1
   8056c:	601a      	str	r2, [r3, #0]
	}
}
   8056e:	4620      	mov	r0, r4
   80570:	bd10      	pop	{r4, pc}
   80572:	bf00      	nop
   80574:	000806ad 	.word	0x000806ad
   80578:	20070060 	.word	0x20070060

0008057c <_Z14USBD_Availablem>:
	}
};

//	Number of bytes, assumes a rx endpoint
uint32_t USBD_Available(uint32_t ep)
{
   8057c:	b538      	push	{r3, r4, r5, lr}
typedef uint32_t irqflags_t;
extern int g_interrupt_enabled;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = g_interrupt_enabled;
   8057e:	4c09      	ldr	r4, [pc, #36]	; (805a4 <_Z14USBD_Availablem+0x28>)
   80580:	6825      	ldr	r5, [r4, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80582:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before 
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80584:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80588:	2300      	movs	r3, #0
	LockEP lock(ep);
	return UDD_FifoByteCount(ep & 0xF);
   8058a:	f000 000f 	and.w	r0, r0, #15
   8058e:	6023      	str	r3, [r4, #0]
   80590:	f001 f9f2 	bl	81978 <UDD_FifoByteCount>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80594:	b125      	cbz	r5, 805a0 <_Z14USBD_Availablem+0x24>
		cpu_irq_enable();
   80596:	2301      	movs	r3, #1
   80598:	6023      	str	r3, [r4, #0]
   8059a:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   8059e:	b662      	cpsie	i
}
   805a0:	bd38      	pop	{r3, r4, r5, pc}
   805a2:	bf00      	nop
   805a4:	2007004c 	.word	0x2007004c

000805a8 <_Z10USBD_Flushm>:
		}
	}
}

void USBD_Flush(uint32_t ep)
{
   805a8:	b510      	push	{r4, lr}
   805aa:	4604      	mov	r4, r0
	if (UDD_FifoByteCount(ep))
   805ac:	f001 f9e4 	bl	81978 <UDD_FifoByteCount>
   805b0:	b120      	cbz	r0, 805bc <_Z10USBD_Flushm+0x14>
		UDD_ReleaseTX(ep);
   805b2:	4620      	mov	r0, r4
}
   805b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void USBD_Flush(uint32_t ep)
{
	if (UDD_FifoByteCount(ep))
		UDD_ReleaseTX(ep);
   805b8:	f001 ba02 	b.w	819c0 <UDD_ReleaseTX>
   805bc:	bd10      	pop	{r4, pc}

000805be <_Z24USBD_SendOtherInterfacesv>:
	TRACE_CORE(printf("=> USBD_SendInterfaces, total=%d interfaces=%d\r\n", total, interfaces);)
	return interfaces;
}

int USBD_SendOtherInterfaces(void)
{
   805be:	b513      	push	{r0, r1, r4, lr}
	int total = 0;
	uint8_t interfaces = 0;
   805c0:	2300      	movs	r3, #0
   805c2:	ac02      	add	r4, sp, #8
   805c4:	f804 3d01 	strb.w	r3, [r4, #-1]!

#ifdef CDC_ENABLED
	total = CDC_GetOtherInterface(&interfaces);
   805c8:	4620      	mov	r0, r4
   805ca:	f000 fe0b 	bl	811e4 <_Z21CDC_GetOtherInterfacePh>
#endif

#ifdef HID_ENABLED
	total += HID_GetInterface(&interfaces);
   805ce:	4620      	mov	r0, r4
   805d0:	f000 fbf4 	bl	80dbc <_Z16HID_GetInterfacePh>
#endif

	total = total; // Get rid of compiler warning
	TRACE_CORE(printf("=> USBD_SendInterfaces, total=%d interfaces=%d\r\n", total, interfaces);)
	return interfaces;
}
   805d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   805d8:	bd1c      	pop	{r2, r3, r4, pc}

000805da <_Z19USBD_SendInterfacesv>:

	return false;
}

int USBD_SendInterfaces(void)
{
   805da:	b513      	push	{r0, r1, r4, lr}
	int total = 0;
	uint8_t interfaces = 0;
   805dc:	2300      	movs	r3, #0
   805de:	ac02      	add	r4, sp, #8
   805e0:	f804 3d01 	strb.w	r3, [r4, #-1]!

#ifdef CDC_ENABLED
	total = CDC_GetInterface(&interfaces);
   805e4:	4620      	mov	r0, r4
   805e6:	f000 fe07 	bl	811f8 <_Z16CDC_GetInterfacePh>
#endif

#ifdef HID_ENABLED
	total += HID_GetInterface(&interfaces);
   805ea:	4620      	mov	r0, r4
   805ec:	f000 fbe6 	bl	80dbc <_Z16HID_GetInterfacePh>
#endif

	total = total; // Get rid of compiler warning
	TRACE_CORE(printf("=> USBD_SendInterfaces, total=%d interfaces=%d\r\n", total, interfaces);)
	return interfaces;
}
   805f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   805f4:	bd1c      	pop	{r2, r3, r4, pc}

000805f6 <_Z26USBD_ClassInterfaceRequestR5Setup>:
}

//	Handle CLASS_INTERFACE requests
bool USBD_ClassInterfaceRequest(Setup& setup)
{
	uint8_t i = setup.wIndex;
   805f6:	7903      	ldrb	r3, [r0, #4]

	TRACE_CORE(printf("=> USBD_ClassInterfaceRequest\r\n");)

#ifdef CDC_ENABLED
	if (CDC_ACM_INTERFACE == i)
   805f8:	b90b      	cbnz	r3, 805fe <_Z26USBD_ClassInterfaceRequestR5Setup+0x8>
	{
		return CDC_Setup(setup);
   805fa:	f000 be07 	b.w	8120c <_Z9CDC_SetupR5Setup>
	}
#endif

#ifdef HID_ENABLED
	if (HID_INTERFACE == i)
   805fe:	2b02      	cmp	r3, #2
   80600:	d001      	beq.n	80606 <_Z26USBD_ClassInterfaceRequestR5Setup+0x10>
		return HID_Setup(setup);
	}
#endif

	return false;
}
   80602:	2000      	movs	r0, #0
   80604:	4770      	bx	lr
#endif

#ifdef HID_ENABLED
	if (HID_INTERFACE == i)
	{
		return HID_Setup(setup);
   80606:	f000 bae7 	b.w	80bd8 <_Z9HID_SetupR5Setup>

0008060a <_Z16USBD_RecvControlPvm>:

//	Does not timeout or cross fifo boundaries
//	Will only work for transfers <= 64 bytes
//	TODO
int USBD_RecvControl(void* d, uint32_t len)
{
   8060a:	b538      	push	{r3, r4, r5, lr}
   8060c:	460c      	mov	r4, r1
   8060e:	4605      	mov	r5, r0
	UDD_WaitOUT();
   80610:	f001 f8ec 	bl	817ec <UDD_WaitOUT>
	UDD_Recv(EP0, (uint8_t*)d, len);
   80614:	2000      	movs	r0, #0
   80616:	4629      	mov	r1, r5
   80618:	4622      	mov	r2, r4
   8061a:	f001 f989 	bl	81930 <UDD_Recv>
	UDD_ClearOUT();
   8061e:	f001 f8fb 	bl	81818 <UDD_ClearOUT>

	return len;
}
   80622:	4620      	mov	r0, r4
   80624:	bd38      	pop	{r3, r4, r5, pc}
	...

00080628 <_Z16USBD_SendControlhPKvm>:
	_cend = end;
}

//	Clipped by _cmark/_cend
int USBD_SendControl(uint8_t flags, const void* d, uint32_t len)
{
   80628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t sent = 0;
	uint32_t pos = 0;

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
   8062a:	4b0d      	ldr	r3, [pc, #52]	; (80660 <_Z16USBD_SendControlhPKvm+0x38>)
	_cend = end;
}

//	Clipped by _cmark/_cend
int USBD_SendControl(uint8_t flags, const void* d, uint32_t len)
{
   8062c:	4615      	mov	r5, r2
	uint32_t sent = 0;
	uint32_t pos = 0;

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
   8062e:	681a      	ldr	r2, [r3, #0]
   80630:	4b0c      	ldr	r3, [pc, #48]	; (80664 <_Z16USBD_SendControlhPKvm+0x3c>)
	_cend = end;
}

//	Clipped by _cmark/_cend
int USBD_SendControl(uint8_t flags, const void* d, uint32_t len)
{
   80632:	460f      	mov	r7, r1
	uint32_t sent = 0;
	uint32_t pos = 0;

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
   80634:	681b      	ldr	r3, [r3, #0]
   80636:	429a      	cmp	r2, r3
   80638:	da0b      	bge.n	80652 <_Z16USBD_SendControlhPKvm+0x2a>
   8063a:	462c      	mov	r4, r5
   8063c:	2600      	movs	r6, #0
   8063e:	e006      	b.n	8064e <_Z16USBD_SendControlhPKvm+0x26>
	{
		while (len > 0)
		{
			sent = UDD_Send(EP0, data + pos, len);
   80640:	19b9      	adds	r1, r7, r6
   80642:	4622      	mov	r2, r4
   80644:	2000      	movs	r0, #0
   80646:	f001 f903 	bl	81850 <UDD_Send>
			TRACE_CORE(printf("=> USBD_SendControl sent=%lu\r\n", sent);)
			pos += sent;
   8064a:	1836      	adds	r6, r6, r0
			len -= sent;
   8064c:	1a24      	subs	r4, r4, r0

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
	{
		while (len > 0)
   8064e:	2c00      	cmp	r4, #0
   80650:	d1f6      	bne.n	80640 <_Z16USBD_SendControlhPKvm+0x18>
			pos += sent;
			len -= sent;
		}
	}

	_cmark += length;
   80652:	4b03      	ldr	r3, [pc, #12]	; (80660 <_Z16USBD_SendControlhPKvm+0x38>)

	return length;
}
   80654:	4628      	mov	r0, r5
			pos += sent;
			len -= sent;
		}
	}

	_cmark += length;
   80656:	681a      	ldr	r2, [r3, #0]
   80658:	18aa      	adds	r2, r5, r2
   8065a:	601a      	str	r2, [r3, #0]

	return length;
}
   8065c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8065e:	bf00      	nop
   80660:	20070054 	.word	0x20070054
   80664:	20070058 	.word	0x20070058

00080668 <_ZL24USB_SendStringDescriptorPKhi>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
static bool USB_SendStringDescriptor(const uint8_t *string, int wLength) {
   80668:	b510      	push	{r4, lr}
   8066a:	2300      	movs	r3, #0
   8066c:	b0a0      	sub	sp, #128	; 0x80
   8066e:	2201      	movs	r2, #1
	uint16_t buff[64];
	int l = 1;
	wLength-=2;
	while (*string && wLength>0) {
   80670:	1884      	adds	r4, r0, r2
   80672:	f814 4c01 	ldrb.w	r4, [r4, #-1]
   80676:	b14c      	cbz	r4, 8068c <_ZL24USB_SendStringDescriptorPKhi+0x24>
   80678:	3302      	adds	r3, #2
}

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
static bool USB_SendStringDescriptor(const uint8_t *string, int wLength) {
   8067a:	ebc3 0c01 	rsb	ip, r3, r1
	uint16_t buff[64];
	int l = 1;
	wLength-=2;
	while (*string && wLength>0) {
   8067e:	f1bc 0f00 	cmp.w	ip, #0
   80682:	dd03      	ble.n	8068c <_ZL24USB_SendStringDescriptorPKhi+0x24>
		buff[l++] = (uint8_t)(*string++);
   80684:	f82d 4003 	strh.w	r4, [sp, r3]
   80688:	3201      	adds	r2, #1
   8068a:	e7f1      	b.n	80670 <_ZL24USB_SendStringDescriptorPKhi+0x8>
		wLength-=2;
	}
	buff[0] = (3<<8) | (l*2);
   8068c:	0052      	lsls	r2, r2, #1
   8068e:	f442 7340 	orr.w	r3, r2, #768	; 0x300
   80692:	a920      	add	r1, sp, #128	; 0x80
   80694:	f821 3d80 	strh.w	r3, [r1, #-128]!
	return USBD_SendControl(0, (uint8_t*)buff, l*2);
   80698:	2000      	movs	r0, #0
   8069a:	4669      	mov	r1, sp
   8069c:	f7ff ffc4 	bl	80628 <_Z16USBD_SendControlhPKvm>
}
   806a0:	3800      	subs	r0, #0
   806a2:	bf18      	it	ne
   806a4:	2001      	movne	r0, #1
   806a6:	b020      	add	sp, #128	; 0x80
   806a8:	bd10      	pop	{r4, pc}
	...

000806ac <_ZL7USB_ISRv>:


//unsigned int iii=0;
//	Endpoint 0 interrupt
static void USB_ISR(void)
{
   806ac:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
//    printf("ISR=0x%X\n\r", UOTGHS->UOTGHS_DEVISR); // jcb
//    if( iii++ > 1500 ) while(1); // jcb
    // End of bus reset
    if (Is_udd_reset())
   806b0:	4c9f      	ldr	r4, [pc, #636]	; (80930 <_ZL7USB_ISRv+0x284>)


//unsigned int iii=0;
//	Endpoint 0 interrupt
static void USB_ISR(void)
{
   806b2:	b087      	sub	sp, #28
//    printf("ISR=0x%X\n\r", UOTGHS->UOTGHS_DEVISR); // jcb
//    if( iii++ > 1500 ) while(1); // jcb
    // End of bus reset
    if (Is_udd_reset())
   806b4:	6863      	ldr	r3, [r4, #4]
   806b6:	f013 0f08 	tst.w	r3, #8
   806ba:	d017      	beq.n	806ec <_ZL7USB_ISRv+0x40>
    {
		TRACE_CORE(printf(">>> End of Reset\r\n");)

		// Reset USB address to 0
		udd_configure_address(0);
   806bc:	6823      	ldr	r3, [r4, #0]
		udd_enable_address();

		// Configure EP 0
        UDD_InitEP(0, EP_TYPE_CONTROL);
   806be:	2000      	movs	r0, #0
    if (Is_udd_reset())
    {
		TRACE_CORE(printf(">>> End of Reset\r\n");)

		// Reset USB address to 0
		udd_configure_address(0);
   806c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   806c4:	6023      	str	r3, [r4, #0]
		udd_enable_address();
   806c6:	6823      	ldr	r3, [r4, #0]

		// Configure EP 0
        UDD_InitEP(0, EP_TYPE_CONTROL);
   806c8:	f242 0132 	movw	r1, #8242	; 0x2032
    {
		TRACE_CORE(printf(">>> End of Reset\r\n");)

		// Reset USB address to 0
		udd_configure_address(0);
		udd_enable_address();
   806cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   806d0:	6023      	str	r3, [r4, #0]

		// Configure EP 0
        UDD_InitEP(0, EP_TYPE_CONTROL);
   806d2:	f001 f84b 	bl	8176c <UDD_InitEP>
		udd_enable_setup_received_interrupt(0);
   806d6:	2304      	movs	r3, #4
   806d8:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
		udd_enable_endpoint_interrupt(0);
   806dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   806e0:	61a3      	str	r3, [r4, #24]

        _usbConfiguration = 0;
   806e2:	4b94      	ldr	r3, [pc, #592]	; (80934 <_ZL7USB_ISRv+0x288>)
   806e4:	2200      	movs	r2, #0
   806e6:	601a      	str	r2, [r3, #0]
		udd_ack_reset();
   806e8:	2308      	movs	r3, #8
   806ea:	60a3      	str	r3, [r4, #8]
    }

#ifdef CDC_ENABLED
  	if (Is_udd_endpoint_interrupt(CDC_RX))
   806ec:	4b90      	ldr	r3, [pc, #576]	; (80930 <_ZL7USB_ISRv+0x284>)
   806ee:	685a      	ldr	r2, [r3, #4]
   806f0:	f412 4f80 	tst.w	r2, #16384	; 0x4000
   806f4:	d008      	beq.n	80708 <_ZL7USB_ISRv+0x5c>
	{
		udd_ack_out_received(CDC_RX);
   806f6:	2002      	movs	r0, #2
   806f8:	f8c3 0168 	str.w	r0, [r3, #360]	; 0x168

		// Handle received bytes
		if (USBD_Available(CDC_RX))
   806fc:	f7ff ff3e 	bl	8057c <_Z14USBD_Availablem>
   80700:	b110      	cbz	r0, 80708 <_ZL7USB_ISRv+0x5c>
			SerialUSB.accept();
   80702:	488d      	ldr	r0, [pc, #564]	; (80938 <_ZL7USB_ISRv+0x28c>)
   80704:	f000 fd38 	bl	81178 <_ZN7Serial_6acceptEv>
	}

	if (Is_udd_sof())
   80708:	4b89      	ldr	r3, [pc, #548]	; (80930 <_ZL7USB_ISRv+0x284>)
   8070a:	685a      	ldr	r2, [r3, #4]
   8070c:	f012 0f04 	tst.w	r2, #4
   80710:	d001      	beq.n	80716 <_ZL7USB_ISRv+0x6a>
	{
		udd_ack_sof();
   80712:	2204      	movs	r2, #4
   80714:	609a      	str	r2, [r3, #8]
	//	USBD_Flush(CDC_TX); // jcb
	}
#endif

	// EP 0 Interrupt
	if (Is_udd_endpoint_interrupt(0) )
   80716:	4b86      	ldr	r3, [pc, #536]	; (80930 <_ZL7USB_ISRv+0x284>)
   80718:	685b      	ldr	r3, [r3, #4]
   8071a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   8071e:	f000 81c6 	beq.w	80aae <_ZL7USB_ISRv+0x402>
	{
		if (!UDD_ReceivedSetupInt())
   80722:	f001 f885 	bl	81830 <UDD_ReceivedSetupInt>
   80726:	2800      	cmp	r0, #0
   80728:	f000 81c1 	beq.w	80aae <_ZL7USB_ISRv+0x402>
		{
			return;
		}

		Setup setup;
		UDD_Recv(EP0, (uint8_t*)&setup, 8);
   8072c:	2000      	movs	r0, #0
   8072e:	2208      	movs	r2, #8
   80730:	a904      	add	r1, sp, #16
   80732:	f001 f8fd 	bl	81930 <UDD_Recv>
		UDD_ClearSetupInt();
   80736:	f001 f883 	bl	81840 <UDD_ClearSetupInt>

		uint8_t requestType = setup.bmRequestType;
   8073a:	f89d 5010 	ldrb.w	r5, [sp, #16]
		if (requestType & REQUEST_DEVICETOHOST)
   8073e:	f015 0f80 	tst.w	r5, #128	; 0x80
   80742:	d002      	beq.n	8074a <_ZL7USB_ISRv+0x9e>
		{
			TRACE_CORE(puts(">>> EP0 Int: IN Request\r\n");)
			UDD_WaitIN();
   80744:	f001 f848 	bl	817d8 <UDD_WaitIN>
   80748:	e001      	b.n	8074e <_ZL7USB_ISRv+0xa2>
		}
		else
		{
			TRACE_CORE(puts(">>> EP0 Int: OUT Request\r\n");)
			UDD_ClearIN();
   8074a:	f001 f859 	bl	81800 <UDD_ClearIN>
		}

		bool ok = true;
		if (REQUEST_STANDARD == (requestType & REQUEST_TYPE))
   8074e:	f015 0460 	ands.w	r4, r5, #96	; 0x60
   80752:	f040 8199 	bne.w	80a88 <_ZL7USB_ISRv+0x3dc>
		{
			// Standard Requests
			uint8_t r = setup.bRequest;
   80756:	f89d 0011 	ldrb.w	r0, [sp, #17]
			if (GET_STATUS == r)
   8075a:	b938      	cbnz	r0, 8076c <_ZL7USB_ISRv+0xc0>
			{
                if( setup.bmRequestType == 0 )  // device
   8075c:	f89d 4010 	ldrb.w	r4, [sp, #16]
   80760:	b1bc      	cbz	r4, 80792 <_ZL7USB_ISRv+0xe6>
                // if( setup.bmRequestType == 2 ) // Endpoint:
                else
                {
                    // Send the endpoint status
                    // Check if the endpoint if currently halted
                    if( isEndpointHalt == 1 )
   80762:	4b76      	ldr	r3, [pc, #472]	; (8093c <_ZL7USB_ISRv+0x290>)
   80764:	7819      	ldrb	r1, [r3, #0]
   80766:	2901      	cmp	r1, #1
   80768:	d10b      	bne.n	80782 <_ZL7USB_ISRv+0xd6>
   8076a:	e00b      	b.n	80784 <_ZL7USB_ISRv+0xd8>
                    else
    				UDD_Send8(EP0, 0); // TODO
	    			UDD_Send8(EP0, 0);
                }
			}
			else if (CLEAR_FEATURE == r)
   8076c:	2801      	cmp	r0, #1
   8076e:	d116      	bne.n	8079e <_ZL7USB_ISRv+0xf2>
			{
               // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
   80770:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80774:	2b01      	cmp	r3, #1
   80776:	d10a      	bne.n	8078e <_ZL7USB_ISRv+0xe2>
                {
                    // Enable remote wake-up and send a ZLP
                    if( isRemoteWakeUpEnabled == 1 )
   80778:	4b71      	ldr	r3, [pc, #452]	; (80940 <_ZL7USB_ISRv+0x294>)
	    			UDD_Send8(EP0, 1);
   8077a:	4620      	mov	r0, r4
			{
               // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
                {
                    // Enable remote wake-up and send a ZLP
                    if( isRemoteWakeUpEnabled == 1 )
   8077c:	7819      	ldrb	r1, [r3, #0]
   8077e:	2901      	cmp	r1, #1
   80780:	d000      	beq.n	80784 <_ZL7USB_ISRv+0xd8>
	    			UDD_Send8(EP0, 1);
                    else
	    			UDD_Send8(EP0, 0);
   80782:	4601      	mov	r1, r0
   80784:	f001 f8ac 	bl	818e0 <UDD_Send8>
                    UDD_Send8(EP0, 0);
   80788:	2000      	movs	r0, #0
   8078a:	4601      	mov	r1, r0
   8078c:	e157      	b.n	80a3e <_ZL7USB_ISRv+0x392>
                }
                else // if( setup.wValueL == 0) // ENDPOINTHALT
                {
                    isEndpointHalt = 0;  // TODO
   8078e:	4b6b      	ldr	r3, [pc, #428]	; (8093c <_ZL7USB_ISRv+0x290>)
   80790:	701c      	strb	r4, [r3, #0]
    				UDD_Send8(EP0, 0);
   80792:	4620      	mov	r0, r4
   80794:	4621      	mov	r1, r4
   80796:	f001 f8a3 	bl	818e0 <UDD_Send8>
	    			UDD_Send8(EP0, 0);
   8079a:	4620      	mov	r0, r4
   8079c:	e7f5      	b.n	8078a <_ZL7USB_ISRv+0xde>
                }

 			}
			else if (SET_FEATURE == r)
   8079e:	2803      	cmp	r0, #3
   807a0:	d17b      	bne.n	8089a <_ZL7USB_ISRv+0x1ee>
			{
                // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
   807a2:	f89d 3012 	ldrb.w	r3, [sp, #18]
   807a6:	2b01      	cmp	r3, #1
   807a8:	d105      	bne.n	807b6 <_ZL7USB_ISRv+0x10a>
                {
                    // Enable remote wake-up and send a ZLP
                    isRemoteWakeUpEnabled = 1;
   807aa:	4a65      	ldr	r2, [pc, #404]	; (80940 <_ZL7USB_ISRv+0x294>)
	    			UDD_Send8(EP0, 0);
   807ac:	4620      	mov	r0, r4
			{
                // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
                {
                    // Enable remote wake-up and send a ZLP
                    isRemoteWakeUpEnabled = 1;
   807ae:	7013      	strb	r3, [r2, #0]
	    			UDD_Send8(EP0, 0);
   807b0:	4621      	mov	r1, r4
   807b2:	f001 f895 	bl	818e0 <UDD_Send8>
                }
                if( setup.wValueL == 0) // ENDPOINTHALT
   807b6:	f89d 0012 	ldrb.w	r0, [sp, #18]
   807ba:	b928      	cbnz	r0, 807c8 <_ZL7USB_ISRv+0x11c>
                {
                    // Halt endpoint
                    isEndpointHalt = 1;
   807bc:	4b5f      	ldr	r3, [pc, #380]	; (8093c <_ZL7USB_ISRv+0x290>)
   807be:	2201      	movs	r2, #1
   807c0:	701a      	strb	r2, [r3, #0]
                    //USBD_Halt(USBGenericRequest_GetEndpointNumber(pRequest));
	    			UDD_Send8(EP0, 0);
   807c2:	4601      	mov	r1, r0
   807c4:	f001 f88c 	bl	818e0 <UDD_Send8>
                }
                if( setup.wValueL == 2) // TEST_MODE
   807c8:	f89d 3012 	ldrb.w	r3, [sp, #18]
   807cc:	2b02      	cmp	r3, #2
   807ce:	f040 8165 	bne.w	80a9c <_ZL7USB_ISRv+0x3f0>
                {
                    // 7.1.20 Test Mode Support, 9.4.9 SetFeature
                    if( (setup.bmRequestType == 0 /*USBGenericRequest_DEVICE*/) &&
   807d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   807d6:	2b00      	cmp	r3, #0
   807d8:	f040 8160 	bne.w	80a9c <_ZL7USB_ISRv+0x3f0>
   807dc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   807e0:	f012 0f0f 	tst.w	r2, #15
   807e4:	f040 815a 	bne.w	80a9c <_ZL7USB_ISRv+0x3f0>
                        ((setup.wIndex & 0x000F) == 0) )
                    {
                        // the lower byte of wIndex must be zero
                        // the most significant byte of wIndex is used to specify the specific test mode

                        UOTGHS->UOTGHS_DEVIDR &= ~UOTGHS_DEVIDR_SUSPEC;
   807e8:	4b51      	ldr	r3, [pc, #324]	; (80930 <_ZL7USB_ISRv+0x284>)
   807ea:	6959      	ldr	r1, [r3, #20]
   807ec:	f021 0101 	bic.w	r1, r1, #1
   807f0:	6159      	str	r1, [r3, #20]
                        UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_SPDCONF_HIGH_SPEED; // remove suspend ?
   807f2:	6819      	ldr	r1, [r3, #0]
   807f4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   807f8:	6019      	str	r1, [r3, #0]
static void Test_Mode_Support( uint8_t wIndex )
{
    uint8_t i;
	uint8_t *ptr_dest = (uint8_t *) &udd_get_endpoint_fifo_access8(2);

	switch( wIndex )
   807fa:	0a13      	lsrs	r3, r2, #8
   807fc:	3b01      	subs	r3, #1
   807fe:	2b03      	cmp	r3, #3
   80800:	f200 814c 	bhi.w	80a9c <_ZL7USB_ISRv+0x3f0>
   80804:	e8df f003 	tbb	[pc, r3]
   80808:	02433b33 	.word	0x02433b33
			//A port in Test_Packet mode must send this packet repetitively. The inter-packet timing
			//must be no less than the minimum allowable inter-packet gap as defined in Section 7.1.18 and
			//no greater than 125 us.

			// Send ZLP
			USB_SendZlp();
   8080c:	f7ff fe82 	bl	80514 <_ZL11USB_SendZlpv>

			UOTGHS->UOTGHS_DEVDMA[0].UOTGHS_DEVDMACONTROL = 0; // raz
   80810:	4b47      	ldr	r3, [pc, #284]	; (80930 <_ZL7USB_ISRv+0x284>)
   80812:	2200      	movs	r2, #0
   80814:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
			UOTGHS->UOTGHS_DEVDMA[1].UOTGHS_DEVDMACONTROL = 0; // raz
   80818:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

			// Configure endpoint 2, 64 bytes, direction IN, type BULK, 1 bank
			UOTGHS->UOTGHS_DEVEPTCFG[2] = UOTGHS_DEVEPTCFG_EPSIZE_64_BYTE
												 | UOTGHS_DEVEPTCFG_EPDIR_IN
												 | UOTGHS_DEVEPTCFG_EPTYPE_BLK
												 | UOTGHS_DEVEPTCFG_EPBK_1_BANK;
   8081c:	f241 1230 	movw	r2, #4400	; 0x1130
   80820:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			// Check if the configuration is ok
			UOTGHS->UOTGHS_DEVEPTCFG[2] |= UOTGHS_DEVEPTCFG_ALLOC;
   80824:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80828:	f042 0202 	orr.w	r2, r2, #2
   8082c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			while((UOTGHS->UOTGHS_DEVEPTISR[2]&UOTGHS_DEVEPTISR_CFGOK)==0) {}
   80830:	4b3f      	ldr	r3, [pc, #252]	; (80930 <_ZL7USB_ISRv+0x284>)
   80832:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   80836:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   8083a:	d0f9      	beq.n	80830 <_ZL7USB_ISRv+0x184>
			UOTGHS->UOTGHS_DEVEPT |= UOTGHS_DEVEPT_EPEN2;
   8083c:	69da      	ldr	r2, [r3, #28]
   8083e:	f042 0204 	orr.w	r2, r2, #4
   80842:	61da      	str	r2, [r3, #28]
   80844:	4b3f      	ldr	r3, [pc, #252]	; (80944 <_ZL7USB_ISRv+0x298>)
			// Write FIFO
			for( i=0; i<sizeof(test_packet_buffer); i++)
			{
				ptr_dest[i] = test_packet_buffer[i];;
   80846:	4a40      	ldr	r2, [pc, #256]	; (80948 <_ZL7USB_ISRv+0x29c>)
   80848:	5c9a      	ldrb	r2, [r3, r2]
   8084a:	f803 2b01 	strb.w	r2, [r3], #1
			// Check if the configuration is ok
			UOTGHS->UOTGHS_DEVEPTCFG[2] |= UOTGHS_DEVEPTCFG_ALLOC;
			while((UOTGHS->UOTGHS_DEVEPTISR[2]&UOTGHS_DEVEPTISR_CFGOK)==0) {}
			UOTGHS->UOTGHS_DEVEPT |= UOTGHS_DEVEPT_EPEN2;
			// Write FIFO
			for( i=0; i<sizeof(test_packet_buffer); i++)
   8084e:	4a3f      	ldr	r2, [pc, #252]	; (8094c <_ZL7USB_ISRv+0x2a0>)
   80850:	4293      	cmp	r3, r2
   80852:	d1f8      	bne.n	80846 <_ZL7USB_ISRv+0x19a>
			{
				ptr_dest[i] = test_packet_buffer[i];;
			}
			// Tst PACKET
			UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_TSTPCKT;
   80854:	4b36      	ldr	r3, [pc, #216]	; (80930 <_ZL7USB_ISRv+0x284>)
   80856:	681a      	ldr	r2, [r3, #0]
   80858:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   8085c:	601a      	str	r2, [r3, #0]
			// Send packet
			UOTGHS->UOTGHS_DEVEPTICR[2] = UOTGHS_DEVEPTICR_TXINIC;
   8085e:	2201      	movs	r2, #1
   80860:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			UOTGHS->UOTGHS_DEVEPTIDR[2] = UOTGHS_DEVEPTIDR_FIFOCONC;
   80864:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80868:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
   8086c:	e7fe      	b.n	8086c <_ZL7USB_ISRv+0x1c0>
			//Test mode Test_J:
			//Upon command, a port's transceiver must enter the high-speed J state and remain in that
			//state until the exit action is taken. This enables the testing of the high output drive
			//level on the D+ line.
			// Send a ZLP
			USB_SendZlp();
   8086e:	f7ff fe51 	bl	80514 <_ZL11USB_SendZlpv>
			UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_TSTJ;
   80872:	4b2f      	ldr	r3, [pc, #188]	; (80930 <_ZL7USB_ISRv+0x284>)
   80874:	681a      	ldr	r2, [r3, #0]
   80876:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8087a:	601a      	str	r2, [r3, #0]
   8087c:	e7fe      	b.n	8087c <_ZL7USB_ISRv+0x1d0>
			//Test mode Test_K:
			//Upon command, a port's transceiver must enter the high-speed K state and remain in
			//that state until the exit action is taken. This enables the testing of the high output drive
			//level on the D- line.
			// Send a ZLP
			USB_SendZlp();
   8087e:	f7ff fe49 	bl	80514 <_ZL11USB_SendZlpv>
			UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_TSTK;
   80882:	4b2b      	ldr	r3, [pc, #172]	; (80930 <_ZL7USB_ISRv+0x284>)
   80884:	681a      	ldr	r2, [r3, #0]
   80886:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   8088a:	601a      	str	r2, [r3, #0]
   8088c:	e7fe      	b.n	8088c <_ZL7USB_ISRv+0x1e0>
			//determined to be correct) within the normal allowed device response time. This enables testing of
			//the device squelch level circuitry and, additionally, provides a general purpose stimulus/response
			//test for basic functional testing.

			// Send a ZLP
			USB_SendZlp();
   8088e:	f7ff fe41 	bl	80514 <_ZL11USB_SendZlpv>
							   | UOTGHS_DEVIDR_DMA_1
							   | UOTGHS_DEVIDR_DMA_2
							   | UOTGHS_DEVIDR_DMA_3
							   | UOTGHS_DEVIDR_DMA_4
							   | UOTGHS_DEVIDR_DMA_5
							   | UOTGHS_DEVIDR_DMA_6;
   80892:	4a2f      	ldr	r2, [pc, #188]	; (80950 <_ZL7USB_ISRv+0x2a4>)
   80894:	4b26      	ldr	r3, [pc, #152]	; (80930 <_ZL7USB_ISRv+0x284>)
   80896:	615a      	str	r2, [r3, #20]
   80898:	e7fe      	b.n	80898 <_ZL7USB_ISRv+0x1ec>

                        Test_Mode_Support( (setup.wIndex & 0xFF00)>>8 );
                    }
                }
			}
			else if (SET_ADDRESS == r)
   8089a:	2805      	cmp	r0, #5
   8089c:	d106      	bne.n	808ac <_ZL7USB_ISRv+0x200>
			{
				TRACE_CORE(puts(">>> EP0 Int: SET_ADDRESS\r\n");)
				UDD_WaitIN();
   8089e:	f000 ff9b 	bl	817d8 <UDD_WaitIN>
				UDD_SetAddress(setup.wValueL);
   808a2:	f89d 0012 	ldrb.w	r0, [sp, #18]
   808a6:	f001 f8a1 	bl	819ec <UDD_SetAddress>
   808aa:	e0f7      	b.n	80a9c <_ZL7USB_ISRv+0x3f0>
			}
			else if (GET_DESCRIPTOR == r)
   808ac:	2806      	cmp	r0, #6
   808ae:	f040 80be 	bne.w	80a2e <_ZL7USB_ISRv+0x382>
	return true;
}

static bool USBD_SendDescriptor(Setup& setup)
{
	uint8_t t = setup.wValueH;
   808b2:	f89d 5013 	ldrb.w	r5, [sp, #19]
   808b6:	f8bd 7016 	ldrh.w	r7, [sp, #22]
	uint8_t desc_length = 0;
	const uint8_t* desc_addr = 0;

	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
   808ba:	2d02      	cmp	r5, #2
   808bc:	d12c      	bne.n	80918 <_ZL7USB_ISRv+0x26c>
//	This really needs dynamic endpoint allocation etc
//	TODO
static bool USBD_SendConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
   808be:	4620      	mov	r0, r4
   808c0:	f7ff fe1e 	bl	80500 <_Z16USBD_InitControli>
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendInterfaces();
   808c4:	f7ff fe89 	bl	805da <_Z19USBD_SendInterfacesv>
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   808c8:	2609      	movs	r6, #9
   808ca:	f10d 0804 	add.w	r8, sp, #4
   808ce:	4621      	mov	r1, r4
   808d0:	4632      	mov	r2, r6
static bool USBD_SendConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendInterfaces();
   808d2:	4682      	mov	sl, r0
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   808d4:	4640      	mov	r0, r8
   808d6:	f001 f8c9 	bl	81a6c <memset>
   808da:	2301      	movs	r3, #1
   808dc:	f88d 3009 	strb.w	r3, [sp, #9]
   808e0:	3b41      	subs	r3, #65	; 0x41
   808e2:	f88d 300b 	strb.w	r3, [sp, #11]
   808e6:	333a      	adds	r3, #58	; 0x3a
   808e8:	f88d 300c 	strb.w	r3, [sp, #12]
   808ec:	4b19      	ldr	r3, [pc, #100]	; (80954 <_ZL7USB_ISRv+0x2a8>)
	//TRACE_CORE(printf("=> USBD_SendConfiguration clen=%d\r\n", config.clen);)

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
   808ee:	4638      	mov	r0, r7
	int interfaces = USBD_SendInterfaces();
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   808f0:	681b      	ldr	r3, [r3, #0]
   808f2:	f88d 6004 	strb.w	r6, [sp, #4]
   808f6:	199b      	adds	r3, r3, r6
   808f8:	f8ad 3006 	strh.w	r3, [sp, #6]
   808fc:	f88d 5005 	strb.w	r5, [sp, #5]
   80900:	f88d a008 	strb.w	sl, [sp, #8]
	//TRACE_CORE(printf("=> USBD_SendConfiguration clen=%d\r\n", config.clen);)

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
   80904:	f7ff fdfc 	bl	80500 <_Z16USBD_InitControli>
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   80908:	4641      	mov	r1, r8
   8090a:	4632      	mov	r2, r6
   8090c:	4620      	mov	r0, r4
   8090e:	f7ff fe8b 	bl	80628 <_Z16USBD_SendControlhPKvm>
	USBD_SendInterfaces();
   80912:	f7ff fe62 	bl	805da <_Z19USBD_SendInterfacesv>
   80916:	e0c1      	b.n	80a9c <_ZL7USB_ISRv+0x3f0>
	{
		TRACE_CORE(printf("=> USBD_SendDescriptor : USB_CONFIGURATION_DESCRIPTOR_TYPE length=%d\r\n", setup.wLength);)
		return USBD_SendConfiguration(setup.wLength);
	}

	USBD_InitControl(setup.wLength);
   80918:	4638      	mov	r0, r7
   8091a:	f7ff fdf1 	bl	80500 <_Z16USBD_InitControli>
#ifdef HID_ENABLED
	if (HID_REPORT_DESCRIPTOR_TYPE == t)
   8091e:	2d22      	cmp	r5, #34	; 0x22
   80920:	d11a      	bne.n	80958 <_ZL7USB_ISRv+0x2ac>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : HID_REPORT_DESCRIPTOR_TYPE\r\n");)
		return HID_GetDescriptor(t);
   80922:	4628      	mov	r0, r5
   80924:	f000 fa42 	bl	80dac <_Z17HID_GetDescriptori>
   80928:	3800      	subs	r0, #0
   8092a:	bf18      	it	ne
   8092c:	2001      	movne	r0, #1
   8092e:	e0b4      	b.n	80a9a <_ZL7USB_ISRv+0x3ee>
   80930:	400ac000 	.word	0x400ac000
   80934:	20070070 	.word	0x20070070
   80938:	20070484 	.word	0x20070484
   8093c:	20070051 	.word	0x20070051
   80940:	2007006c 	.word	0x2007006c
   80944:	20190000 	.word	0x20190000
   80948:	dfef1c08 	.word	0xdfef1c08
   8094c:	20190035 	.word	0x20190035
   80950:	7e07f07f 	.word	0x7e07f07f
   80954:	20070054 	.word	0x20070054
	}
#endif

	if (USB_DEVICE_DESCRIPTOR_TYPE == t)
   80958:	2d01      	cmp	r5, #1
   8095a:	d110      	bne.n	8097e <_ZL7USB_ISRv+0x2d2>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : USB_DEVICE_DESCRIPTOR_TYPE\r\n");)
		if (setup.wLength == 8)
   8095c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   80960:	2a08      	cmp	r2, #8
   80962:	d102      	bne.n	8096a <_ZL7USB_ISRv+0x2be>
		{
			_cdcComposite = 1;
   80964:	4b53      	ldr	r3, [pc, #332]	; (80ab4 <_ZL7USB_ISRv+0x408>)
   80966:	2101      	movs	r1, #1
   80968:	6019      	str	r1, [r3, #0]
		}
		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorA : (const uint8_t*)&USB_DeviceDescriptor;
   8096a:	4b52      	ldr	r3, [pc, #328]	; (80ab4 <_ZL7USB_ISRv+0x408>)
   8096c:	4952      	ldr	r1, [pc, #328]	; (80ab8 <_ZL7USB_ISRv+0x40c>)
   8096e:	6818      	ldr	r0, [r3, #0]
   80970:	4b52      	ldr	r3, [pc, #328]	; (80abc <_ZL7USB_ISRv+0x410>)
   80972:	2800      	cmp	r0, #0
   80974:	bf08      	it	eq
   80976:	4619      	moveq	r1, r3
        if( *desc_addr > setup.wLength ) {
   80978:	2a11      	cmp	r2, #17
   8097a:	d853      	bhi.n	80a24 <_ZL7USB_ISRv+0x378>
   8097c:	e017      	b.n	809ae <_ZL7USB_ISRv+0x302>
            desc_length = setup.wLength;
        }
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
   8097e:	2d03      	cmp	r5, #3
   80980:	d117      	bne.n	809b2 <_ZL7USB_ISRv+0x306>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : USB_STRING_DESCRIPTOR_TYPE\r\n");)
		if (setup.wValueL == 0) {
   80982:	f89d 3012 	ldrb.w	r3, [sp, #18]
   80986:	b933      	cbnz	r3, 80996 <_ZL7USB_ISRv+0x2ea>
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
   80988:	494d      	ldr	r1, [pc, #308]	; (80ac0 <_ZL7USB_ISRv+0x414>)
			return USB_SendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
		}
		else {
			return false;
		}
		if( *desc_addr > setup.wLength ) {
   8098a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   8098e:	780b      	ldrb	r3, [r1, #0]
   80990:	4293      	cmp	r3, r2
   80992:	d80c      	bhi.n	809ae <_ZL7USB_ISRv+0x302>
   80994:	e046      	b.n	80a24 <_ZL7USB_ISRv+0x378>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : USB_STRING_DESCRIPTOR_TYPE\r\n");)
		if (setup.wValueL == 0) {
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
		}
		else if (setup.wValueL == IPRODUCT) {
   80996:	2b02      	cmp	r3, #2
   80998:	d101      	bne.n	8099e <_ZL7USB_ISRv+0x2f2>
			return USB_SendStringDescriptor(STRING_PRODUCT, setup.wLength);
   8099a:	484a      	ldr	r0, [pc, #296]	; (80ac4 <_ZL7USB_ISRv+0x418>)
   8099c:	e002      	b.n	809a4 <_ZL7USB_ISRv+0x2f8>
		}
		else if (setup.wValueL == IMANUFACTURER) {
   8099e:	2b01      	cmp	r3, #1
   809a0:	d17f      	bne.n	80aa2 <_ZL7USB_ISRv+0x3f6>
			return USB_SendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
   809a2:	4849      	ldr	r0, [pc, #292]	; (80ac8 <_ZL7USB_ISRv+0x41c>)
   809a4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   809a8:	f7ff fe5e 	bl	80668 <_ZL24USB_SendStringDescriptorPKhi>
   809ac:	e075      	b.n	80a9a <_ZL7USB_ISRv+0x3ee>
		}
		else {
			return false;
		}
		if( *desc_addr > setup.wLength ) {
			desc_length = setup.wLength;
   809ae:	b2d2      	uxtb	r2, r2
   809b0:	e037      	b.n	80a22 <_ZL7USB_ISRv+0x376>
		}
	}
	else if (USB_DEVICE_QUALIFIER == t)
   809b2:	2d06      	cmp	r5, #6
   809b4:	d105      	bne.n	809c2 <_ZL7USB_ISRv+0x316>
	{
		// Device qualifier descriptor requested
		desc_addr = (const uint8_t*)&USB_DeviceQualifier;
        if( *desc_addr > setup.wLength ) {
   809b6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   809ba:	2a09      	cmp	r2, #9
   809bc:	d874      	bhi.n	80aa8 <_ZL7USB_ISRv+0x3fc>
            desc_length = setup.wLength;
   809be:	b2d2      	uxtb	r2, r2
   809c0:	e073      	b.n	80aaa <_ZL7USB_ISRv+0x3fe>
        }
    }
    else if (USB_OTHER_SPEED_CONFIGURATION == t)
   809c2:	2d07      	cmp	r5, #7
   809c4:	d16d      	bne.n	80aa2 <_ZL7USB_ISRv+0x3f6>
}

static bool USBD_SendOtherConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
   809c6:	2000      	movs	r0, #0
        }
    }
    else if (USB_OTHER_SPEED_CONFIGURATION == t)
    {
		// Other configuration descriptor requested
		return USBD_SendOtherConfiguration(setup.wLength);
   809c8:	f8bd 7016 	ldrh.w	r7, [sp, #22]
}

static bool USBD_SendOtherConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
   809cc:	f7ff fd98 	bl	80500 <_Z16USBD_InitControli>
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendOtherInterfaces();
   809d0:	f7ff fdf5 	bl	805be <_Z24USBD_SendOtherInterfacesv>
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   809d4:	2409      	movs	r4, #9
   809d6:	ae01      	add	r6, sp, #4
   809d8:	2100      	movs	r1, #0
   809da:	4622      	mov	r2, r4
static bool USBD_SendOtherConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendOtherInterfaces();
   809dc:	4680      	mov	r8, r0
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   809de:	4630      	mov	r0, r6
   809e0:	f001 f844 	bl	81a6c <memset>
   809e4:	2301      	movs	r3, #1
   809e6:	f88d 3009 	strb.w	r3, [sp, #9]
   809ea:	3b41      	subs	r3, #65	; 0x41
   809ec:	f88d 300b 	strb.w	r3, [sp, #11]
   809f0:	333a      	adds	r3, #58	; 0x3a
   809f2:	f88d 300c 	strb.w	r3, [sp, #12]
   809f6:	4b35      	ldr	r3, [pc, #212]	; (80acc <_ZL7USB_ISRv+0x420>)
	//TRACE_CORE(printf("=> USBD_SendConfiguration clen=%d\r\n", config.clen);)

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
   809f8:	4638      	mov	r0, r7
	int interfaces = USBD_SendOtherInterfaces();
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   809fa:	681b      	ldr	r3, [r3, #0]
   809fc:	f88d 4004 	strb.w	r4, [sp, #4]
   80a00:	191b      	adds	r3, r3, r4
   80a02:	f8ad 3006 	strh.w	r3, [sp, #6]
   80a06:	f88d 5005 	strb.w	r5, [sp, #5]
   80a0a:	f88d 8008 	strb.w	r8, [sp, #8]
	//TRACE_CORE(printf("=> USBD_SendConfiguration clen=%d\r\n", config.clen);)

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
   80a0e:	f7ff fd77 	bl	80500 <_Z16USBD_InitControli>
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   80a12:	4631      	mov	r1, r6
   80a14:	4622      	mov	r2, r4
   80a16:	2000      	movs	r0, #0
   80a18:	f7ff fe06 	bl	80628 <_Z16USBD_SendControlhPKvm>
	USBD_SendOtherInterfaces();
   80a1c:	f7ff fdcf 	bl	805be <_Z24USBD_SendOtherInterfacesv>
   80a20:	e03c      	b.n	80a9c <_ZL7USB_ISRv+0x3f0>
	if (desc_addr == 0)
	{
		return false;
	}

	if (desc_length == 0)
   80a22:	b902      	cbnz	r2, 80a26 <_ZL7USB_ISRv+0x37a>
	{
		desc_length = *desc_addr;
   80a24:	780a      	ldrb	r2, [r1, #0]
	}

	TRACE_CORE(printf("=> USBD_SendDescriptor : desc_addr=%p desc_length=%d\r\n", desc_addr, desc_length);)
	USBD_SendControl(0, desc_addr, desc_length);
   80a26:	2000      	movs	r0, #0
   80a28:	f7ff fdfe 	bl	80628 <_Z16USBD_SendControlhPKvm>
   80a2c:	e036      	b.n	80a9c <_ZL7USB_ISRv+0x3f0>
			else if (GET_DESCRIPTOR == r)
			{
				TRACE_CORE(puts(">>> EP0 Int: GET_DESCRIPTOR\r\n");)
				ok = USBD_SendDescriptor(setup);
			}
			else if (SET_DESCRIPTOR == r)
   80a2e:	2807      	cmp	r0, #7
   80a30:	d037      	beq.n	80aa2 <_ZL7USB_ISRv+0x3f6>
			{
				TRACE_CORE(puts(">>> EP0 Int: SET_DESCRIPTOR\r\n");)
				ok = false;
			}
			else if (GET_CONFIGURATION == r)
   80a32:	2808      	cmp	r0, #8
   80a34:	d106      	bne.n	80a44 <_ZL7USB_ISRv+0x398>
			{
				TRACE_CORE(puts(">>> EP0 Int: GET_CONFIGURATION\r\n");)
				UDD_Send8(EP0, _usbConfiguration);
   80a36:	4b26      	ldr	r3, [pc, #152]	; (80ad0 <_ZL7USB_ISRv+0x424>)
   80a38:	4620      	mov	r0, r4
   80a3a:	6819      	ldr	r1, [r3, #0]
   80a3c:	b2c9      	uxtb	r1, r1
   80a3e:	f000 ff4f 	bl	818e0 <UDD_Send8>
   80a42:	e02b      	b.n	80a9c <_ZL7USB_ISRv+0x3f0>
			}
			else if (SET_CONFIGURATION == r)
   80a44:	2809      	cmp	r0, #9
   80a46:	d112      	bne.n	80a6e <_ZL7USB_ISRv+0x3c2>
			{
				if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
   80a48:	f015 0f1f 	tst.w	r5, #31
   80a4c:	d129      	bne.n	80aa2 <_ZL7USB_ISRv+0x3f6>
				{
					TRACE_CORE(printf(">>> EP0 Int: SET_CONFIGURATION REQUEST_DEVICE %d\r\n", setup.wValueL);)

					UDD_InitEndpoints(EndPoints, (sizeof(EndPoints) / sizeof(EndPoints[0])));
   80a4e:	4821      	ldr	r0, [pc, #132]	; (80ad4 <_ZL7USB_ISRv+0x428>)
   80a50:	2105      	movs	r1, #5
   80a52:	f000 fea3 	bl	8179c <UDD_InitEndpoints>
					_usbConfiguration = setup.wValueL;
   80a56:	f89d 2012 	ldrb.w	r2, [sp, #18]
   80a5a:	4b1d      	ldr	r3, [pc, #116]	; (80ad0 <_ZL7USB_ISRv+0x424>)
   80a5c:	601a      	str	r2, [r3, #0]

#ifdef CDC_ENABLED
					// Enable interrupt for CDC reception from host (OUT packet)
					udd_enable_out_received_interrupt(CDC_RX);
   80a5e:	4b1e      	ldr	r3, [pc, #120]	; (80ad8 <_ZL7USB_ISRv+0x42c>)
   80a60:	2202      	movs	r2, #2
   80a62:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
					udd_enable_endpoint_interrupt(CDC_RX);
   80a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80a6a:	619a      	str	r2, [r3, #24]
   80a6c:	e016      	b.n	80a9c <_ZL7USB_ISRv+0x3f0>
				{
					TRACE_CORE(puts(">>> EP0 Int: SET_CONFIGURATION failed!\r\n");)
					ok = false;
				}
			}
			else if (GET_INTERFACE == r)
   80a6e:	280a      	cmp	r0, #10
   80a70:	d103      	bne.n	80a7a <_ZL7USB_ISRv+0x3ce>
			{
				TRACE_CORE(puts(">>> EP0 Int: GET_INTERFACE\r\n");)
				UDD_Send8(EP0, _usbSetInterface);
   80a72:	4b1a      	ldr	r3, [pc, #104]	; (80adc <_ZL7USB_ISRv+0x430>)
   80a74:	380a      	subs	r0, #10
   80a76:	7819      	ldrb	r1, [r3, #0]
   80a78:	e7e1      	b.n	80a3e <_ZL7USB_ISRv+0x392>
			}
			else if (SET_INTERFACE == r)
   80a7a:	280b      	cmp	r0, #11
   80a7c:	d10e      	bne.n	80a9c <_ZL7USB_ISRv+0x3f0>
			{
                _usbSetInterface = setup.wValueL;
   80a7e:	f89d 2012 	ldrb.w	r2, [sp, #18]
   80a82:	4b16      	ldr	r3, [pc, #88]	; (80adc <_ZL7USB_ISRv+0x430>)
   80a84:	601a      	str	r2, [r3, #0]
   80a86:	e009      	b.n	80a9c <_ZL7USB_ISRv+0x3f0>
		}
		else
		{
			TRACE_CORE(puts(">>> EP0 Int: ClassInterfaceRequest\r\n");)

			UDD_WaitIN(); // Workaround: need tempo here, else CDC serial won't open correctly
   80a88:	f000 fea6 	bl	817d8 <UDD_WaitIN>

			USBD_InitControl(setup.wLength); // Max length of transfer
   80a8c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   80a90:	f7ff fd36 	bl	80500 <_Z16USBD_InitControli>
			ok = USBD_ClassInterfaceRequest(setup);
   80a94:	a804      	add	r0, sp, #16
   80a96:	f7ff fdae 	bl	805f6 <_Z26USBD_ClassInterfaceRequestR5Setup>
		}

		if (ok)
   80a9a:	b110      	cbz	r0, 80aa2 <_ZL7USB_ISRv+0x3f6>
		{
			TRACE_CORE(puts(">>> EP0 Int: Send packet\r\n");)
			UDD_ClearIN();
   80a9c:	f000 feb0 	bl	81800 <UDD_ClearIN>
   80aa0:	e005      	b.n	80aae <_ZL7USB_ISRv+0x402>
		}
		else
		{
			TRACE_CORE(puts(">>> EP0 Int: Stall\r\n");)
			UDD_Stall();
   80aa2:	f000 ff5f 	bl	81964 <UDD_Stall>
   80aa6:	e002      	b.n	80aae <_ZL7USB_ISRv+0x402>
   80aa8:	2200      	movs	r2, #0
   80aaa:	490d      	ldr	r1, [pc, #52]	; (80ae0 <_ZL7USB_ISRv+0x434>)
   80aac:	e7b9      	b.n	80a22 <_ZL7USB_ISRv+0x376>
		}
	}
}
   80aae:	b007      	add	sp, #28
   80ab0:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
   80ab4:	2007005c 	.word	0x2007005c
   80ab8:	00081bc8 	.word	0x00081bc8
   80abc:	00081bdc 	.word	0x00081bdc
   80ac0:	00081c04 	.word	0x00081c04
   80ac4:	00081c40 	.word	0x00081c40
   80ac8:	00081c4c 	.word	0x00081c4c
   80acc:	20070054 	.word	0x20070054
   80ad0:	20070070 	.word	0x20070070
   80ad4:	00081bf0 	.word	0x00081bf0
   80ad8:	400ac000 	.word	0x400ac000
   80adc:	20070068 	.word	0x20070068
   80ae0:	00081c58 	.word	0x00081c58

00080ae4 <_Z9USBD_SendmPKvm>:
{
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;

    if (!_usbConfiguration)
   80ae4:	4b11      	ldr	r3, [pc, #68]	; (80b2c <_Z9USBD_SendmPKvm+0x48>)
    //else return 512 - UDD_FifoByteCount(ep & 0xF);  // EPX_SIZE  jcb
//}

//	Blocking Send of data to an endpoint
uint32_t USBD_Send(uint32_t ep, const void* d, uint32_t len)
{
   80ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;

    if (!_usbConfiguration)
   80aea:	681b      	ldr	r3, [r3, #0]
    //else return 512 - UDD_FifoByteCount(ep & 0xF);  // EPX_SIZE  jcb
//}

//	Blocking Send of data to an endpoint
uint32_t USBD_Send(uint32_t ep, const void* d, uint32_t len)
{
   80aec:	4680      	mov	r8, r0
   80aee:	4615      	mov	r5, r2
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;

    if (!_usbConfiguration)
   80af0:	b913      	cbnz	r3, 80af8 <_Z9USBD_SendmPKvm+0x14>
   80af2:	f04f 35ff 	mov.w	r5, #4294967295
   80af6:	e015      	b.n	80b24 <_Z9USBD_SendmPKvm+0x40>
//	Blocking Send of data to an endpoint
uint32_t USBD_Send(uint32_t ep, const void* d, uint32_t len)
{
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;
   80af8:	460e      	mov	r6, r1
   80afa:	4614      	mov	r4, r2
   80afc:	e010      	b.n	80b20 <_Z9USBD_SendmPKvm+0x3c>
		return -1;
    }

	while (len)
	{
        if(ep==0) n = EP0_SIZE;
   80afe:	f1b8 0f00 	cmp.w	r8, #0
   80b02:	bf0c      	ite	eq
   80b04:	2740      	moveq	r7, #64	; 0x40
   80b06:	f44f 7700 	movne.w	r7, #512	; 0x200
   80b0a:	42a7      	cmp	r7, r4
   80b0c:	bf28      	it	cs
   80b0e:	4627      	movcs	r7, r4
        else n =  EPX_SIZE;
		if (n > len)
			n = len;
		len -= n;

		UDD_Send(ep & 0xF, data, n);
   80b10:	4631      	mov	r1, r6
   80b12:	f008 000f 	and.w	r0, r8, #15
   80b16:	463a      	mov	r2, r7
   80b18:	f000 fe9a 	bl	81850 <UDD_Send>
	{
        if(ep==0) n = EP0_SIZE;
        else n =  EPX_SIZE;
		if (n > len)
			n = len;
		len -= n;
   80b1c:	1be4      	subs	r4, r4, r7

		UDD_Send(ep & 0xF, data, n);
		data += n;
   80b1e:	19f6      	adds	r6, r6, r7
    {
    	TRACE_CORE(printf("pb conf\n\r");)
		return -1;
    }

	while (len)
   80b20:	2c00      	cmp	r4, #0
   80b22:	d1ec      	bne.n	80afe <_Z9USBD_SendmPKvm+0x1a>
		data += n;
    }
	//TXLED1;					// light the TX LED
	//TxLEDPulse = TX_RX_LED_PULSE_MS;
	return r;
}
   80b24:	4628      	mov	r0, r5
   80b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b2a:	bf00      	nop
   80b2c:	20070070 	.word	0x20070070

00080b30 <_Z9USBD_RecvmPvm>:
}

//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
{
   80b30:	e92d 45f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, sl, lr}
	if (!_usbConfiguration || len < 0)
   80b34:	4b1b      	ldr	r3, [pc, #108]	; (80ba4 <_Z9USBD_RecvmPvm+0x74>)
}

//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
{
   80b36:	460c      	mov	r4, r1
	if (!_usbConfiguration || len < 0)
   80b38:	681b      	ldr	r3, [r3, #0]
}

//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
{
   80b3a:	4615      	mov	r5, r2
	if (!_usbConfiguration || len < 0)
   80b3c:	bb03      	cbnz	r3, 80b80 <_Z9USBD_RecvmPvm+0x50>
   80b3e:	f04f 35ff 	mov.w	r5, #4294967295
   80b42:	e01a      	b.n	80b7a <_Z9USBD_RecvmPvm+0x4a>
	uint32_t n = UDD_FifoByteCount(ep & 0xF);
	len = min(n,len);
	n = len;
	uint8_t* dst = (uint8_t*)d;
	while (n--)
		*dst++ = UDD_Recv8(ep & 0xF);
   80b44:	4630      	mov	r0, r6
   80b46:	f000 fedf 	bl	81908 <UDD_Recv8>
   80b4a:	f108 38ff 	add.w	r8, r8, #4294967295
   80b4e:	55e0      	strb	r0, [r4, r7]
   80b50:	3701      	adds	r7, #1
	LockEP lock(ep);
	uint32_t n = UDD_FifoByteCount(ep & 0xF);
	len = min(n,len);
	n = len;
	uint8_t* dst = (uint8_t*)d;
	while (n--)
   80b52:	f1b8 0f00 	cmp.w	r8, #0
   80b56:	d1f5      	bne.n	80b44 <_Z9USBD_RecvmPvm+0x14>
		*dst++ = UDD_Recv8(ep & 0xF);
	if (len && !UDD_FifoByteCount(ep & 0xF)) // release empty buffer
   80b58:	b135      	cbz	r5, 80b68 <_Z9USBD_RecvmPvm+0x38>
   80b5a:	4630      	mov	r0, r6
   80b5c:	f000 ff0c 	bl	81978 <UDD_FifoByteCount>
   80b60:	b910      	cbnz	r0, 80b68 <_Z9USBD_RecvmPvm+0x38>
		UDD_ReleaseRX(ep & 0xF);
   80b62:	4630      	mov	r0, r6
   80b64:	f000 ff16 	bl	81994 <UDD_ReleaseRX>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   80b68:	f1ba 0f00 	cmp.w	sl, #0
   80b6c:	d005      	beq.n	80b7a <_Z9USBD_RecvmPvm+0x4a>
		cpu_irq_enable();
   80b6e:	4b0e      	ldr	r3, [pc, #56]	; (80ba8 <_Z9USBD_RecvmPvm+0x78>)
   80b70:	2201      	movs	r2, #1
   80b72:	601a      	str	r2, [r3, #0]
   80b74:	f3bf 8f5f 	dmb	sy
   80b78:	b662      	cpsie	i

	return len;
}
   80b7a:	4628      	mov	r0, r5
   80b7c:	e8bd 85f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, sl, pc}
typedef uint32_t irqflags_t;
extern int g_interrupt_enabled;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = g_interrupt_enabled;
   80b80:	4b09      	ldr	r3, [pc, #36]	; (80ba8 <_Z9USBD_RecvmPvm+0x78>)
   80b82:	f8d3 a000 	ldr.w	sl, [r3]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80b86:	b672      	cpsid	i
   80b88:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   80b8c:	2700      	movs	r7, #0
{
	if (!_usbConfiguration || len < 0)
		return -1;

	LockEP lock(ep);
	uint32_t n = UDD_FifoByteCount(ep & 0xF);
   80b8e:	f000 060f 	and.w	r6, r0, #15
   80b92:	601f      	str	r7, [r3, #0]
   80b94:	4630      	mov	r0, r6
   80b96:	f000 feef 	bl	81978 <UDD_FifoByteCount>
   80b9a:	42a8      	cmp	r0, r5
   80b9c:	bf38      	it	cc
   80b9e:	4605      	movcc	r5, r0
   80ba0:	46a8      	mov	r8, r5
	len = min(n,len);
	n = len;
	uint8_t* dst = (uint8_t*)d;
	while (n--)
   80ba2:	e7d6      	b.n	80b52 <_Z9USBD_RecvmPvm+0x22>
   80ba4:	20070070 	.word	0x20070070
   80ba8:	2007004c 	.word	0x2007004c

00080bac <_Z9USBD_Recvm>:
	return len;
}

//	Recv 1 byte if ready
uint32_t USBD_Recv(uint32_t ep)
{
   80bac:	b507      	push	{r0, r1, r2, lr}
	uint8_t c;
	if (USBD_Recv(ep & 0xF, &c, 1) != 1)
   80bae:	2201      	movs	r2, #1
   80bb0:	f10d 0107 	add.w	r1, sp, #7
   80bb4:	f000 000f 	and.w	r0, r0, #15
   80bb8:	f7ff ffba 	bl	80b30 <_Z9USBD_RecvmPvm>
   80bbc:	2801      	cmp	r0, #1
   80bbe:	bf14      	ite	ne
   80bc0:	f04f 30ff 	movne.w	r0, #4294967295
		return -1;
	else
		return c;
   80bc4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
}
   80bc8:	bd0e      	pop	{r1, r2, r3, pc}
	...

00080bcc <_GLOBAL__I_TxLEDPulse>:


//=======================================================================
//=======================================================================

USBDevice_ USBDevice;
   80bcc:	4801      	ldr	r0, [pc, #4]	; (80bd4 <_GLOBAL__I_TxLEDPulse+0x8>)
   80bce:	f7ff bcc3 	b.w	80558 <_ZN10USBDevice_C1Ev>
   80bd2:	bf00      	nop
   80bd4:	20070064 	.word	0x20070064

00080bd8 <_Z9HID_SetupR5Setup>:
}

bool WEAK HID_Setup(Setup& setup)
{
	uint8_t r = setup.bRequest;
	uint8_t requestType = setup.bmRequestType;
   80bd8:	7802      	ldrb	r2, [r0, #0]
	USBD_Send(HID_TX, p, len+1);
}

bool WEAK HID_Setup(Setup& setup)
{
	uint8_t r = setup.bRequest;
   80bda:	7843      	ldrb	r3, [r0, #1]
	uint8_t requestType = setup.bmRequestType;

	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
   80bdc:	2aa1      	cmp	r2, #161	; 0xa1
   80bde:	d108      	bne.n	80bf2 <_Z9HID_SetupR5Setup+0x1a>
	{
		if (HID_GET_REPORT == r)
   80be0:	2b01      	cmp	r3, #1
   80be2:	d101      	bne.n	80be8 <_Z9HID_SetupR5Setup+0x10>
   80be4:	4618      	mov	r0, r3
   80be6:	4770      	bx	lr
	for (uint32_t i=0; i<len; i++)
		p[i+1] = d[i];
	USBD_Send(HID_TX, p, len+1);
}

bool WEAK HID_Setup(Setup& setup)
   80be8:	2b03      	cmp	r3, #3
   80bea:	bf14      	ite	ne
   80bec:	2000      	movne	r0, #0
   80bee:	2001      	moveq	r0, #1
   80bf0:	4770      	bx	lr
			//Send8(_hid_protocol);	// TODO
			return true;
		}
	}

	if (REQUEST_HOSTTODEVICE_CLASS_INTERFACE == requestType)
   80bf2:	2a21      	cmp	r2, #33	; 0x21
   80bf4:	d10b      	bne.n	80c0e <_Z9HID_SetupR5Setup+0x36>
	{
		if (HID_SET_PROTOCOL == r)
   80bf6:	2b0b      	cmp	r3, #11
   80bf8:	d102      	bne.n	80c00 <_Z9HID_SetupR5Setup+0x28>
		{
			_hid_protocol = setup.wValueL;
   80bfa:	7882      	ldrb	r2, [r0, #2]
   80bfc:	4b05      	ldr	r3, [pc, #20]	; (80c14 <_Z9HID_SetupR5Setup+0x3c>)
   80bfe:	e003      	b.n	80c08 <_Z9HID_SetupR5Setup+0x30>
			return true;
		}

		if (HID_SET_IDLE == r)
   80c00:	2b0a      	cmp	r3, #10
   80c02:	d104      	bne.n	80c0e <_Z9HID_SetupR5Setup+0x36>
		{
			_hid_idle = setup.wValueL;
   80c04:	7882      	ldrb	r2, [r0, #2]
   80c06:	4b04      	ldr	r3, [pc, #16]	; (80c18 <_Z9HID_SetupR5Setup+0x40>)
   80c08:	701a      	strb	r2, [r3, #0]
   80c0a:	2001      	movs	r0, #1
			return true;
   80c0c:	4770      	bx	lr
   80c0e:	2000      	movs	r0, #0
		}
	}
	return false;
}
   80c10:	4770      	bx	lr
   80c12:	bf00      	nop
   80c14:	2007003c 	.word	0x2007003c
   80c18:	2007003d 	.word	0x2007003d

00080c1c <_ZN6Mouse_C1Ev>:

//================================================================================
//================================================================================
//	Mouse

Mouse_::Mouse_(void) : _buttons(0)
   80c1c:	2200      	movs	r2, #0
   80c1e:	7002      	strb	r2, [r0, #0]
{
}
   80c20:	4770      	bx	lr
	...

00080c24 <_ZN9Keyboard_C1Ev>:
   80c24:	2200      	movs	r2, #0
   80c26:	6042      	str	r2, [r0, #4]

//================================================================================
//================================================================================
//	Keyboard

Keyboard_::Keyboard_(void)
   80c28:	4a01      	ldr	r2, [pc, #4]	; (80c30 <_ZN9Keyboard_C1Ev+0xc>)
   80c2a:	6002      	str	r2, [r0, #0]
{
}
   80c2c:	4770      	bx	lr
   80c2e:	bf00      	nop
   80c30:	00081c78 	.word	0x00081c78

00080c34 <_ZN9Keyboard_5writeEh>:

size_t Keyboard_::write(uint8_t c)
{
	uint8_t p = 0;

	p = press(c);	// Keydown
   80c34:	6803      	ldr	r3, [r0, #0]
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
}

size_t Keyboard_::write(uint8_t c)
{
   80c36:	b570      	push	{r4, r5, r6, lr}
	uint8_t p = 0;

	p = press(c);	// Keydown
   80c38:	689b      	ldr	r3, [r3, #8]
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
}

size_t Keyboard_::write(uint8_t c)
{
   80c3a:	4604      	mov	r4, r0
   80c3c:	460e      	mov	r6, r1
	uint8_t p = 0;

	p = press(c);	// Keydown
   80c3e:	4798      	blx	r3
	release(c);		// Keyup
   80c40:	6823      	ldr	r3, [r4, #0]

size_t Keyboard_::write(uint8_t c)
{
	uint8_t p = 0;

	p = press(c);	// Keydown
   80c42:	4605      	mov	r5, r0
	release(c);		// Keyup
   80c44:	68db      	ldr	r3, [r3, #12]
   80c46:	4620      	mov	r0, r4
   80c48:	4631      	mov	r1, r6
   80c4a:	4798      	blx	r3

	return (p);		// Just return the result of press() since release() almost always returns 1
}
   80c4c:	b2e8      	uxtb	r0, r5
   80c4e:	bd70      	pop	{r4, r5, r6, pc}

00080c50 <_Z14HID_SendReporthPKvm>:
{
	return USBD_SendControl(0,_hidReportDescriptor,sizeof(_hidReportDescriptor));
}

void WEAK HID_SendReport(uint8_t id, const void* data, uint32_t len)
{
   80c50:	b500      	push	{lr}
   80c52:	b091      	sub	sp, #68	; 0x44
   80c54:	4694      	mov	ip, r2
   80c56:	460b      	mov	r3, r1
	uint8_t p[64];
	const uint8_t *d = reinterpret_cast<const uint8_t *>(data);

	p[0] = id;
   80c58:	f88d 0000 	strb.w	r0, [sp]
   80c5c:	2200      	movs	r2, #0
	for (uint32_t i=0; i<len; i++)
   80c5e:	e003      	b.n	80c68 <_Z14HID_SendReporthPKvm+0x18>
		p[i+1] = d[i];
   80c60:	1898      	adds	r0, r3, r2
   80c62:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   80c66:	5488      	strb	r0, [r1, r2]
{
	uint8_t p[64];
	const uint8_t *d = reinterpret_cast<const uint8_t *>(data);

	p[0] = id;
	for (uint32_t i=0; i<len; i++)
   80c68:	4562      	cmp	r2, ip
   80c6a:	4669      	mov	r1, sp
   80c6c:	f102 0201 	add.w	r2, r2, #1
   80c70:	d1f6      	bne.n	80c60 <_Z14HID_SendReporthPKvm+0x10>
		p[i+1] = d[i];
	USBD_Send(HID_TX, p, len+1);
   80c72:	2004      	movs	r0, #4
   80c74:	f7ff ff36 	bl	80ae4 <_Z9USBD_SendmPKvm>
}
   80c78:	b011      	add	sp, #68	; 0x44
   80c7a:	bd00      	pop	{pc}

00080c7c <_ZN9Keyboard_10sendReportEP9KeyReport>:
{
}

void Keyboard_::sendReport(KeyReport* keys)
{
	HID_SendReport(2,keys,sizeof(KeyReport));
   80c7c:	2002      	movs	r0, #2
   80c7e:	2208      	movs	r2, #8
   80c80:	f7ff bfe6 	b.w	80c50 <_Z14HID_SendReporthPKvm>

00080c84 <_ZN9Keyboard_10releaseAllEv>:
	return 1;
}

void Keyboard_::releaseAll(void)
{
	_keyReport.keys[0] = 0;
   80c84:	2300      	movs	r3, #0
	sendReport(&_keyReport);
	return 1;
}

void Keyboard_::releaseAll(void)
{
   80c86:	4601      	mov	r1, r0
	_keyReport.keys[1] = 0;
	_keyReport.keys[2] = 0;
	_keyReport.keys[3] = 0;
	_keyReport.keys[4] = 0;
	_keyReport.keys[5] = 0;
	_keyReport.modifiers = 0;
   80c88:	f801 3f08 	strb.w	r3, [r1, #8]!
	return 1;
}

void Keyboard_::releaseAll(void)
{
	_keyReport.keys[0] = 0;
   80c8c:	7283      	strb	r3, [r0, #10]
	_keyReport.keys[1] = 0;
   80c8e:	72c3      	strb	r3, [r0, #11]
	_keyReport.keys[2] = 0;
   80c90:	7303      	strb	r3, [r0, #12]
	_keyReport.keys[3] = 0;
   80c92:	7343      	strb	r3, [r0, #13]
	_keyReport.keys[4] = 0;
   80c94:	7383      	strb	r3, [r0, #14]
	_keyReport.keys[5] = 0;
   80c96:	73c3      	strb	r3, [r0, #15]
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
   80c98:	f7ff bff0 	b.w	80c7c <_ZN9Keyboard_10sendReportEP9KeyReport>

00080c9c <_ZN9Keyboard_7releaseEh>:
// sends the report.  This tells the OS the key is no longer pressed and that
// it shouldn't be repeated any more.
size_t Keyboard_::release(uint8_t k)
{
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80c9c:	2987      	cmp	r1, #135	; 0x87

// release() takes the specified key out of the persistent key report and
// sends the report.  This tells the OS the key is no longer pressed and that
// it shouldn't be repeated any more.
size_t Keyboard_::release(uint8_t k)
{
   80c9e:	b508      	push	{r3, lr}
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80ca0:	d902      	bls.n	80ca8 <_ZN9Keyboard_7releaseEh+0xc>
		k = k - 136;
   80ca2:	3178      	adds	r1, #120	; 0x78
   80ca4:	b2c9      	uxtb	r1, r1
   80ca6:	e01a      	b.n	80cde <_ZN9Keyboard_7releaseEh+0x42>
	} else if (k >= 128) {	// it's a modifier key
   80ca8:	f011 0f80 	tst.w	r1, #128	; 0x80
   80cac:	d009      	beq.n	80cc2 <_ZN9Keyboard_7releaseEh+0x26>
		_keyReport.modifiers &= ~(1<<(k-128));
   80cae:	2301      	movs	r3, #1
   80cb0:	3980      	subs	r1, #128	; 0x80
   80cb2:	fa13 f101 	lsls.w	r1, r3, r1
   80cb6:	7a03      	ldrb	r3, [r0, #8]
   80cb8:	ea23 0101 	bic.w	r1, r3, r1
   80cbc:	7201      	strb	r1, [r0, #8]
   80cbe:	2100      	movs	r1, #0
   80cc0:	e00d      	b.n	80cde <_ZN9Keyboard_7releaseEh+0x42>
		k = 0;
	} else {				// it's a printing key
		k = _asciimap[k];
   80cc2:	4b12      	ldr	r3, [pc, #72]	; (80d0c <_ZN9Keyboard_7releaseEh+0x70>)
   80cc4:	5c59      	ldrb	r1, [r3, r1]
		if (!k) {
   80cc6:	b909      	cbnz	r1, 80ccc <_ZN9Keyboard_7releaseEh+0x30>
   80cc8:	4608      	mov	r0, r1
   80cca:	bd08      	pop	{r3, pc}
			return 0;
		}
		if (k & 0x80) {							// it's a capital letter or other character reached with shift
   80ccc:	f011 0f80 	tst.w	r1, #128	; 0x80
   80cd0:	d005      	beq.n	80cde <_ZN9Keyboard_7releaseEh+0x42>
			_keyReport.modifiers &= ~(0x02);	// the left shift modifier
   80cd2:	7a03      	ldrb	r3, [r0, #8]
			k &= 0x7F;
   80cd4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		k = _asciimap[k];
		if (!k) {
			return 0;
		}
		if (k & 0x80) {							// it's a capital letter or other character reached with shift
			_keyReport.modifiers &= ~(0x02);	// the left shift modifier
   80cd8:	f023 0302 	bic.w	r3, r3, #2
   80cdc:	7203      	strb	r3, [r0, #8]
			k &= 0x7F;
   80cde:	4603      	mov	r3, r0
   80ce0:	2200      	movs	r2, #0
	}

	// Test the key report to see if k is present.  Clear it if it exists.
	// Check all positions in case the key is present more than once (which it shouldn't be)
	for (i=0; i<6; i++) {
		if (0 != k && _keyReport.keys[i] == k) {
   80ce2:	b139      	cbz	r1, 80cf4 <_ZN9Keyboard_7releaseEh+0x58>
   80ce4:	f893 c00a 	ldrb.w	ip, [r3, #10]
   80ce8:	458c      	cmp	ip, r1
			_keyReport.keys[i] = 0x00;
   80cea:	bf04      	itt	eq
   80cec:	f04f 0c00 	moveq.w	ip, #0
   80cf0:	f883 c00a 	strbeq.w	ip, [r3, #10]
		}
	}

	// Test the key report to see if k is present.  Clear it if it exists.
	// Check all positions in case the key is present more than once (which it shouldn't be)
	for (i=0; i<6; i++) {
   80cf4:	3201      	adds	r2, #1
   80cf6:	b2d2      	uxtb	r2, r2
   80cf8:	3301      	adds	r3, #1
   80cfa:	2a06      	cmp	r2, #6
   80cfc:	d1f1      	bne.n	80ce2 <_ZN9Keyboard_7releaseEh+0x46>
		if (0 != k && _keyReport.keys[i] == k) {
			_keyReport.keys[i] = 0x00;
		}
	}

	sendReport(&_keyReport);
   80cfe:	f100 0108 	add.w	r1, r0, #8
   80d02:	f7ff ffbb 	bl	80c7c <_ZN9Keyboard_10sendReportEP9KeyReport>
   80d06:	2001      	movs	r0, #1
	return 1;
}
   80d08:	bd08      	pop	{r3, pc}
   80d0a:	bf00      	nop
   80d0c:	00081c90 	.word	0x00081c90

00080d10 <_ZN9Keyboard_5pressEh>:
// USB HID works, the host acts like the key remains pressed until we
// call release(), releaseAll(), or otherwise clear the report and resend.
size_t Keyboard_::press(uint8_t k)
{
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80d10:	2987      	cmp	r1, #135	; 0x87
// press() adds the specified key (printing, non-printing, or modifier)
// to the persistent key report and sends the report.  Because of the way
// USB HID works, the host acts like the key remains pressed until we
// call release(), releaseAll(), or otherwise clear the report and resend.
size_t Keyboard_::press(uint8_t k)
{
   80d12:	b538      	push	{r3, r4, r5, lr}
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80d14:	d902      	bls.n	80d1c <_ZN9Keyboard_5pressEh+0xc>
		k = k - 136;
   80d16:	3178      	adds	r1, #120	; 0x78
   80d18:	b2c9      	uxtb	r1, r1
   80d1a:	e01b      	b.n	80d54 <_ZN9Keyboard_5pressEh+0x44>
	} else if (k >= 128) {	// it's a modifier key
   80d1c:	f011 0f80 	tst.w	r1, #128	; 0x80
   80d20:	d008      	beq.n	80d34 <_ZN9Keyboard_5pressEh+0x24>
		_keyReport.modifiers |= (1<<(k-128));
   80d22:	2301      	movs	r3, #1
   80d24:	3980      	subs	r1, #128	; 0x80
   80d26:	fa13 f101 	lsls.w	r1, r3, r1
   80d2a:	7a03      	ldrb	r3, [r0, #8]
   80d2c:	4319      	orrs	r1, r3
   80d2e:	7201      	strb	r1, [r0, #8]
   80d30:	2100      	movs	r1, #0
   80d32:	e00f      	b.n	80d54 <_ZN9Keyboard_5pressEh+0x44>
		k = 0;
	} else {				// it's a printing key
		k = _asciimap[k];
   80d34:	4b1c      	ldr	r3, [pc, #112]	; (80da8 <_ZN9Keyboard_5pressEh+0x98>)
   80d36:	5c59      	ldrb	r1, [r3, r1]
		if (!k) {
   80d38:	b919      	cbnz	r1, 80d42 <_ZN9Keyboard_5pressEh+0x32>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   80d3a:	2301      	movs	r3, #1
   80d3c:	6043      	str	r3, [r0, #4]
   80d3e:	4608      	mov	r0, r1
			setWriteError();
			return 0;
   80d40:	bd38      	pop	{r3, r4, r5, pc}
		}
		if (k & 0x80) {						// it's a capital letter or other character reached with shift
   80d42:	f011 0f80 	tst.w	r1, #128	; 0x80
   80d46:	d005      	beq.n	80d54 <_ZN9Keyboard_5pressEh+0x44>
			_keyReport.modifiers |= 0x02;	// the left shift modifier
   80d48:	7a03      	ldrb	r3, [r0, #8]
			k &= 0x7F;
   80d4a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if (!k) {
			setWriteError();
			return 0;
		}
		if (k & 0x80) {						// it's a capital letter or other character reached with shift
			_keyReport.modifiers |= 0x02;	// the left shift modifier
   80d4e:	f043 0302 	orr.w	r3, r3, #2
   80d52:	7203      	strb	r3, [r0, #8]
		}
	}

	// Add k to the key report only if it's not already present
	// and if there is an empty slot.
	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
   80d54:	7a83      	ldrb	r3, [r0, #10]
   80d56:	428b      	cmp	r3, r1
   80d58:	d020      	beq.n	80d9c <_ZN9Keyboard_5pressEh+0x8c>
   80d5a:	7ac3      	ldrb	r3, [r0, #11]
   80d5c:	428b      	cmp	r3, r1
   80d5e:	d01d      	beq.n	80d9c <_ZN9Keyboard_5pressEh+0x8c>
		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
   80d60:	7b03      	ldrb	r3, [r0, #12]
   80d62:	428b      	cmp	r3, r1
   80d64:	d01a      	beq.n	80d9c <_ZN9Keyboard_5pressEh+0x8c>
   80d66:	7b43      	ldrb	r3, [r0, #13]
   80d68:	428b      	cmp	r3, r1
   80d6a:	d017      	beq.n	80d9c <_ZN9Keyboard_5pressEh+0x8c>
		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {
   80d6c:	7b83      	ldrb	r3, [r0, #14]
   80d6e:	428b      	cmp	r3, r1
   80d70:	d014      	beq.n	80d9c <_ZN9Keyboard_5pressEh+0x8c>
   80d72:	7bc3      	ldrb	r3, [r0, #15]
   80d74:	428b      	cmp	r3, r1
   80d76:	d011      	beq.n	80d9c <_ZN9Keyboard_5pressEh+0x8c>
   80d78:	2200      	movs	r2, #0
   80d7a:	4613      	mov	r3, r2

		for (i=0; i<6; i++) {
			if (_keyReport.keys[i] == 0x00) {
   80d7c:	1884      	adds	r4, r0, r2
   80d7e:	7aa5      	ldrb	r5, [r4, #10]
   80d80:	b91d      	cbnz	r5, 80d8a <_ZN9Keyboard_5pressEh+0x7a>
				_keyReport.keys[i] = k;
				break;
			}
		}
		if (i == 6) {
   80d82:	2b06      	cmp	r3, #6
		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {

		for (i=0; i<6; i++) {
			if (_keyReport.keys[i] == 0x00) {
				_keyReport.keys[i] = k;
   80d84:	72a1      	strb	r1, [r4, #10]
				break;
			}
		}
		if (i == 6) {
   80d86:	d109      	bne.n	80d9c <_ZN9Keyboard_5pressEh+0x8c>
   80d88:	e004      	b.n	80d94 <_ZN9Keyboard_5pressEh+0x84>
	// and if there is an empty slot.
	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {

		for (i=0; i<6; i++) {
   80d8a:	3301      	adds	r3, #1
   80d8c:	b2db      	uxtb	r3, r3
   80d8e:	3201      	adds	r2, #1
   80d90:	2b06      	cmp	r3, #6
   80d92:	d1f3      	bne.n	80d7c <_ZN9Keyboard_5pressEh+0x6c>
   80d94:	2301      	movs	r3, #1
   80d96:	6043      	str	r3, [r0, #4]
   80d98:	2000      	movs	r0, #0
				break;
			}
		}
		if (i == 6) {
			setWriteError();
			return 0;
   80d9a:	bd38      	pop	{r3, r4, r5, pc}
		}
	}
	sendReport(&_keyReport);
   80d9c:	f100 0108 	add.w	r1, r0, #8
   80da0:	f7ff ff6c 	bl	80c7c <_ZN9Keyboard_10sendReportEP9KeyReport>
   80da4:	2001      	movs	r0, #1
	return 1;
}
   80da6:	bd38      	pop	{r3, r4, r5, pc}
   80da8:	00081c90 	.word	0x00081c90

00080dac <_Z17HID_GetDescriptori>:
	return USBD_SendControl(0,&_hidInterface,sizeof(_hidInterface));
}

int WEAK HID_GetDescriptor(int i)
{
	return USBD_SendControl(0,_hidReportDescriptor,sizeof(_hidReportDescriptor));
   80dac:	4902      	ldr	r1, [pc, #8]	; (80db8 <_Z17HID_GetDescriptori+0xc>)
   80dae:	2000      	movs	r0, #0
   80db0:	2265      	movs	r2, #101	; 0x65
   80db2:	f7ff bc39 	b.w	80628 <_Z16USBD_SendControlhPKvm>
   80db6:	bf00      	nop
   80db8:	00081d2c 	.word	0x00081d2c

00080dbc <_Z16HID_GetInterfacePh>:

#define WEAK __attribute__ ((weak))

int WEAK HID_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 1;	// uses 1
   80dbc:	7803      	ldrb	r3, [r0, #0]
	return USBD_SendControl(0,&_hidInterface,sizeof(_hidInterface));
   80dbe:	4903      	ldr	r1, [pc, #12]	; (80dcc <_Z16HID_GetInterfacePh+0x10>)

#define WEAK __attribute__ ((weak))

int WEAK HID_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 1;	// uses 1
   80dc0:	3301      	adds	r3, #1
   80dc2:	7003      	strb	r3, [r0, #0]
	return USBD_SendControl(0,&_hidInterface,sizeof(_hidInterface));
   80dc4:	2219      	movs	r2, #25
   80dc6:	2000      	movs	r0, #0
   80dc8:	f7ff bc2e 	b.w	80628 <_Z16USBD_SendControlhPKvm>
   80dcc:	00081d10 	.word	0x00081d10

00080dd0 <_GLOBAL__I_Mouse>:

	p = press(c);	// Keydown
	release(c);		// Keyup

	return (p);		// Just return the result of press() since release() almost always returns 1
}
   80dd0:	b510      	push	{r4, lr}

//#define RAWHID_ENABLED

//	Singletons for mouse and keyboard

Mouse_ Mouse;
   80dd2:	4804      	ldr	r0, [pc, #16]	; (80de4 <_GLOBAL__I_Mouse+0x14>)
   80dd4:	f7ff ff22 	bl	80c1c <_ZN6Mouse_C1Ev>
Keyboard_ Keyboard;
   80dd8:	4803      	ldr	r0, [pc, #12]	; (80de8 <_GLOBAL__I_Mouse+0x18>)

	p = press(c);	// Keydown
	release(c);		// Keyup

	return (p);		// Just return the result of press() since release() almost always returns 1
}
   80dda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//#define RAWHID_ENABLED

//	Singletons for mouse and keyboard

Mouse_ Mouse;
Keyboard_ Keyboard;
   80dde:	f7ff bf21 	b.w	80c24 <_ZN9Keyboard_C1Ev>
   80de2:	bf00      	nop
   80de4:	20070074 	.word	0x20070074
   80de8:	20070078 	.word	0x20070078

00080dec <init>:
#endif

void __libc_init_array(void);

void init( void )
{
   80dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SystemInit();
   80df0:	f000 fb6a 	bl	814c8 <SystemInit>
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   80df4:	4b3a      	ldr	r3, [pc, #232]	; (80ee0 <init+0xf4>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80df6:	f06f 010f 	mvn.w	r1, #15
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   80dfa:	681a      	ldr	r2, [r3, #0]
   80dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80e00:	fbb2 f2f3 	udiv	r2, r2, r3
   80e04:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   80e08:	4b36      	ldr	r3, [pc, #216]	; (80ee4 <init+0xf8>)
   80e0a:	3a01      	subs	r2, #1
   80e0c:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80e0e:	4a36      	ldr	r2, [pc, #216]	; (80ee8 <init+0xfc>)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   80e10:	2400      	movs	r4, #0
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80e12:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
   80e16:	2207      	movs	r2, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   80e18:	609c      	str	r4, [r3, #8]
    // Capture error
    while (true);
  }

  // Disable watchdog
  WDT_Disable(WDT);
   80e1a:	4834      	ldr	r0, [pc, #208]	; (80eec <init+0x100>)
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
   80e1c:	601a      	str	r2, [r3, #0]
   80e1e:	f000 fb4f 	bl	814c0 <WDT_Disable>

  // Initialize C library
  __libc_init_array();
   80e22:	f000 fdfb 	bl	81a1c <__libc_init_array>

  // Disable pull-up on every pin
  for (int i = 0; i < PINS_COUNT; i++)
   80e26:	e004      	b.n	80e32 <init+0x46>
	  digitalWrite(i, LOW);
   80e28:	4620      	mov	r0, r4
   80e2a:	2100      	movs	r1, #0
   80e2c:	f7ff f9d2 	bl	801d4 <digitalWrite>

  // Initialize C library
  __libc_init_array();

  // Disable pull-up on every pin
  for (int i = 0; i < PINS_COUNT; i++)
   80e30:	3401      	adds	r4, #1
   80e32:	2c4f      	cmp	r4, #79	; 0x4f
   80e34:	d1f8      	bne.n	80e28 <init+0x3c>
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
   80e36:	4d2e      	ldr	r5, [pc, #184]	; (80ef0 <init+0x104>)
  PIOB->PIO_OWER = 0xFFFFFFFF;
   80e38:	4e2e      	ldr	r6, [pc, #184]	; (80ef4 <init+0x108>)
  PIOC->PIO_OWER = 0xFFFFFFFF;
  PIOD->PIO_OWER = 0xFFFFFFFF;
   80e3a:	4f2f      	ldr	r7, [pc, #188]	; (80ef8 <init+0x10c>)
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
  PIOC->PIO_OWER = 0xFFFFFFFF;
   80e3c:	4b2f      	ldr	r3, [pc, #188]	; (80efc <init+0x110>)
  // Disable pull-up on every pin
  for (int i = 0; i < PINS_COUNT; i++)
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
   80e3e:	3c50      	subs	r4, #80	; 0x50
   80e40:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80e44:	2101      	movs	r1, #1
  for (int i = 0; i < PINS_COUNT; i++)
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
   80e46:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80e4a:	f44f 7240 	mov.w	r2, #768	; 0x300
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
  PIOC->PIO_OWER = 0xFFFFFFFF;
   80e4e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80e52:	4628      	mov	r0, r5
   80e54:	2300      	movs	r3, #0

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
  PIOC->PIO_OWER = 0xFFFFFFFF;
  PIOD->PIO_OWER = 0xFFFFFFFF;
   80e56:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80e5a:	f000 fa79 	bl	81350 <PIO_Configure>
  digitalWrite(0, HIGH); // Enable pullup for RX0
   80e5e:	2000      	movs	r0, #0
   80e60:	2101      	movs	r1, #1
   80e62:	f7ff f9b7 	bl	801d4 <digitalWrite>
  PIO_Configure(
    g_APinDescription[PINS_USART0].pPort,
    g_APinDescription[PINS_USART0].ulPinType,
    g_APinDescription[PINS_USART0].ulPin,
    g_APinDescription[PINS_USART0].ulPinConfiguration);
   80e66:	2101      	movs	r1, #1
   80e68:	2300      	movs	r3, #0
   80e6a:	4628      	mov	r0, r5
   80e6c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   80e70:	f000 fa6e 	bl	81350 <PIO_Configure>
  PIO_Configure(
    g_APinDescription[PINS_USART1].pPort,
    g_APinDescription[PINS_USART1].ulPinType,
    g_APinDescription[PINS_USART1].ulPin,
    g_APinDescription[PINS_USART1].ulPinConfiguration);
   80e74:	2101      	movs	r1, #1
   80e76:	2300      	movs	r3, #0
   80e78:	4628      	mov	r0, r5
   80e7a:	f44f 5240 	mov.w	r2, #12288	; 0x3000
   80e7e:	f000 fa67 	bl	81350 <PIO_Configure>
  PIO_Configure(
    g_APinDescription[PINS_USART3].pPort,
    g_APinDescription[PINS_USART3].ulPinType,
    g_APinDescription[PINS_USART3].ulPin,
    g_APinDescription[PINS_USART3].ulPinConfiguration);
   80e82:	2102      	movs	r1, #2
   80e84:	2230      	movs	r2, #48	; 0x30
   80e86:	2300      	movs	r3, #0
   80e88:	4638      	mov	r0, r7
   80e8a:	f000 fa61 	bl	81350 <PIO_Configure>
  // Initialize USB pins
  PIO_Configure(
    g_APinDescription[PINS_USB].pPort,
    g_APinDescription[PINS_USB].ulPinType,
    g_APinDescription[PINS_USB].ulPin,
    g_APinDescription[PINS_USB].ulPinConfiguration);
   80e8e:	2101      	movs	r1, #1
   80e90:	2300      	movs	r3, #0
   80e92:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   80e96:	4630      	mov	r0, r6
   80e98:	f000 fa5a 	bl	81350 <PIO_Configure>

  // Initialize Analog Controller
  pmc_enable_periph_clk(ID_ADC);
   80e9c:	2025      	movs	r0, #37	; 0x25
   80e9e:	f000 faa9 	bl	813f4 <pmc_enable_periph_clk>
  adc_init(ADC, SystemCoreClock, ADC_FREQ_MAX, ADC_STARTUP_FAST);
   80ea2:	4b0f      	ldr	r3, [pc, #60]	; (80ee0 <init+0xf4>)
   80ea4:	4a16      	ldr	r2, [pc, #88]	; (80f00 <init+0x114>)
   80ea6:	6819      	ldr	r1, [r3, #0]
   80ea8:	4816      	ldr	r0, [pc, #88]	; (80f04 <init+0x118>)
   80eaa:	230c      	movs	r3, #12
   80eac:	f000 fb92 	bl	815d4 <adc_init>
  adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   80eb0:	2301      	movs	r3, #1
   80eb2:	2100      	movs	r1, #0
   80eb4:	4813      	ldr	r0, [pc, #76]	; (80f04 <init+0x118>)
   80eb6:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80eba:	f000 fbb0 	bl	8161e <adc_configure_timing>
  adc_configure_trigger(ADC, ADC_TRIG_SW, 0); // Disable hardware trigger.
   80ebe:	2100      	movs	r1, #0
   80ec0:	460a      	mov	r2, r1
   80ec2:	4810      	ldr	r0, [pc, #64]	; (80f04 <init+0x118>)
   80ec4:	f000 fba3 	bl	8160e <adc_configure_trigger>
  adc_disable_interrupt(ADC, 0xFFFFFFFF); // Disable all ADC interrupts.
   80ec8:	4621      	mov	r1, r4
   80eca:	480e      	ldr	r0, [pc, #56]	; (80f04 <init+0x118>)
   80ecc:	f000 fbb8 	bl	81640 <adc_disable_interrupt>
  adc_disable_all_channel(ADC);
   80ed0:	480c      	ldr	r0, [pc, #48]	; (80f04 <init+0x118>)
   80ed2:	f000 fbb1 	bl	81638 <adc_disable_all_channel>

  // Initialize analogOutput module
  analogOutputInit();
}
   80ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  adc_configure_trigger(ADC, ADC_TRIG_SW, 0); // Disable hardware trigger.
  adc_disable_interrupt(ADC, 0xFFFFFFFF); // Disable all ADC interrupts.
  adc_disable_all_channel(ADC);

  // Initialize analogOutput module
  analogOutputInit();
   80eda:	f000 b873 	b.w	80fc4 <analogOutputInit>
   80ede:	bf00      	nop
   80ee0:	20070048 	.word	0x20070048
   80ee4:	e000e010 	.word	0xe000e010
   80ee8:	e000ed00 	.word	0xe000ed00
   80eec:	400e1a50 	.word	0x400e1a50
   80ef0:	400e0e00 	.word	0x400e0e00
   80ef4:	400e1000 	.word	0x400e1000
   80ef8:	400e1400 	.word	0x400e1400
   80efc:	400e1200 	.word	0x400e1200
   80f00:	01312d00 	.word	0x01312d00
   80f04:	400c0000 	.word	0x400c0000

00080f08 <USART3_Handler>:
  Serial2.IrqHandler();
}

void USART3_Handler(void)
{
  Serial3.IrqHandler();
   80f08:	4801      	ldr	r0, [pc, #4]	; (80f10 <USART3_Handler+0x8>)
   80f0a:	f000 b8bf 	b.w	8108c <_ZN10USARTClass10IrqHandlerEv>
   80f0e:	bf00      	nop
   80f10:	20070130 	.word	0x20070130

00080f14 <USART1_Handler>:
  Serial1.IrqHandler();
}

void USART1_Handler(void)
{
  Serial2.IrqHandler();
   80f14:	4801      	ldr	r0, [pc, #4]	; (80f1c <USART1_Handler+0x8>)
   80f16:	f000 b8b9 	b.w	8108c <_ZN10USARTClass10IrqHandlerEv>
   80f1a:	bf00      	nop
   80f1c:	20070110 	.word	0x20070110

00080f20 <USART0_Handler>:
USARTClass Serial3(USART3, USART3_IRQn, ID_USART3, &rx_buffer4);

// IT handlers
void USART0_Handler(void)
{
  Serial1.IrqHandler();
   80f20:	4801      	ldr	r0, [pc, #4]	; (80f28 <USART0_Handler+0x8>)
   80f22:	f000 b8b3 	b.w	8108c <_ZN10USARTClass10IrqHandlerEv>
   80f26:	bf00      	nop
   80f28:	200700f0 	.word	0x200700f0

00080f2c <UART_Handler>:
UARTClass Serial(UART, UART_IRQn, ID_UART, &rx_buffer1);

// IT handlers
void UART_Handler(void)
{
  Serial.IrqHandler();
   80f2c:	4801      	ldr	r0, [pc, #4]	; (80f34 <UART_Handler+0x8>)
   80f2e:	f7ff ba8b 	b.w	80448 <_ZN9UARTClass10IrqHandlerEv>
   80f32:	bf00      	nop
   80f34:	20070088 	.word	0x20070088

00080f38 <_GLOBAL__I_g_APinDescription>:
  // Initialize analogOutput module
  analogOutputInit();
}

#ifdef __cplusplus
}
   80f38:	b573      	push	{r0, r1, r4, r5, r6, lr}
#endif

/*
 * UART objects
 */
RingBuffer rx_buffer1;
   80f3a:	4c16      	ldr	r4, [pc, #88]	; (80f94 <_GLOBAL__I_g_APinDescription+0x5c>)

// ----------------------------------------------------------------------------
/*
 * USART objects
 */
RingBuffer rx_buffer2;
   80f3c:	4e16      	ldr	r6, [pc, #88]	; (80f98 <_GLOBAL__I_g_APinDescription+0x60>)
#endif

/*
 * UART objects
 */
RingBuffer rx_buffer1;
   80f3e:	4620      	mov	r0, r4
   80f40:	f000 f859 	bl	80ff6 <_ZN10RingBufferC1Ev>

UARTClass Serial(UART, UART_IRQn, ID_UART, &rx_buffer1);
   80f44:	2208      	movs	r2, #8
   80f46:	4613      	mov	r3, r2
   80f48:	4914      	ldr	r1, [pc, #80]	; (80f9c <_GLOBAL__I_g_APinDescription+0x64>)
// ----------------------------------------------------------------------------
/*
 * USART objects
 */
RingBuffer rx_buffer2;
RingBuffer rx_buffer3;
   80f4a:	4d15      	ldr	r5, [pc, #84]	; (80fa0 <_GLOBAL__I_g_APinDescription+0x68>)
/*
 * UART objects
 */
RingBuffer rx_buffer1;

UARTClass Serial(UART, UART_IRQn, ID_UART, &rx_buffer1);
   80f4c:	4815      	ldr	r0, [pc, #84]	; (80fa4 <_GLOBAL__I_g_APinDescription+0x6c>)
   80f4e:	9400      	str	r4, [sp, #0]
   80f50:	f7ff fa3c 	bl	803cc <_ZN9UARTClassC1EP4Uart4IRQnmP10RingBuffer>
/*
 * USART objects
 */
RingBuffer rx_buffer2;
RingBuffer rx_buffer3;
RingBuffer rx_buffer4;
   80f54:	4c14      	ldr	r4, [pc, #80]	; (80fa8 <_GLOBAL__I_g_APinDescription+0x70>)

// ----------------------------------------------------------------------------
/*
 * USART objects
 */
RingBuffer rx_buffer2;
   80f56:	4630      	mov	r0, r6
   80f58:	f000 f84d 	bl	80ff6 <_ZN10RingBufferC1Ev>
RingBuffer rx_buffer3;
   80f5c:	4628      	mov	r0, r5
   80f5e:	f000 f84a 	bl	80ff6 <_ZN10RingBufferC1Ev>
RingBuffer rx_buffer4;
   80f62:	4620      	mov	r0, r4
   80f64:	f000 f847 	bl	80ff6 <_ZN10RingBufferC1Ev>

USARTClass Serial1(USART0, USART0_IRQn, ID_USART0, &rx_buffer2);
   80f68:	2211      	movs	r2, #17
   80f6a:	4613      	mov	r3, r2
   80f6c:	490f      	ldr	r1, [pc, #60]	; (80fac <_GLOBAL__I_g_APinDescription+0x74>)
   80f6e:	4810      	ldr	r0, [pc, #64]	; (80fb0 <_GLOBAL__I_g_APinDescription+0x78>)
   80f70:	9600      	str	r6, [sp, #0]
   80f72:	f000 f84d 	bl	81010 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>
USARTClass Serial2(USART1, USART1_IRQn, ID_USART1, &rx_buffer3);
   80f76:	2212      	movs	r2, #18
   80f78:	4613      	mov	r3, r2
   80f7a:	490e      	ldr	r1, [pc, #56]	; (80fb4 <_GLOBAL__I_g_APinDescription+0x7c>)
   80f7c:	480e      	ldr	r0, [pc, #56]	; (80fb8 <_GLOBAL__I_g_APinDescription+0x80>)
   80f7e:	9500      	str	r5, [sp, #0]
   80f80:	f000 f846 	bl	81010 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>
USARTClass Serial3(USART3, USART3_IRQn, ID_USART3, &rx_buffer4);
   80f84:	2214      	movs	r2, #20
   80f86:	490d      	ldr	r1, [pc, #52]	; (80fbc <_GLOBAL__I_g_APinDescription+0x84>)
   80f88:	4613      	mov	r3, r2
   80f8a:	480d      	ldr	r0, [pc, #52]	; (80fc0 <_GLOBAL__I_g_APinDescription+0x88>)
   80f8c:	9400      	str	r4, [sp, #0]
   80f8e:	f000 f83f 	bl	81010 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>
  // Initialize analogOutput module
  analogOutputInit();
}

#ifdef __cplusplus
}
   80f92:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   80f94:	200700a8 	.word	0x200700a8
   80f98:	20070150 	.word	0x20070150
   80f9c:	400e0800 	.word	0x400e0800
   80fa0:	20070198 	.word	0x20070198
   80fa4:	20070088 	.word	0x20070088
   80fa8:	200701e0 	.word	0x200701e0
   80fac:	40098000 	.word	0x40098000
   80fb0:	200700f0 	.word	0x200700f0
   80fb4:	4009c000 	.word	0x4009c000
   80fb8:	20070110 	.word	0x20070110
   80fbc:	400a4000 	.word	0x400a4000
   80fc0:	20070130 	.word	0x20070130

00080fc4 <analogOutputInit>:

static uint8_t PWMEnabled = 0;
static uint8_t pinEnabled[PINS_COUNT];
static uint8_t TCChanEnabled[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};

void analogOutputInit(void) {
   80fc4:	2300      	movs	r3, #0
	uint8_t i;
	for (i=0; i<PINS_COUNT; i++)
		pinEnabled[i] = 0;
   80fc6:	4a03      	ldr	r2, [pc, #12]	; (80fd4 <analogOutputInit+0x10>)
   80fc8:	2100      	movs	r1, #0
   80fca:	54d1      	strb	r1, [r2, r3]
   80fcc:	3301      	adds	r3, #1
static uint8_t pinEnabled[PINS_COUNT];
static uint8_t TCChanEnabled[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};

void analogOutputInit(void) {
	uint8_t i;
	for (i=0; i<PINS_COUNT; i++)
   80fce:	2b4f      	cmp	r3, #79	; 0x4f
   80fd0:	d1f9      	bne.n	80fc6 <analogOutputInit+0x2>
		pinEnabled[i] = 0;
}
   80fd2:	4770      	bx	lr
   80fd4:	20070228 	.word	0x20070228

00080fd8 <yield>:
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
	// Empty
}
   80fd8:	4770      	bx	lr

00080fda <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
   80fda:	2000      	movs	r0, #0
   80fdc:	4770      	bx	lr

00080fde <pendSVHook>:
 * PendSV hook
 *
 * These functions are called from SVC handler, and PensSV handler.
 * Default action is halting.
 */
static void __halt() {
   80fde:	e7fe      	b.n	80fde <pendSVHook>

00080fe0 <_ZN10RingBuffer10store_charEh>:
    _iTail=0 ;
}

void RingBuffer::store_char( uint8_t c )
{
  int i = (uint32_t)(_iHead + 1) % SERIAL_BUFFER_SIZE ;
   80fe0:	6c02      	ldr	r2, [r0, #64]	; 0x40
    _iHead=0 ;
    _iTail=0 ;
}

void RingBuffer::store_char( uint8_t c )
{
   80fe2:	b510      	push	{r4, lr}
  int i = (uint32_t)(_iHead + 1) % SERIAL_BUFFER_SIZE ;
   80fe4:	1c53      	adds	r3, r2, #1

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
   80fe6:	6c44      	ldr	r4, [r0, #68]	; 0x44
    _iTail=0 ;
}

void RingBuffer::store_char( uint8_t c )
{
  int i = (uint32_t)(_iHead + 1) % SERIAL_BUFFER_SIZE ;
   80fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
   80fec:	42a3      	cmp	r3, r4
  {
    _aucBuffer[_iHead] = c ;
   80fee:	bf1c      	itt	ne
   80ff0:	5481      	strbne	r1, [r0, r2]
    _iHead = i ;
   80ff2:	6403      	strne	r3, [r0, #64]	; 0x40
   80ff4:	bd10      	pop	{r4, pc}

00080ff6 <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
   80ff6:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
   80ff8:	2100      	movs	r1, #0
   80ffa:	2240      	movs	r2, #64	; 0x40
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
   80ffc:	4604      	mov	r4, r0
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
   80ffe:	f000 fd35 	bl	81a6c <memset>
    _iHead=0 ;
   81002:	2300      	movs	r3, #0
   81004:	6423      	str	r3, [r4, #64]	; 0x40
    _iTail=0 ;
   81006:	6463      	str	r3, [r4, #68]	; 0x44
}
   81008:	4620      	mov	r0, r4
   8100a:	bd10      	pop	{r4, pc}

0008100c <_ZN10USARTClasscvbEv>:
#elif defined __ICCARM__ /* IAR Ewarm 5.41+ */
//    virtual void write( const char *str ) ;
//    virtual void write( const uint8_t *buffer, size_t size ) ;
#endif

    operator bool() { return true; }; // USART always active
   8100c:	2001      	movs	r0, #1
   8100e:	4770      	bx	lr

00081010 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>:
#include <string.h>
#include "USARTClass.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTClass::USARTClass( Usart* pUsart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
   81010:	b530      	push	{r4, r5, lr}
  public:
    Print() : write_error(0) {}
   81012:	2500      	movs	r5, #0
   81014:	6045      	str	r5, [r0, #4]
   81016:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   8101a:	6085      	str	r5, [r0, #8]
   8101c:	4d04      	ldr	r5, [pc, #16]	; (81030 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer+0x20>)
   8101e:	4604      	mov	r4, r0
   81020:	6005      	str	r5, [r0, #0]
{
  _rx_buffer = pRx_buffer ;
   81022:	9d03      	ldr	r5, [sp, #12]

  _pUsart=pUsart ;
   81024:	6141      	str	r1, [r0, #20]

// Constructors ////////////////////////////////////////////////////////////////

USARTClass::USARTClass( Usart* pUsart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
{
  _rx_buffer = pRx_buffer ;
   81026:	6105      	str	r5, [r0, #16]

  _pUsart=pUsart ;
  _dwIrq=dwIrq ;
   81028:	7602      	strb	r2, [r0, #24]
  _dwId=dwId ;
   8102a:	61c3      	str	r3, [r0, #28]
}
   8102c:	bd30      	pop	{r4, r5, pc}
   8102e:	bf00      	nop
   81030:	00082790 	.word	0x00082790

00081034 <_ZN10USARTClass9availableEv>:
  pmc_disable_periph_clk( _dwId ) ;
}

int USARTClass::available( void )
{
  return (uint32_t)(SERIAL_BUFFER_SIZE + _rx_buffer->_iHead - _rx_buffer->_iTail) % SERIAL_BUFFER_SIZE ;
   81034:	6903      	ldr	r3, [r0, #16]
   81036:	6c18      	ldr	r0, [r3, #64]	; 0x40
   81038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   8103a:	1ac0      	subs	r0, r0, r3
}
   8103c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   81040:	4770      	bx	lr

00081042 <_ZN10USARTClass4peekEv>:

int USARTClass::peek( void )
{
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   81042:	6903      	ldr	r3, [r0, #16]
   81044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   81046:	6c19      	ldr	r1, [r3, #64]	; 0x40
   81048:	4291      	cmp	r1, r2
   8104a:	bf0c      	ite	eq
   8104c:	f04f 30ff 	moveq.w	r0, #4294967295
    return -1 ;

  return _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   81050:	5c98      	ldrbne	r0, [r3, r2]
}
   81052:	4770      	bx	lr

00081054 <_ZN10USARTClass4readEv>:

int USARTClass::read( void )
{
  // if the head isn't ahead of the tail, we don't have any characters
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   81054:	6903      	ldr	r3, [r0, #16]
   81056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   81058:	6c19      	ldr	r1, [r3, #64]	; 0x40
   8105a:	4291      	cmp	r1, r2
   8105c:	d102      	bne.n	81064 <_ZN10USARTClass4readEv+0x10>
   8105e:	f04f 30ff 	mov.w	r0, #4294967295
   81062:	4770      	bx	lr
    return -1 ;

  uint8_t uc = _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   81064:	5c98      	ldrb	r0, [r3, r2]
  _rx_buffer->_iTail = (unsigned int)(_rx_buffer->_iTail + 1) % SERIAL_BUFFER_SIZE ;
   81066:	3201      	adds	r2, #1
   81068:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   8106c:	645a      	str	r2, [r3, #68]	; 0x44
  return uc ;
}
   8106e:	4770      	bx	lr

00081070 <_ZN10USARTClass5flushEv>:

void USARTClass::flush( void )
{
  // Wait for transmission to complete
  while ((_pUsart->US_CSR & US_CSR_TXRDY) != US_CSR_TXRDY)
   81070:	6943      	ldr	r3, [r0, #20]
   81072:	695a      	ldr	r2, [r3, #20]
   81074:	f012 0f02 	tst.w	r2, #2
   81078:	d0fb      	beq.n	81072 <_ZN10USARTClass5flushEv+0x2>
	;
}
   8107a:	4770      	bx	lr

0008107c <_ZN10USARTClass5writeEh>:

size_t USARTClass::write( const uint8_t uc_data )
{
  // Check if the transmitter is ready
  while ((_pUsart->US_CSR & US_CSR_TXRDY) != US_CSR_TXRDY)
   8107c:	6943      	ldr	r3, [r0, #20]
   8107e:	695a      	ldr	r2, [r3, #20]
   81080:	f012 0f02 	tst.w	r2, #2
   81084:	d0fb      	beq.n	8107e <_ZN10USARTClass5writeEh+0x2>
    ;

  // Send character
  _pUsart->US_THR = uc_data ;
   81086:	61d9      	str	r1, [r3, #28]
  return 1;
}
   81088:	2001      	movs	r0, #1
   8108a:	4770      	bx	lr

0008108c <_ZN10USARTClass10IrqHandlerEv>:

void USARTClass::IrqHandler( void )
{
   8108c:	b538      	push	{r3, r4, r5, lr}
  uint32_t status = _pUsart->US_CSR;
   8108e:	6943      	ldr	r3, [r0, #20]
  _pUsart->US_THR = uc_data ;
  return 1;
}

void USARTClass::IrqHandler( void )
{
   81090:	4604      	mov	r4, r0
  uint32_t status = _pUsart->US_CSR;
   81092:	695d      	ldr	r5, [r3, #20]

  // Did we receive data ?
  if ((status & US_CSR_RXRDY) == US_CSR_RXRDY)
   81094:	f015 0f01 	tst.w	r5, #1
   81098:	d004      	beq.n	810a4 <_ZN10USARTClass10IrqHandlerEv+0x18>
    _rx_buffer->store_char( _pUsart->US_RHR ) ;
   8109a:	6999      	ldr	r1, [r3, #24]
   8109c:	6900      	ldr	r0, [r0, #16]
   8109e:	b2c9      	uxtb	r1, r1
   810a0:	f7ff ff9e 	bl	80fe0 <_ZN10RingBuffer10store_charEh>

  // Acknowledge errors
  if ((status & US_CSR_OVRE) == US_CSR_OVRE ||
   810a4:	f015 0f60 	tst.w	r5, #96	; 0x60
   810a8:	d004      	beq.n	810b4 <_ZN10USARTClass10IrqHandlerEv+0x28>
		  (status & US_CSR_FRAME) == US_CSR_FRAME)
  {
	// TODO: error reporting outside ISR
    _pUsart->US_CR |= US_CR_RSTSTA;
   810aa:	6963      	ldr	r3, [r4, #20]
   810ac:	681a      	ldr	r2, [r3, #0]
   810ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   810b2:	601a      	str	r2, [r3, #0]
   810b4:	bd38      	pop	{r3, r4, r5, pc}
	...

000810b8 <_ZN7Serial_9availableEv>:
}

int Serial_::available(void)
{
	ring_buffer *buffer = &cdc_rx_buffer;
	return (unsigned int)(CDC_SERIAL_BUFFER_SIZE + buffer->head - buffer->tail) % CDC_SERIAL_BUFFER_SIZE;
   810b8:	4b04      	ldr	r3, [pc, #16]	; (810cc <_ZN7Serial_9availableEv+0x14>)
   810ba:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
   810be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   810c2:	1ac0      	subs	r0, r0, r3
}
   810c4:	05c0      	lsls	r0, r0, #23
   810c6:	0dc0      	lsrs	r0, r0, #23
   810c8:	4770      	bx	lr
   810ca:	bf00      	nop
   810cc:	20070278 	.word	0x20070278

000810d0 <_ZN7Serial_4peekEv>:

int Serial_::peek(void)
{
	ring_buffer *buffer = &cdc_rx_buffer;

	if (buffer->head == buffer->tail)
   810d0:	4b06      	ldr	r3, [pc, #24]	; (810ec <_ZN7Serial_4peekEv+0x1c>)
   810d2:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   810d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   810da:	4291      	cmp	r1, r2
	{
		return -1;
	}
	else
	{
		return buffer->buffer[buffer->tail];
   810dc:	bf16      	itet	ne
   810de:	f8d3 2204 	ldrne.w	r2, [r3, #516]	; 0x204

int Serial_::peek(void)
{
	ring_buffer *buffer = &cdc_rx_buffer;

	if (buffer->head == buffer->tail)
   810e2:	f04f 30ff 	moveq.w	r0, #4294967295
	{
		return -1;
	}
	else
	{
		return buffer->buffer[buffer->tail];
   810e6:	5c98      	ldrbne	r0, [r3, r2]
	}
}
   810e8:	4770      	bx	lr
   810ea:	bf00      	nop
   810ec:	20070278 	.word	0x20070278

000810f0 <_ZN7Serial_5writeEh>:
	}
	setWriteError();
	return 0;
}

size_t Serial_::write(uint8_t c) {
   810f0:	b507      	push	{r0, r1, r2, lr}
   810f2:	aa02      	add	r2, sp, #8
   810f4:	f802 1d01 	strb.w	r1, [r2, #-1]!
	return write(&c, 1);
   810f8:	6803      	ldr	r3, [r0, #0]
   810fa:	4611      	mov	r1, r2
   810fc:	685b      	ldr	r3, [r3, #4]
   810fe:	2201      	movs	r2, #1
   81100:	4798      	blx	r3
}
   81102:	bd0e      	pop	{r1, r2, r3, pc}

00081104 <_ZN7Serial_5writeEPKhj>:
{
	USBD_Flush(CDC_TX);
}

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
   81104:	b510      	push	{r4, lr}
	 the connection is closed are lost - just like with a UART. */

	// TODO - ZE - check behavior on different OSes and test what happens if an
	// open connection isn't broken cleanly (cable is yanked out, host dies
	// or locks up, or host virtual serial port hangs)
	if (_usbLineInfo.lineState > 0)
   81106:	4b08      	ldr	r3, [pc, #32]	; (81128 <_ZN7Serial_5writeEPKhj+0x24>)
{
	USBD_Flush(CDC_TX);
}

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
   81108:	4604      	mov	r4, r0
	 the connection is closed are lost - just like with a UART. */

	// TODO - ZE - check behavior on different OSes and test what happens if an
	// open connection isn't broken cleanly (cable is yanked out, host dies
	// or locks up, or host virtual serial port hangs)
	if (_usbLineInfo.lineState > 0)
   8110a:	79db      	ldrb	r3, [r3, #7]
   8110c:	4618      	mov	r0, r3
   8110e:	b143      	cbz	r3, 81122 <_ZN7Serial_5writeEPKhj+0x1e>
	{
		int r = USBD_Send(CDC_TX, buffer, size);
   81110:	2003      	movs	r0, #3
   81112:	f7ff fce7 	bl	80ae4 <_Z9USBD_SendmPKvm>

		if (r > 0)
   81116:	2800      	cmp	r0, #0
   81118:	dc05      	bgt.n	81126 <_ZN7Serial_5writeEPKhj+0x22>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   8111a:	2301      	movs	r3, #1
   8111c:	6063      	str	r3, [r4, #4]
   8111e:	2000      	movs	r0, #0
		{
			return r;
		} else
		{
			setWriteError();
			return 0;
   81120:	bd10      	pop	{r4, pc}
   81122:	2301      	movs	r3, #1
   81124:	6063      	str	r3, [r4, #4]
		}
	}
	setWriteError();
	return 0;
}
   81126:	bd10      	pop	{r4, pc}
   81128:	20070040 	.word	0x20070040

0008112c <_ZN7Serial_5flushEv>:
	}
}

void Serial_::flush(void)
{
	USBD_Flush(CDC_TX);
   8112c:	2003      	movs	r0, #3
   8112e:	f7ff ba3b 	b.w	805a8 <_Z10USBD_Flushm>
	...

00081134 <_ZN7Serial_4readEv>:
		return buffer->buffer[buffer->tail];
	}
}

int Serial_::read(void)
{
   81134:	b538      	push	{r3, r4, r5, lr}
	ring_buffer *buffer = &cdc_rx_buffer;

	// if the head isn't ahead of the tail, we don't have any characters
	if (buffer->head == buffer->tail)
   81136:	4b0f      	ldr	r3, [pc, #60]	; (81174 <_ZN7Serial_4readEv+0x40>)
		return buffer->buffer[buffer->tail];
	}
}

int Serial_::read(void)
{
   81138:	4604      	mov	r4, r0
	ring_buffer *buffer = &cdc_rx_buffer;

	// if the head isn't ahead of the tail, we don't have any characters
	if (buffer->head == buffer->tail)
   8113a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   8113e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   81142:	4291      	cmp	r1, r2
   81144:	d102      	bne.n	8114c <_ZN7Serial_4readEv+0x18>
   81146:	f04f 30ff 	mov.w	r0, #4294967295
   8114a:	bd38      	pop	{r3, r4, r5, pc}
	{
		return -1;
	}
	else
	{
		unsigned char c = buffer->buffer[buffer->tail];
   8114c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
		buffer->tail = (unsigned int)(buffer->tail + 1) % CDC_SERIAL_BUFFER_SIZE;
		if (USBD_Available(CDC_RX))
   81150:	2002      	movs	r0, #2
	{
		return -1;
	}
	else
	{
		unsigned char c = buffer->buffer[buffer->tail];
   81152:	5c9d      	ldrb	r5, [r3, r2]
		buffer->tail = (unsigned int)(buffer->tail + 1) % CDC_SERIAL_BUFFER_SIZE;
   81154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   81158:	3201      	adds	r2, #1
   8115a:	05d2      	lsls	r2, r2, #23
   8115c:	0dd2      	lsrs	r2, r2, #23
   8115e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (USBD_Available(CDC_RX))
   81162:	f7ff fa0b 	bl	8057c <_Z14USBD_Availablem>
   81166:	b118      	cbz	r0, 81170 <_ZN7Serial_4readEv+0x3c>
			accept();
   81168:	6823      	ldr	r3, [r4, #0]
   8116a:	4620      	mov	r0, r4
   8116c:	699b      	ldr	r3, [r3, #24]
   8116e:	4798      	blx	r3
		return c;
   81170:	4628      	mov	r0, r5
	}
}
   81172:	bd38      	pop	{r3, r4, r5, pc}
   81174:	20070278 	.word	0x20070278

00081178 <_ZN7Serial_6acceptEv>:
void Serial_::end(void)
{
}

void Serial_::accept(void)
{
   81178:	b538      	push	{r3, r4, r5, lr}
	static uint32_t guard = 0;

	// synchronized access to guard
	do {
		if (__LDREXW(&guard) != 0) {
   8117a:	4b17      	ldr	r3, [pc, #92]	; (811d8 <_ZN7Serial_6acceptEv+0x60>)
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   8117c:	e853 2f00 	ldrex	r2, [r3]
   81180:	b112      	cbz	r2, 81188 <_ZN7Serial_6acceptEv+0x10>
    This function removes the exclusive lock which is created by LDREX.

 */
__attribute__( ( always_inline ) ) static __INLINE void __CLREX(void)
{
  __ASM volatile ("clrex");
   81182:	f3bf 8f2f 	clrex
			__CLREX();
			return;  // busy
   81186:	bd38      	pop	{r3, r4, r5, pc}
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
   81188:	2201      	movs	r2, #1
   8118a:	e843 2300 	strex	r3, r2, [r3]
void Serial_::accept(void)
{
	static uint32_t guard = 0;

	// synchronized access to guard
	do {
   8118e:	2b00      	cmp	r3, #0
   81190:	d1f3      	bne.n	8117a <_ZN7Serial_6acceptEv+0x2>
			return;  // busy
		}
	} while (__STREXW(1, &guard) != 0); // retry until write succeed

	ring_buffer *buffer = &cdc_rx_buffer;
	uint32_t i = (uint32_t)(buffer->head+1) % CDC_SERIAL_BUFFER_SIZE;
   81192:	4b12      	ldr	r3, [pc, #72]	; (811dc <_ZN7Serial_6acceptEv+0x64>)
   81194:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
   81198:	18a4      	adds	r4, r4, r2
   8119a:	e012      	b.n	811c2 <_ZN7Serial_6acceptEv+0x4a>
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
		uint32_t c;
		if (!USBD_Available(CDC_RX)) {
   8119c:	2002      	movs	r0, #2
   8119e:	f7ff f9ed 	bl	8057c <_Z14USBD_Availablem>
   811a2:	b928      	cbnz	r0, 811b0 <_ZN7Serial_6acceptEv+0x38>
			udd_ack_fifocon(CDC_RX);
   811a4:	4b0e      	ldr	r3, [pc, #56]	; (811e0 <_ZN7Serial_6acceptEv+0x68>)
   811a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   811aa:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			break;
   811ae:	e00f      	b.n	811d0 <_ZN7Serial_6acceptEv+0x58>
		}
		c = USBD_Recv(CDC_RX);
   811b0:	2002      	movs	r0, #2
   811b2:	f7ff fcfb 	bl	80bac <_Z9USBD_Recvm>
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
   811b6:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
		buffer->head = i;
   811ba:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200
			udd_ack_fifocon(CDC_RX);
			break;
		}
		c = USBD_Recv(CDC_RX);
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
   811be:	54e8      	strb	r0, [r5, r3]
		buffer->head = i;

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
   811c0:	3401      	adds	r4, #1

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
   811c2:	4d06      	ldr	r5, [pc, #24]	; (811dc <_ZN7Serial_6acceptEv+0x64>)
		c = USBD_Recv(CDC_RX);
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
		buffer->head = i;

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
   811c4:	05e4      	lsls	r4, r4, #23

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
   811c6:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
		c = USBD_Recv(CDC_RX);
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
		buffer->head = i;

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
   811ca:	0de4      	lsrs	r4, r4, #23

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
   811cc:	429c      	cmp	r4, r3
   811ce:	d1e5      	bne.n	8119c <_ZN7Serial_6acceptEv+0x24>

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
	}

	// release the guard
	guard = 0;
   811d0:	4b01      	ldr	r3, [pc, #4]	; (811d8 <_ZN7Serial_6acceptEv+0x60>)
   811d2:	2200      	movs	r2, #0
   811d4:	601a      	str	r2, [r3, #0]
   811d6:	bd38      	pop	{r3, r4, r5, pc}
   811d8:	20070480 	.word	0x20070480
   811dc:	20070278 	.word	0x20070278
   811e0:	400ac000 	.word	0x400ac000

000811e4 <_Z21CDC_GetOtherInterfacePh>:
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
}

int WEAK CDC_GetOtherInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   811e4:	7803      	ldrb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
   811e6:	4903      	ldr	r1, [pc, #12]	; (811f4 <_Z21CDC_GetOtherInterfacePh+0x10>)
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
}

int WEAK CDC_GetOtherInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   811e8:	3302      	adds	r3, #2
   811ea:	7003      	strb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
   811ec:	2242      	movs	r2, #66	; 0x42
   811ee:	2000      	movs	r0, #0
   811f0:	f7ff ba1a 	b.w	80628 <_Z16USBD_SendControlhPKvm>
   811f4:	000827d8 	.word	0x000827d8

000811f8 <_Z16CDC_GetInterfacePh>:
};
_Pragma("pack()")

int WEAK CDC_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   811f8:	7803      	ldrb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
   811fa:	4903      	ldr	r1, [pc, #12]	; (81208 <_Z16CDC_GetInterfacePh+0x10>)
};
_Pragma("pack()")

int WEAK CDC_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   811fc:	3302      	adds	r3, #2
   811fe:	7003      	strb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
   81200:	2242      	movs	r2, #66	; 0x42
   81202:	2000      	movs	r0, #0
   81204:	f7ff ba10 	b.w	80628 <_Z16USBD_SendControlhPKvm>
   81208:	0008281c 	.word	0x0008281c

0008120c <_Z9CDC_SetupR5Setup>:
	interfaceNum[0] += 2;	// uses 2
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
}

bool WEAK CDC_Setup(Setup& setup)
{
   8120c:	b508      	push	{r3, lr}
	uint8_t r = setup.bRequest;
	uint8_t requestType = setup.bmRequestType;
   8120e:	7802      	ldrb	r2, [r0, #0]
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
}

bool WEAK CDC_Setup(Setup& setup)
{
	uint8_t r = setup.bRequest;
   81210:	7843      	ldrb	r3, [r0, #1]
	uint8_t requestType = setup.bmRequestType;

	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
   81212:	2aa1      	cmp	r2, #161	; 0xa1
   81214:	d107      	bne.n	81226 <_Z9CDC_SetupR5Setup+0x1a>
	{
		if (CDC_GET_LINE_CODING == r)
   81216:	2b21      	cmp	r3, #33	; 0x21
   81218:	d123      	bne.n	81262 <_Z9CDC_SetupR5Setup+0x56>
		{
			USBD_SendControl(0,(void*)&_usbLineInfo,7);
   8121a:	2000      	movs	r0, #0
   8121c:	4912      	ldr	r1, [pc, #72]	; (81268 <_Z9CDC_SetupR5Setup+0x5c>)
   8121e:	3a9a      	subs	r2, #154	; 0x9a
   81220:	f7ff fa02 	bl	80628 <_Z16USBD_SendControlhPKvm>
   81224:	e01b      	b.n	8125e <_Z9CDC_SetupR5Setup+0x52>
			return true;
		}
	}

	if (REQUEST_HOSTTODEVICE_CLASS_INTERFACE == requestType)
   81226:	2a21      	cmp	r2, #33	; 0x21
   81228:	d11b      	bne.n	81262 <_Z9CDC_SetupR5Setup+0x56>
	{
		if (CDC_SET_LINE_CODING == r)
   8122a:	2b20      	cmp	r3, #32
   8122c:	d104      	bne.n	81238 <_Z9CDC_SetupR5Setup+0x2c>
		{
			USBD_RecvControl((void*)&_usbLineInfo,7);
   8122e:	2107      	movs	r1, #7
   81230:	480d      	ldr	r0, [pc, #52]	; (81268 <_Z9CDC_SetupR5Setup+0x5c>)
   81232:	f7ff f9ea 	bl	8060a <_Z16USBD_RecvControlPvm>
   81236:	e012      	b.n	8125e <_Z9CDC_SetupR5Setup+0x52>
			return true;
		}

		if (CDC_SET_CONTROL_LINE_STATE == r)
   81238:	2b22      	cmp	r3, #34	; 0x22
   8123a:	d112      	bne.n	81262 <_Z9CDC_SetupR5Setup+0x56>
		{
			_usbLineInfo.lineState = setup.wValueL;
   8123c:	7882      	ldrb	r2, [r0, #2]
   8123e:	4b0a      	ldr	r3, [pc, #40]	; (81268 <_Z9CDC_SetupR5Setup+0x5c>)
   81240:	71da      	strb	r2, [r3, #7]
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed.
			if (1200 == _usbLineInfo.dwDTERate)
   81242:	681a      	ldr	r2, [r3, #0]
   81244:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
   81248:	d109      	bne.n	8125e <_Z9CDC_SetupR5Setup+0x52>
			{
				// We check DTR state to determine if host port is open (bit 0 of lineState).
				if ((_usbLineInfo.lineState & 0x01) == 0)
   8124a:	79db      	ldrb	r3, [r3, #7]
   8124c:	f013 0f01 	tst.w	r3, #1
   81250:	d103      	bne.n	8125a <_Z9CDC_SetupR5Setup+0x4e>
					initiateReset(250);
   81252:	20fa      	movs	r0, #250	; 0xfa
   81254:	f7ff f89a 	bl	8038c <initiateReset>
   81258:	e001      	b.n	8125e <_Z9CDC_SetupR5Setup+0x52>
				else
					cancelReset();
   8125a:	f7ff f89d 	bl	80398 <cancelReset>
   8125e:	2001      	movs	r0, #1
   81260:	bd08      	pop	{r3, pc}
   81262:	2000      	movs	r0, #0
			}
			return true;
		}
	}
	return false;
}
   81264:	bd08      	pop	{r3, pc}
   81266:	bf00      	nop
   81268:	20070040 	.word	0x20070040

0008126c <_GLOBAL__I_cdc_rx_buffer>:
  public:
    Print() : write_error(0) {}
   8126c:	4b04      	ldr	r3, [pc, #16]	; (81280 <_GLOBAL__I_cdc_rx_buffer+0x14>)
   8126e:	2200      	movs	r2, #0
   81270:	605a      	str	r2, [r3, #4]
   81272:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   81276:	609a      	str	r2, [r3, #8]
//================================================================================
//================================================================================
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
{
   81278:	4a02      	ldr	r2, [pc, #8]	; (81284 <_GLOBAL__I_cdc_rx_buffer+0x18>)
   8127a:	601a      	str	r2, [r3, #0]

	delay(10);
	return result;
}

Serial_ SerialUSB;
   8127c:	4770      	bx	lr
   8127e:	bf00      	nop
   81280:	20070484 	.word	0x20070484
   81284:	000827b8 	.word	0x000827b8

00081288 <PIO_DisableInterrupt>:
   81288:	6441      	str	r1, [r0, #68]	; 0x44
   8128a:	4770      	bx	lr

0008128c <PIO_PullUp>:
   8128c:	b10a      	cbz	r2, 81292 <PIO_PullUp+0x6>
   8128e:	6641      	str	r1, [r0, #100]	; 0x64
   81290:	4770      	bx	lr
   81292:	6601      	str	r1, [r0, #96]	; 0x60
   81294:	4770      	bx	lr

00081296 <PIO_Get>:
   81296:	3904      	subs	r1, #4
   81298:	b2c9      	uxtb	r1, r1
   8129a:	2901      	cmp	r1, #1
   8129c:	bf94      	ite	ls
   8129e:	6b83      	ldrls	r3, [r0, #56]	; 0x38
   812a0:	6bc3      	ldrhi	r3, [r0, #60]	; 0x3c
   812a2:	4213      	tst	r3, r2
   812a4:	bf0c      	ite	eq
   812a6:	2000      	moveq	r0, #0
   812a8:	2001      	movne	r0, #1
   812aa:	4770      	bx	lr

000812ac <PIO_SetPeripheral>:
   812ac:	6442      	str	r2, [r0, #68]	; 0x44
   812ae:	2905      	cmp	r1, #5
   812b0:	d80f      	bhi.n	812d2 <PIO_SetPeripheral+0x26>
   812b2:	e8df f001 	tbb	[pc, r1]
   812b6:	030f      	.short	0x030f
   812b8:	0f0f0f0a 	.word	0x0f0f0f0a
   812bc:	6f03      	ldr	r3, [r0, #112]	; 0x70
   812be:	6f01      	ldr	r1, [r0, #112]	; 0x70
   812c0:	ea01 0303 	and.w	r3, r1, r3
   812c4:	ea23 0302 	bic.w	r3, r3, r2
   812c8:	e002      	b.n	812d0 <PIO_SetPeripheral+0x24>
   812ca:	6f03      	ldr	r3, [r0, #112]	; 0x70
   812cc:	ea42 0303 	orr.w	r3, r2, r3
   812d0:	6703      	str	r3, [r0, #112]	; 0x70
   812d2:	6042      	str	r2, [r0, #4]
   812d4:	4770      	bx	lr
	...

000812d8 <PIO_SetInput>:
   812d8:	b570      	push	{r4, r5, r6, lr}
   812da:	4b0d      	ldr	r3, [pc, #52]	; (81310 <PIO_SetInput+0x38>)
   812dc:	4604      	mov	r4, r0
   812de:	460d      	mov	r5, r1
   812e0:	4616      	mov	r6, r2
   812e2:	4798      	blx	r3
   812e4:	4620      	mov	r0, r4
   812e6:	4629      	mov	r1, r5
   812e8:	f006 0201 	and.w	r2, r6, #1
   812ec:	4b09      	ldr	r3, [pc, #36]	; (81314 <PIO_SetInput+0x3c>)
   812ee:	4798      	blx	r3
   812f0:	f016 0f0a 	tst.w	r6, #10
   812f4:	bf14      	ite	ne
   812f6:	6225      	strne	r5, [r4, #32]
   812f8:	6265      	streq	r5, [r4, #36]	; 0x24
   812fa:	f016 0f02 	tst.w	r6, #2
   812fe:	d102      	bne.n	81306 <PIO_SetInput+0x2e>
   81300:	f016 0f08 	tst.w	r6, #8
   81304:	d001      	beq.n	8130a <PIO_SetInput+0x32>
   81306:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   8130a:	6165      	str	r5, [r4, #20]
   8130c:	6025      	str	r5, [r4, #0]
   8130e:	bd70      	pop	{r4, r5, r6, pc}
   81310:	00081289 	.word	0x00081289
   81314:	0008128d 	.word	0x0008128d

00081318 <PIO_SetOutput>:
   81318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8131a:	4604      	mov	r4, r0
   8131c:	460d      	mov	r5, r1
   8131e:	461f      	mov	r7, r3
   81320:	4b09      	ldr	r3, [pc, #36]	; (81348 <PIO_SetOutput+0x30>)
   81322:	4616      	mov	r6, r2
   81324:	4798      	blx	r3
   81326:	4620      	mov	r0, r4
   81328:	4629      	mov	r1, r5
   8132a:	9a06      	ldr	r2, [sp, #24]
   8132c:	4b07      	ldr	r3, [pc, #28]	; (8134c <PIO_SetOutput+0x34>)
   8132e:	4798      	blx	r3
   81330:	b10f      	cbz	r7, 81336 <PIO_SetOutput+0x1e>
   81332:	6525      	str	r5, [r4, #80]	; 0x50
   81334:	e000      	b.n	81338 <PIO_SetOutput+0x20>
   81336:	6565      	str	r5, [r4, #84]	; 0x54
   81338:	b10e      	cbz	r6, 8133e <PIO_SetOutput+0x26>
   8133a:	6325      	str	r5, [r4, #48]	; 0x30
   8133c:	e000      	b.n	81340 <PIO_SetOutput+0x28>
   8133e:	6365      	str	r5, [r4, #52]	; 0x34
   81340:	6125      	str	r5, [r4, #16]
   81342:	6025      	str	r5, [r4, #0]
   81344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81346:	bf00      	nop
   81348:	00081289 	.word	0x00081289
   8134c:	0008128d 	.word	0x0008128d

00081350 <PIO_Configure>:
   81350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   81352:	461f      	mov	r7, r3
   81354:	1e4b      	subs	r3, r1, #1
   81356:	4605      	mov	r5, r0
   81358:	460e      	mov	r6, r1
   8135a:	4614      	mov	r4, r2
   8135c:	2b04      	cmp	r3, #4
   8135e:	d825      	bhi.n	813ac <PIO_Configure+0x5c>
   81360:	e8df f003 	tbb	[pc, r3]
   81364:	16100303 	.word	0x16100303
   81368:	16          	.byte	0x16
   81369:	00          	.byte	0x00
   8136a:	4622      	mov	r2, r4
   8136c:	4b10      	ldr	r3, [pc, #64]	; (813b0 <PIO_Configure+0x60>)
   8136e:	4798      	blx	r3
   81370:	4628      	mov	r0, r5
   81372:	4621      	mov	r1, r4
   81374:	4b0f      	ldr	r3, [pc, #60]	; (813b4 <PIO_Configure+0x64>)
   81376:	4798      	blx	r3
   81378:	4628      	mov	r0, r5
   8137a:	4621      	mov	r1, r4
   8137c:	f007 0201 	and.w	r2, r7, #1
   81380:	4b0d      	ldr	r3, [pc, #52]	; (813b8 <PIO_Configure+0x68>)
   81382:	e002      	b.n	8138a <PIO_Configure+0x3a>
   81384:	4b0d      	ldr	r3, [pc, #52]	; (813bc <PIO_Configure+0x6c>)
   81386:	4621      	mov	r1, r4
   81388:	463a      	mov	r2, r7
   8138a:	4798      	blx	r3
   8138c:	2001      	movs	r0, #1
   8138e:	e00e      	b.n	813ae <PIO_Configure+0x5e>
   81390:	f007 0301 	and.w	r3, r7, #1
   81394:	9300      	str	r3, [sp, #0]
   81396:	f1a6 0305 	sub.w	r3, r6, #5
   8139a:	425a      	negs	r2, r3
   8139c:	4621      	mov	r1, r4
   8139e:	eb42 0203 	adc.w	r2, r2, r3
   813a2:	4c07      	ldr	r4, [pc, #28]	; (813c0 <PIO_Configure+0x70>)
   813a4:	f3c7 0380 	ubfx	r3, r7, #2, #1
   813a8:	47a0      	blx	r4
   813aa:	e7ef      	b.n	8138c <PIO_Configure+0x3c>
   813ac:	2000      	movs	r0, #0
   813ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   813b0:	000812ad 	.word	0x000812ad
   813b4:	00081289 	.word	0x00081289
   813b8:	0008128d 	.word	0x0008128d
   813bc:	000812d9 	.word	0x000812d9
   813c0:	00081319 	.word	0x00081319

000813c4 <PIO_GetOutputDataStatus>:
   813c4:	6883      	ldr	r3, [r0, #8]
   813c6:	400b      	ands	r3, r1
   813c8:	d005      	beq.n	813d6 <PIO_GetOutputDataStatus+0x12>
   813ca:	6983      	ldr	r3, [r0, #24]
   813cc:	4219      	tst	r1, r3
   813ce:	bf0c      	ite	eq
   813d0:	2000      	moveq	r0, #0
   813d2:	2001      	movne	r0, #1
   813d4:	4770      	bx	lr
   813d6:	4618      	mov	r0, r3
   813d8:	4770      	bx	lr
	...

000813dc <pmc_enable_upll_clock>:
   813dc:	4b04      	ldr	r3, [pc, #16]	; (813f0 <pmc_enable_upll_clock+0x14>)
   813de:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   813e2:	61da      	str	r2, [r3, #28]
   813e4:	4b02      	ldr	r3, [pc, #8]	; (813f0 <pmc_enable_upll_clock+0x14>)
   813e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   813e8:	f013 0f40 	tst.w	r3, #64	; 0x40
   813ec:	d0fa      	beq.n	813e4 <pmc_enable_upll_clock+0x8>
   813ee:	4770      	bx	lr
   813f0:	400e0600 	.word	0x400e0600

000813f4 <pmc_enable_periph_clk>:
   813f4:	282c      	cmp	r0, #44	; 0x2c
   813f6:	d81a      	bhi.n	8142e <pmc_enable_periph_clk+0x3a>
   813f8:	281f      	cmp	r0, #31
   813fa:	4b0f      	ldr	r3, [pc, #60]	; (81438 <pmc_enable_periph_clk+0x44>)
   813fc:	f04f 0201 	mov.w	r2, #1
   81400:	d808      	bhi.n	81414 <pmc_enable_periph_clk+0x20>
   81402:	fa12 f000 	lsls.w	r0, r2, r0
   81406:	6999      	ldr	r1, [r3, #24]
   81408:	ea00 0201 	and.w	r2, r0, r1
   8140c:	4282      	cmp	r2, r0
   8140e:	d00c      	beq.n	8142a <pmc_enable_periph_clk+0x36>
   81410:	6118      	str	r0, [r3, #16]
   81412:	e00a      	b.n	8142a <pmc_enable_periph_clk+0x36>
   81414:	3820      	subs	r0, #32
   81416:	fa12 f000 	lsls.w	r0, r2, r0
   8141a:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
   8141e:	ea00 0201 	and.w	r2, r0, r1
   81422:	4282      	cmp	r2, r0
   81424:	d005      	beq.n	81432 <pmc_enable_periph_clk+0x3e>
   81426:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   8142a:	2000      	movs	r0, #0
   8142c:	4770      	bx	lr
   8142e:	2001      	movs	r0, #1
   81430:	4770      	bx	lr
   81432:	2000      	movs	r0, #0
   81434:	4770      	bx	lr
   81436:	bf00      	nop
   81438:	400e0600 	.word	0x400e0600

0008143c <pmc_disable_periph_clk>:
   8143c:	282c      	cmp	r0, #44	; 0x2c
   8143e:	d81a      	bhi.n	81476 <pmc_disable_periph_clk+0x3a>
   81440:	281f      	cmp	r0, #31
   81442:	4b0f      	ldr	r3, [pc, #60]	; (81480 <pmc_disable_periph_clk+0x44>)
   81444:	f04f 0101 	mov.w	r1, #1
   81448:	d808      	bhi.n	8145c <pmc_disable_periph_clk+0x20>
   8144a:	fa11 f000 	lsls.w	r0, r1, r0
   8144e:	699a      	ldr	r2, [r3, #24]
   81450:	ea00 0202 	and.w	r2, r0, r2
   81454:	4282      	cmp	r2, r0
   81456:	d10c      	bne.n	81472 <pmc_disable_periph_clk+0x36>
   81458:	615a      	str	r2, [r3, #20]
   8145a:	e00a      	b.n	81472 <pmc_disable_periph_clk+0x36>
   8145c:	3820      	subs	r0, #32
   8145e:	fa11 f000 	lsls.w	r0, r1, r0
   81462:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81466:	ea00 0202 	and.w	r2, r0, r2
   8146a:	4282      	cmp	r2, r0
   8146c:	d105      	bne.n	8147a <pmc_disable_periph_clk+0x3e>
   8146e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   81472:	2000      	movs	r0, #0
   81474:	4770      	bx	lr
   81476:	2001      	movs	r0, #1
   81478:	4770      	bx	lr
   8147a:	2000      	movs	r0, #0
   8147c:	4770      	bx	lr
   8147e:	bf00      	nop
   81480:	400e0600 	.word	0x400e0600

00081484 <pmc_switch_udpck_to_upllck>:
   81484:	0202      	lsls	r2, r0, #8
   81486:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   8148a:	4b02      	ldr	r3, [pc, #8]	; (81494 <pmc_switch_udpck_to_upllck+0x10>)
   8148c:	f042 0201 	orr.w	r2, r2, #1
   81490:	639a      	str	r2, [r3, #56]	; 0x38
   81492:	4770      	bx	lr
   81494:	400e0600 	.word	0x400e0600

00081498 <pmc_enable_udpck>:
   81498:	4b01      	ldr	r3, [pc, #4]	; (814a0 <pmc_enable_udpck+0x8>)
   8149a:	2220      	movs	r2, #32
   8149c:	601a      	str	r2, [r3, #0]
   8149e:	4770      	bx	lr
   814a0:	400e0600 	.word	0x400e0600

000814a4 <TimeTick_Increment>:
   814a4:	4b02      	ldr	r3, [pc, #8]	; (814b0 <TimeTick_Increment+0xc>)
   814a6:	681a      	ldr	r2, [r3, #0]
   814a8:	3201      	adds	r2, #1
   814aa:	601a      	str	r2, [r3, #0]
   814ac:	4770      	bx	lr
   814ae:	bf00      	nop
   814b0:	20070498 	.word	0x20070498

000814b4 <GetTickCount>:
   814b4:	4b01      	ldr	r3, [pc, #4]	; (814bc <GetTickCount+0x8>)
   814b6:	6818      	ldr	r0, [r3, #0]
   814b8:	4770      	bx	lr
   814ba:	bf00      	nop
   814bc:	20070498 	.word	0x20070498

000814c0 <WDT_Disable>:
   814c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   814c4:	6043      	str	r3, [r0, #4]
   814c6:	4770      	bx	lr

000814c8 <SystemInit>:
   814c8:	4a1e      	ldr	r2, [pc, #120]	; (81544 <SystemInit+0x7c>)
   814ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
   814ce:	6013      	str	r3, [r2, #0]
   814d0:	4a1d      	ldr	r2, [pc, #116]	; (81548 <SystemInit+0x80>)
   814d2:	6013      	str	r3, [r2, #0]
   814d4:	4b1d      	ldr	r3, [pc, #116]	; (8154c <SystemInit+0x84>)
   814d6:	6a1a      	ldr	r2, [r3, #32]
   814d8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
   814dc:	d106      	bne.n	814ec <SystemInit+0x24>
   814de:	4a1c      	ldr	r2, [pc, #112]	; (81550 <SystemInit+0x88>)
   814e0:	621a      	str	r2, [r3, #32]
   814e2:	4b1a      	ldr	r3, [pc, #104]	; (8154c <SystemInit+0x84>)
   814e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   814e6:	f013 0f01 	tst.w	r3, #1
   814ea:	d0fa      	beq.n	814e2 <SystemInit+0x1a>
   814ec:	4a19      	ldr	r2, [pc, #100]	; (81554 <SystemInit+0x8c>)
   814ee:	4b17      	ldr	r3, [pc, #92]	; (8154c <SystemInit+0x84>)
   814f0:	621a      	str	r2, [r3, #32]
   814f2:	4b16      	ldr	r3, [pc, #88]	; (8154c <SystemInit+0x84>)
   814f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   814f6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   814fa:	d0fa      	beq.n	814f2 <SystemInit+0x2a>
   814fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   814fe:	f022 0203 	bic.w	r2, r2, #3
   81502:	f042 0201 	orr.w	r2, r2, #1
   81506:	631a      	str	r2, [r3, #48]	; 0x30
   81508:	4b10      	ldr	r3, [pc, #64]	; (8154c <SystemInit+0x84>)
   8150a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8150c:	f012 0f08 	tst.w	r2, #8
   81510:	d0fa      	beq.n	81508 <SystemInit+0x40>
   81512:	4a11      	ldr	r2, [pc, #68]	; (81558 <SystemInit+0x90>)
   81514:	629a      	str	r2, [r3, #40]	; 0x28
   81516:	4b0d      	ldr	r3, [pc, #52]	; (8154c <SystemInit+0x84>)
   81518:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8151a:	f012 0f02 	tst.w	r2, #2
   8151e:	d0fa      	beq.n	81516 <SystemInit+0x4e>
   81520:	2211      	movs	r2, #17
   81522:	631a      	str	r2, [r3, #48]	; 0x30
   81524:	4b09      	ldr	r3, [pc, #36]	; (8154c <SystemInit+0x84>)
   81526:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   81528:	f012 0f08 	tst.w	r2, #8
   8152c:	d0fa      	beq.n	81524 <SystemInit+0x5c>
   8152e:	2212      	movs	r2, #18
   81530:	631a      	str	r2, [r3, #48]	; 0x30
   81532:	4b06      	ldr	r3, [pc, #24]	; (8154c <SystemInit+0x84>)
   81534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81536:	f013 0f08 	tst.w	r3, #8
   8153a:	d0fa      	beq.n	81532 <SystemInit+0x6a>
   8153c:	4a07      	ldr	r2, [pc, #28]	; (8155c <SystemInit+0x94>)
   8153e:	4b08      	ldr	r3, [pc, #32]	; (81560 <SystemInit+0x98>)
   81540:	601a      	str	r2, [r3, #0]
   81542:	4770      	bx	lr
   81544:	400e0a00 	.word	0x400e0a00
   81548:	400e0c00 	.word	0x400e0c00
   8154c:	400e0600 	.word	0x400e0600
   81550:	00370809 	.word	0x00370809
   81554:	01370809 	.word	0x01370809
   81558:	200d3f01 	.word	0x200d3f01
   8155c:	0501bd00 	.word	0x0501bd00
   81560:	20070048 	.word	0x20070048

00081564 <Reset_Handler>:
   81564:	b508      	push	{r3, lr}
   81566:	4a13      	ldr	r2, [pc, #76]	; (815b4 <Reset_Handler+0x50>)
   81568:	4b13      	ldr	r3, [pc, #76]	; (815b8 <Reset_Handler+0x54>)
   8156a:	429a      	cmp	r2, r3
   8156c:	d105      	bne.n	8157a <Reset_Handler+0x16>
   8156e:	4b13      	ldr	r3, [pc, #76]	; (815bc <Reset_Handler+0x58>)
   81570:	e00a      	b.n	81588 <Reset_Handler+0x24>
   81572:	f852 1b04 	ldr.w	r1, [r2], #4
   81576:	f843 1b04 	str.w	r1, [r3], #4
   8157a:	4911      	ldr	r1, [pc, #68]	; (815c0 <Reset_Handler+0x5c>)
   8157c:	428b      	cmp	r3, r1
   8157e:	d3f8      	bcc.n	81572 <Reset_Handler+0xe>
   81580:	e7f5      	b.n	8156e <Reset_Handler+0xa>
   81582:	2200      	movs	r2, #0
   81584:	f843 2b04 	str.w	r2, [r3], #4
   81588:	4a0e      	ldr	r2, [pc, #56]	; (815c4 <Reset_Handler+0x60>)
   8158a:	4293      	cmp	r3, r2
   8158c:	d3f9      	bcc.n	81582 <Reset_Handler+0x1e>
   8158e:	490e      	ldr	r1, [pc, #56]	; (815c8 <Reset_Handler+0x64>)
   81590:	4b0e      	ldr	r3, [pc, #56]	; (815cc <Reset_Handler+0x68>)
   81592:	f021 4260 	bic.w	r2, r1, #3758096384	; 0xe0000000
   81596:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
   8159a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   8159e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   815a2:	609a      	str	r2, [r3, #8]
   815a4:	d203      	bcs.n	815ae <Reset_Handler+0x4a>
   815a6:	689a      	ldr	r2, [r3, #8]
   815a8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   815ac:	609a      	str	r2, [r3, #8]
   815ae:	4b08      	ldr	r3, [pc, #32]	; (815d0 <Reset_Handler+0x6c>)
   815b0:	4798      	blx	r3
   815b2:	e7fe      	b.n	815b2 <Reset_Handler+0x4e>
   815b4:	00082890 	.word	0x00082890
   815b8:	20070000 	.word	0x20070000
   815bc:	20070050 	.word	0x20070050
   815c0:	20070050 	.word	0x20070050
   815c4:	200704f0 	.word	0x200704f0
   815c8:	00080000 	.word	0x00080000
   815cc:	e000ed00 	.word	0xe000ed00
   815d0:	000804d1 	.word	0x000804d1

000815d4 <adc_init>:
   815d4:	b530      	push	{r4, r5, lr}
   815d6:	0052      	lsls	r2, r2, #1
   815d8:	2401      	movs	r4, #1
   815da:	6004      	str	r4, [r0, #0]
   815dc:	f240 2502 	movw	r5, #514	; 0x202
   815e0:	3c01      	subs	r4, #1
   815e2:	fbb1 f2f2 	udiv	r2, r1, r2
   815e6:	6044      	str	r4, [r0, #4]
   815e8:	3a01      	subs	r2, #1
   815ea:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
   815ee:	041b      	lsls	r3, r3, #16
   815f0:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
   815f4:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
   815f8:	6845      	ldr	r5, [r0, #4]
   815fa:	0612      	lsls	r2, r2, #24
   815fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   81600:	ea43 4212 	orr.w	r2, r3, r2, lsr #16
   81604:	ea42 0505 	orr.w	r5, r2, r5
   81608:	6045      	str	r5, [r0, #4]
   8160a:	4620      	mov	r0, r4
   8160c:	bd30      	pop	{r4, r5, pc}

0008160e <adc_configure_trigger>:
   8160e:	6843      	ldr	r3, [r0, #4]
   81610:	4319      	orrs	r1, r3
   81612:	01d3      	lsls	r3, r2, #7
   81614:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   81618:	4319      	orrs	r1, r3
   8161a:	6041      	str	r1, [r0, #4]
   8161c:	4770      	bx	lr

0008161e <adc_configure_timing>:
   8161e:	b510      	push	{r4, lr}
   81620:	6844      	ldr	r4, [r0, #4]
   81622:	071b      	lsls	r3, r3, #28
   81624:	4322      	orrs	r2, r4
   81626:	060c      	lsls	r4, r1, #24
   81628:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
   8162c:	4322      	orrs	r2, r4
   8162e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   81632:	431a      	orrs	r2, r3
   81634:	6042      	str	r2, [r0, #4]
   81636:	bd10      	pop	{r4, pc}

00081638 <adc_disable_all_channel>:
   81638:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8163c:	6143      	str	r3, [r0, #20]
   8163e:	4770      	bx	lr

00081640 <adc_disable_interrupt>:
   81640:	6281      	str	r1, [r0, #40]	; 0x28
   81642:	4770      	bx	lr

00081644 <UDD_SetStack>:
   81644:	4b01      	ldr	r3, [pc, #4]	; (8164c <UDD_SetStack+0x8>)
   81646:	6018      	str	r0, [r3, #0]
   81648:	4770      	bx	lr
   8164a:	bf00      	nop
   8164c:	200704ec 	.word	0x200704ec

00081650 <UDD_Init>:
   81650:	b510      	push	{r4, lr}
   81652:	2300      	movs	r3, #0
   81654:	4a2a      	ldr	r2, [pc, #168]	; (81700 <UDD_Init+0xb0>)
   81656:	2400      	movs	r4, #0
   81658:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   8165c:	4a29      	ldr	r2, [pc, #164]	; (81704 <UDD_Init+0xb4>)
   8165e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   81662:	3301      	adds	r3, #1
   81664:	2b0a      	cmp	r3, #10
   81666:	d1f5      	bne.n	81654 <UDD_Init+0x4>
   81668:	2028      	movs	r0, #40	; 0x28
   8166a:	4b27      	ldr	r3, [pc, #156]	; (81708 <UDD_Init+0xb8>)
   8166c:	4798      	blx	r3
   8166e:	4b27      	ldr	r3, [pc, #156]	; (8170c <UDD_Init+0xbc>)
   81670:	4798      	blx	r3
   81672:	4620      	mov	r0, r4
   81674:	4b26      	ldr	r3, [pc, #152]	; (81710 <UDD_Init+0xc0>)
   81676:	4798      	blx	r3
   81678:	4b26      	ldr	r3, [pc, #152]	; (81714 <UDD_Init+0xc4>)
   8167a:	4798      	blx	r3
   8167c:	4b26      	ldr	r3, [pc, #152]	; (81718 <UDD_Init+0xc8>)
   8167e:	f44f 7280 	mov.w	r2, #256	; 0x100
   81682:	f883 4328 	strb.w	r4, [r3, #808]	; 0x328
   81686:	605a      	str	r2, [r3, #4]
   81688:	4b24      	ldr	r3, [pc, #144]	; (8171c <UDD_Init+0xcc>)
   8168a:	4620      	mov	r0, r4
   8168c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81690:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   81694:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   81698:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8169c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   816a0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   816a4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   816a8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   816ac:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   816b0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   816b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   816b8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   816bc:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   816c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   816c4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   816c8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   816cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   816d0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   816d4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   816d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   816dc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   816e0:	681a      	ldr	r2, [r3, #0]
   816e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   816e6:	601a      	str	r2, [r3, #0]
   816e8:	681a      	ldr	r2, [r3, #0]
   816ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
   816ee:	601a      	str	r2, [r3, #0]
   816f0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   816f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   816f8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   816fc:	bd10      	pop	{r4, pc}
   816fe:	bf00      	nop
   81700:	200704c4 	.word	0x200704c4
   81704:	2007049c 	.word	0x2007049c
   81708:	000813f5 	.word	0x000813f5
   8170c:	000813dd 	.word	0x000813dd
   81710:	00081485 	.word	0x00081485
   81714:	00081499 	.word	0x00081499
   81718:	e000e100 	.word	0xe000e100
   8171c:	400ac000 	.word	0x400ac000

00081720 <UDD_Attach>:
   81720:	4b10      	ldr	r3, [pc, #64]	; (81764 <UDD_Attach+0x44>)
   81722:	6819      	ldr	r1, [r3, #0]
   81724:	b672      	cpsid	i
   81726:	f3bf 8f5f 	dmb	sy
   8172a:	2200      	movs	r2, #0
   8172c:	601a      	str	r2, [r3, #0]
   8172e:	4a0e      	ldr	r2, [pc, #56]	; (81768 <UDD_Attach+0x48>)
   81730:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
   81734:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
   81738:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
   8173c:	461a      	mov	r2, r3
   8173e:	4b0a      	ldr	r3, [pc, #40]	; (81768 <UDD_Attach+0x48>)
   81740:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
   81744:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   81748:	d0f9      	beq.n	8173e <UDD_Attach+0x1e>
   8174a:	6818      	ldr	r0, [r3, #0]
   8174c:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   81750:	6018      	str	r0, [r3, #0]
   81752:	2008      	movs	r0, #8
   81754:	6198      	str	r0, [r3, #24]
   81756:	b121      	cbz	r1, 81762 <UDD_Attach+0x42>
   81758:	2301      	movs	r3, #1
   8175a:	6013      	str	r3, [r2, #0]
   8175c:	f3bf 8f5f 	dmb	sy
   81760:	b662      	cpsie	i
   81762:	4770      	bx	lr
   81764:	2007004c 	.word	0x2007004c
   81768:	400ac000 	.word	0x400ac000

0008176c <UDD_InitEP>:
   8176c:	4b09      	ldr	r3, [pc, #36]	; (81794 <UDD_InitEP+0x28>)
   8176e:	f000 000f 	and.w	r0, r0, #15
   81772:	f100 0240 	add.w	r2, r0, #64	; 0x40
   81776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8177a:	2201      	movs	r2, #1
   8177c:	4082      	lsls	r2, r0
   8177e:	69d9      	ldr	r1, [r3, #28]
   81780:	430a      	orrs	r2, r1
   81782:	61da      	str	r2, [r3, #28]
   81784:	4b04      	ldr	r3, [pc, #16]	; (81798 <UDD_InitEP+0x2c>)
   81786:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   8178a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   8178e:	d100      	bne.n	81792 <UDD_InitEP+0x26>
   81790:	e7fe      	b.n	81790 <UDD_InitEP+0x24>
   81792:	4770      	bx	lr
   81794:	400ac000 	.word	0x400ac000
   81798:	400ac130 	.word	0x400ac130

0008179c <UDD_InitEndpoints>:
   8179c:	b570      	push	{r4, r5, r6, lr}
   8179e:	2301      	movs	r3, #1
   817a0:	4c0b      	ldr	r4, [pc, #44]	; (817d0 <UDD_InitEndpoints+0x34>)
   817a2:	e012      	b.n	817ca <UDD_InitEndpoints+0x2e>
   817a4:	4a0b      	ldr	r2, [pc, #44]	; (817d4 <UDD_InitEndpoints+0x38>)
   817a6:	f850 6f04 	ldr.w	r6, [r0, #4]!
   817aa:	f103 0540 	add.w	r5, r3, #64	; 0x40
   817ae:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
   817b2:	2501      	movs	r5, #1
   817b4:	409d      	lsls	r5, r3
   817b6:	69d6      	ldr	r6, [r2, #28]
   817b8:	4335      	orrs	r5, r6
   817ba:	61d5      	str	r5, [r2, #28]
   817bc:	f854 2b04 	ldr.w	r2, [r4], #4
   817c0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   817c4:	d100      	bne.n	817c8 <UDD_InitEndpoints+0x2c>
   817c6:	e7fe      	b.n	817c6 <UDD_InitEndpoints+0x2a>
   817c8:	3301      	adds	r3, #1
   817ca:	428b      	cmp	r3, r1
   817cc:	d3ea      	bcc.n	817a4 <UDD_InitEndpoints+0x8>
   817ce:	bd70      	pop	{r4, r5, r6, pc}
   817d0:	400ac134 	.word	0x400ac134
   817d4:	400ac000 	.word	0x400ac000

000817d8 <UDD_WaitIN>:
   817d8:	4b03      	ldr	r3, [pc, #12]	; (817e8 <UDD_WaitIN+0x10>)
   817da:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   817de:	f013 0f01 	tst.w	r3, #1
   817e2:	d0f9      	beq.n	817d8 <UDD_WaitIN>
   817e4:	4770      	bx	lr
   817e6:	bf00      	nop
   817e8:	400ac000 	.word	0x400ac000

000817ec <UDD_WaitOUT>:
   817ec:	4b03      	ldr	r3, [pc, #12]	; (817fc <UDD_WaitOUT+0x10>)
   817ee:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   817f2:	f013 0f02 	tst.w	r3, #2
   817f6:	d0f9      	beq.n	817ec <UDD_WaitOUT>
   817f8:	4770      	bx	lr
   817fa:	bf00      	nop
   817fc:	400ac000 	.word	0x400ac000

00081800 <UDD_ClearIN>:
   81800:	4b03      	ldr	r3, [pc, #12]	; (81810 <UDD_ClearIN+0x10>)
   81802:	2201      	movs	r2, #1
   81804:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   81808:	4b02      	ldr	r3, [pc, #8]	; (81814 <UDD_ClearIN+0x14>)
   8180a:	3a01      	subs	r2, #1
   8180c:	601a      	str	r2, [r3, #0]
   8180e:	4770      	bx	lr
   81810:	400ac000 	.word	0x400ac000
   81814:	200704c4 	.word	0x200704c4

00081818 <UDD_ClearOUT>:
   81818:	4b03      	ldr	r3, [pc, #12]	; (81828 <UDD_ClearOUT+0x10>)
   8181a:	2202      	movs	r2, #2
   8181c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   81820:	4b02      	ldr	r3, [pc, #8]	; (8182c <UDD_ClearOUT+0x14>)
   81822:	3a02      	subs	r2, #2
   81824:	601a      	str	r2, [r3, #0]
   81826:	4770      	bx	lr
   81828:	400ac000 	.word	0x400ac000
   8182c:	2007049c 	.word	0x2007049c

00081830 <UDD_ReceivedSetupInt>:
   81830:	4b02      	ldr	r3, [pc, #8]	; (8183c <UDD_ReceivedSetupInt+0xc>)
   81832:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   81836:	f000 0004 	and.w	r0, r0, #4
   8183a:	4770      	bx	lr
   8183c:	400ac000 	.word	0x400ac000

00081840 <UDD_ClearSetupInt>:
   81840:	4b02      	ldr	r3, [pc, #8]	; (8184c <UDD_ClearSetupInt+0xc>)
   81842:	2204      	movs	r2, #4
   81844:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   81848:	4770      	bx	lr
   8184a:	bf00      	nop
   8184c:	400ac000 	.word	0x400ac000

00081850 <UDD_Send>:
   81850:	b570      	push	{r4, r5, r6, lr}
   81852:	4615      	mov	r5, r2
   81854:	03c2      	lsls	r2, r0, #15
   81856:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   8185a:	4603      	mov	r3, r0
   8185c:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   81860:	481c      	ldr	r0, [pc, #112]	; (818d4 <UDD_Send+0x84>)
   81862:	f103 044c 	add.w	r4, r3, #76	; 0x4c
   81866:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   8186a:	f010 0f01 	tst.w	r0, #1
   8186e:	d0f7      	beq.n	81860 <UDD_Send+0x10>
   81870:	4c19      	ldr	r4, [pc, #100]	; (818d8 <UDD_Send+0x88>)
   81872:	b93b      	cbnz	r3, 81884 <UDD_Send+0x34>
   81874:	6820      	ldr	r0, [r4, #0]
   81876:	1828      	adds	r0, r5, r0
   81878:	2840      	cmp	r0, #64	; 0x40
   8187a:	d906      	bls.n	8188a <UDD_Send+0x3a>
   8187c:	6825      	ldr	r5, [r4, #0]
   8187e:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
   81882:	e002      	b.n	8188a <UDD_Send+0x3a>
   81884:	2000      	movs	r0, #0
   81886:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
   8188a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   8188e:	1810      	adds	r0, r2, r0
   81890:	2200      	movs	r2, #0
   81892:	e002      	b.n	8189a <UDD_Send+0x4a>
   81894:	5c8e      	ldrb	r6, [r1, r2]
   81896:	5486      	strb	r6, [r0, r2]
   81898:	3201      	adds	r2, #1
   8189a:	42aa      	cmp	r2, r5
   8189c:	d1fa      	bne.n	81894 <UDD_Send+0x44>
   8189e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   818a2:	18aa      	adds	r2, r5, r2
   818a4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   818a8:	b933      	cbnz	r3, 818b8 <UDD_Send+0x68>
   818aa:	4b0b      	ldr	r3, [pc, #44]	; (818d8 <UDD_Send+0x88>)
   818ac:	681b      	ldr	r3, [r3, #0]
   818ae:	2b40      	cmp	r3, #64	; 0x40
   818b0:	d10d      	bne.n	818ce <UDD_Send+0x7e>
   818b2:	4b0a      	ldr	r3, [pc, #40]	; (818dc <UDD_Send+0x8c>)
   818b4:	4798      	blx	r3
   818b6:	e00a      	b.n	818ce <UDD_Send+0x7e>
   818b8:	4a06      	ldr	r2, [pc, #24]	; (818d4 <UDD_Send+0x84>)
   818ba:	f103 0158 	add.w	r1, r3, #88	; 0x58
   818be:	2001      	movs	r0, #1
   818c0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   818c4:	3388      	adds	r3, #136	; 0x88
   818c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   818ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   818ce:	4628      	mov	r0, r5
   818d0:	bd70      	pop	{r4, r5, r6, pc}
   818d2:	bf00      	nop
   818d4:	400ac000 	.word	0x400ac000
   818d8:	200704c4 	.word	0x200704c4
   818dc:	00081801 	.word	0x00081801

000818e0 <UDD_Send8>:
   818e0:	4b08      	ldr	r3, [pc, #32]	; (81904 <UDD_Send8+0x24>)
   818e2:	b510      	push	{r4, lr}
   818e4:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   818e8:	03c4      	lsls	r4, r0, #15
   818ea:	18a2      	adds	r2, r4, r2
   818ec:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   818f0:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   818f4:	7011      	strb	r1, [r2, #0]
   818f6:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   818fa:	3201      	adds	r2, #1
   818fc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   81900:	bd10      	pop	{r4, pc}
   81902:	bf00      	nop
   81904:	200704c4 	.word	0x200704c4

00081908 <UDD_Recv8>:
   81908:	4a08      	ldr	r2, [pc, #32]	; (8192c <UDD_Recv8+0x24>)
   8190a:	4603      	mov	r3, r0
   8190c:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   81910:	03c0      	lsls	r0, r0, #15
   81912:	1841      	adds	r1, r0, r1
   81914:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   81918:	f501 11c0 	add.w	r1, r1, #1572864	; 0x180000
   8191c:	7808      	ldrb	r0, [r1, #0]
   8191e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   81922:	3101      	adds	r1, #1
   81924:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   81928:	4770      	bx	lr
   8192a:	bf00      	nop
   8192c:	2007049c 	.word	0x2007049c

00081930 <UDD_Recv>:
   81930:	b570      	push	{r4, r5, r6, lr}
   81932:	4c0b      	ldr	r4, [pc, #44]	; (81960 <UDD_Recv+0x30>)
   81934:	03c3      	lsls	r3, r0, #15
   81936:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   8193a:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   8193e:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   81942:	195d      	adds	r5, r3, r5
   81944:	2300      	movs	r3, #0
   81946:	e002      	b.n	8194e <UDD_Recv+0x1e>
   81948:	5cee      	ldrb	r6, [r5, r3]
   8194a:	54ce      	strb	r6, [r1, r3]
   8194c:	3301      	adds	r3, #1
   8194e:	4293      	cmp	r3, r2
   81950:	d1fa      	bne.n	81948 <UDD_Recv+0x18>
   81952:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
   81956:	189b      	adds	r3, r3, r2
   81958:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
   8195c:	bd70      	pop	{r4, r5, r6, pc}
   8195e:	bf00      	nop
   81960:	2007049c 	.word	0x2007049c

00081964 <UDD_Stall>:
   81964:	4b03      	ldr	r3, [pc, #12]	; (81974 <UDD_Stall+0x10>)
   81966:	2201      	movs	r2, #1
   81968:	61da      	str	r2, [r3, #28]
   8196a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8196e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
   81972:	4770      	bx	lr
   81974:	400ac000 	.word	0x400ac000

00081978 <UDD_FifoByteCount>:
   81978:	4b04      	ldr	r3, [pc, #16]	; (8198c <UDD_FifoByteCount+0x14>)
   8197a:	304c      	adds	r0, #76	; 0x4c
   8197c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   81980:	4803      	ldr	r0, [pc, #12]	; (81990 <UDD_FifoByteCount+0x18>)
   81982:	ea03 0000 	and.w	r0, r3, r0
   81986:	0d00      	lsrs	r0, r0, #20
   81988:	4770      	bx	lr
   8198a:	bf00      	nop
   8198c:	400ac000 	.word	0x400ac000
   81990:	7ff00000 	.word	0x7ff00000

00081994 <UDD_ReleaseRX>:
   81994:	4b08      	ldr	r3, [pc, #32]	; (819b8 <UDD_ReleaseRX+0x24>)
   81996:	f100 0258 	add.w	r2, r0, #88	; 0x58
   8199a:	2102      	movs	r1, #2
   8199c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   819a0:	f100 0288 	add.w	r2, r0, #136	; 0x88
   819a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   819a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   819ac:	4b03      	ldr	r3, [pc, #12]	; (819bc <UDD_ReleaseRX+0x28>)
   819ae:	2200      	movs	r2, #0
   819b0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   819b4:	4770      	bx	lr
   819b6:	bf00      	nop
   819b8:	400ac000 	.word	0x400ac000
   819bc:	2007049c 	.word	0x2007049c

000819c0 <UDD_ReleaseTX>:
   819c0:	4b08      	ldr	r3, [pc, #32]	; (819e4 <UDD_ReleaseTX+0x24>)
   819c2:	f100 0258 	add.w	r2, r0, #88	; 0x58
   819c6:	2101      	movs	r1, #1
   819c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   819cc:	f100 0288 	add.w	r2, r0, #136	; 0x88
   819d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   819d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   819d8:	4b03      	ldr	r3, [pc, #12]	; (819e8 <UDD_ReleaseTX+0x28>)
   819da:	2200      	movs	r2, #0
   819dc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   819e0:	4770      	bx	lr
   819e2:	bf00      	nop
   819e4:	400ac000 	.word	0x400ac000
   819e8:	200704c4 	.word	0x200704c4

000819ec <UDD_SetAddress>:
   819ec:	4b06      	ldr	r3, [pc, #24]	; (81a08 <UDD_SetAddress+0x1c>)
   819ee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   819f2:	681a      	ldr	r2, [r3, #0]
   819f4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   819f8:	ea40 0202 	orr.w	r2, r0, r2
   819fc:	601a      	str	r2, [r3, #0]
   819fe:	681a      	ldr	r2, [r3, #0]
   81a00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   81a04:	601a      	str	r2, [r3, #0]
   81a06:	4770      	bx	lr
   81a08:	400ac000 	.word	0x400ac000

00081a0c <UOTGHS_Handler>:
   81a0c:	b508      	push	{r3, lr}
   81a0e:	4b02      	ldr	r3, [pc, #8]	; (81a18 <UOTGHS_Handler+0xc>)
   81a10:	681b      	ldr	r3, [r3, #0]
   81a12:	b103      	cbz	r3, 81a16 <UOTGHS_Handler+0xa>
   81a14:	4798      	blx	r3
   81a16:	bd08      	pop	{r3, pc}
   81a18:	200704ec 	.word	0x200704ec

00081a1c <__libc_init_array>:
   81a1c:	b570      	push	{r4, r5, r6, lr}
   81a1e:	f642 066c 	movw	r6, #10348	; 0x286c
   81a22:	f642 056c 	movw	r5, #10348	; 0x286c
   81a26:	f2c0 0608 	movt	r6, #8
   81a2a:	f2c0 0508 	movt	r5, #8
   81a2e:	1b76      	subs	r6, r6, r5
   81a30:	10b6      	asrs	r6, r6, #2
   81a32:	d006      	beq.n	81a42 <__libc_init_array+0x26>
   81a34:	2400      	movs	r4, #0
   81a36:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   81a3a:	3401      	adds	r4, #1
   81a3c:	4798      	blx	r3
   81a3e:	42a6      	cmp	r6, r4
   81a40:	d8f9      	bhi.n	81a36 <__libc_init_array+0x1a>
   81a42:	f642 056c 	movw	r5, #10348	; 0x286c
   81a46:	f642 0680 	movw	r6, #10368	; 0x2880
   81a4a:	f2c0 0508 	movt	r5, #8
   81a4e:	f2c0 0608 	movt	r6, #8
   81a52:	1b76      	subs	r6, r6, r5
   81a54:	f000 ff04 	bl	82860 <_init>
   81a58:	10b6      	asrs	r6, r6, #2
   81a5a:	d006      	beq.n	81a6a <__libc_init_array+0x4e>
   81a5c:	2400      	movs	r4, #0
   81a5e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   81a62:	3401      	adds	r4, #1
   81a64:	4798      	blx	r3
   81a66:	42a6      	cmp	r6, r4
   81a68:	d8f9      	bhi.n	81a5e <__libc_init_array+0x42>
   81a6a:	bd70      	pop	{r4, r5, r6, pc}

00081a6c <memset>:
   81a6c:	2a03      	cmp	r2, #3
   81a6e:	b2c9      	uxtb	r1, r1
   81a70:	b430      	push	{r4, r5}
   81a72:	d807      	bhi.n	81a84 <memset+0x18>
   81a74:	b122      	cbz	r2, 81a80 <memset+0x14>
   81a76:	2300      	movs	r3, #0
   81a78:	54c1      	strb	r1, [r0, r3]
   81a7a:	3301      	adds	r3, #1
   81a7c:	4293      	cmp	r3, r2
   81a7e:	d1fb      	bne.n	81a78 <memset+0xc>
   81a80:	bc30      	pop	{r4, r5}
   81a82:	4770      	bx	lr
   81a84:	eb00 0c02 	add.w	ip, r0, r2
   81a88:	4603      	mov	r3, r0
   81a8a:	e001      	b.n	81a90 <memset+0x24>
   81a8c:	f803 1c01 	strb.w	r1, [r3, #-1]
   81a90:	f003 0403 	and.w	r4, r3, #3
   81a94:	461a      	mov	r2, r3
   81a96:	3301      	adds	r3, #1
   81a98:	2c00      	cmp	r4, #0
   81a9a:	d1f7      	bne.n	81a8c <memset+0x20>
   81a9c:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
   81aa0:	ebc2 040c 	rsb	r4, r2, ip
   81aa4:	fb03 f301 	mul.w	r3, r3, r1
   81aa8:	e01f      	b.n	81aea <memset+0x7e>
   81aaa:	f842 3c40 	str.w	r3, [r2, #-64]
   81aae:	f842 3c3c 	str.w	r3, [r2, #-60]
   81ab2:	f842 3c38 	str.w	r3, [r2, #-56]
   81ab6:	f842 3c34 	str.w	r3, [r2, #-52]
   81aba:	f842 3c30 	str.w	r3, [r2, #-48]
   81abe:	f842 3c2c 	str.w	r3, [r2, #-44]
   81ac2:	f842 3c28 	str.w	r3, [r2, #-40]
   81ac6:	f842 3c24 	str.w	r3, [r2, #-36]
   81aca:	f842 3c20 	str.w	r3, [r2, #-32]
   81ace:	f842 3c1c 	str.w	r3, [r2, #-28]
   81ad2:	f842 3c18 	str.w	r3, [r2, #-24]
   81ad6:	f842 3c14 	str.w	r3, [r2, #-20]
   81ada:	f842 3c10 	str.w	r3, [r2, #-16]
   81ade:	f842 3c0c 	str.w	r3, [r2, #-12]
   81ae2:	f842 3c08 	str.w	r3, [r2, #-8]
   81ae6:	f842 3c04 	str.w	r3, [r2, #-4]
   81aea:	4615      	mov	r5, r2
   81aec:	3240      	adds	r2, #64	; 0x40
   81aee:	2c3f      	cmp	r4, #63	; 0x3f
   81af0:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
   81af4:	dcd9      	bgt.n	81aaa <memset+0x3e>
   81af6:	462a      	mov	r2, r5
   81af8:	ebc5 040c 	rsb	r4, r5, ip
   81afc:	e007      	b.n	81b0e <memset+0xa2>
   81afe:	f842 3c10 	str.w	r3, [r2, #-16]
   81b02:	f842 3c0c 	str.w	r3, [r2, #-12]
   81b06:	f842 3c08 	str.w	r3, [r2, #-8]
   81b0a:	f842 3c04 	str.w	r3, [r2, #-4]
   81b0e:	4615      	mov	r5, r2
   81b10:	3210      	adds	r2, #16
   81b12:	2c0f      	cmp	r4, #15
   81b14:	f1a4 0410 	sub.w	r4, r4, #16
   81b18:	dcf1      	bgt.n	81afe <memset+0x92>
   81b1a:	462a      	mov	r2, r5
   81b1c:	ebc5 050c 	rsb	r5, r5, ip
   81b20:	e001      	b.n	81b26 <memset+0xba>
   81b22:	f842 3c04 	str.w	r3, [r2, #-4]
   81b26:	4614      	mov	r4, r2
   81b28:	3204      	adds	r2, #4
   81b2a:	2d03      	cmp	r5, #3
   81b2c:	f1a5 0504 	sub.w	r5, r5, #4
   81b30:	dcf7      	bgt.n	81b22 <memset+0xb6>
   81b32:	e001      	b.n	81b38 <memset+0xcc>
   81b34:	f804 1b01 	strb.w	r1, [r4], #1
   81b38:	4564      	cmp	r4, ip
   81b3a:	d3fb      	bcc.n	81b34 <memset+0xc8>
   81b3c:	e7a0      	b.n	81a80 <memset+0x14>
   81b3e:	bf00      	nop

00081b40 <strlen>:
   81b40:	f020 0103 	bic.w	r1, r0, #3
   81b44:	f010 0003 	ands.w	r0, r0, #3
   81b48:	f1c0 0000 	rsb	r0, r0, #0
   81b4c:	f851 3b04 	ldr.w	r3, [r1], #4
   81b50:	f100 0c04 	add.w	ip, r0, #4
   81b54:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81b58:	f06f 0200 	mvn.w	r2, #0
   81b5c:	bf1c      	itt	ne
   81b5e:	fa22 f20c 	lsrne.w	r2, r2, ip
   81b62:	4313      	orrne	r3, r2
   81b64:	f04f 0c01 	mov.w	ip, #1
   81b68:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81b6c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81b70:	eba3 020c 	sub.w	r2, r3, ip
   81b74:	ea22 0203 	bic.w	r2, r2, r3
   81b78:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81b7c:	bf04      	itt	eq
   81b7e:	f851 3b04 	ldreq.w	r3, [r1], #4
   81b82:	3004      	addeq	r0, #4
   81b84:	d0f4      	beq.n	81b70 <strlen+0x30>
   81b86:	f013 0fff 	tst.w	r3, #255	; 0xff
   81b8a:	bf1f      	itttt	ne
   81b8c:	3001      	addne	r0, #1
   81b8e:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   81b92:	3001      	addne	r0, #1
   81b94:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   81b98:	bf18      	it	ne
   81b9a:	3001      	addne	r0, #1
   81b9c:	4770      	bx	lr
   81b9e:	bf00      	nop

00081ba0 <_ZTV9UARTClass>:
	...
   81ba8:	0439 0008 0285 0008 03f1 0008 0411 0008     9...............
   81bb8:	03ff 0008 042d 0008 03c9 0008 0000 0000     ....-...........

00081bc8 <USB_DeviceDescriptorA>:
   81bc8:	0112 0200 0002 4000 2341 003e 0100 0201     .......@A#>.....
   81bd8:	0100 0000                                   ....

00081bdc <USB_DeviceDescriptor>:
   81bdc:	0112 0200 0000 4000 2341 003e 0100 0201     .......@A#>.....
   81bec:	0100 0000                                   ....

00081bf0 <_ZL9EndPoints>:
   81bf0:	2032 0000 3936 0000 3066 0000 3166 0000     2 ..69..f0..f1..
   81c00:	3936 0000                                   69..

00081c04 <STRING_LANGUAGE>:
   81c04:	0304 0409                                   ....

00081c08 <_ZL18test_packet_buffer>:
	...
   81c10:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   81c20:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   81c30:	f7ef fdfb 7efc dfbf f7ef fdfb 007e 0000     .....~......~...

00081c40 <STRING_PRODUCT>:
   81c40:	7241 7564 6e69 206f 7544 0065               Arduino Due.

00081c4c <STRING_MANUFACTURER>:
   81c4c:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

00081c58 <_ZL19USB_DeviceQualifier>:
   81c58:	060a 0200 0000 4000 0001 0000 0000 0000     .......@........
	...

00081c70 <_ZTV9Keyboard_>:
	...
   81c78:	0c35 0008 0285 0008 0d11 0008 0c9d 0008     5...............
   81c88:	0c85 0008 0000 0000                         ........

00081c90 <_asciimap>:
	...
   81c98:	2b2a 0028 0000 0000 0000 0000 0000 0000     *+(.............
	...
   81cb0:	9e2c a0b4 a2a1 34a4 a7a6 aea5 2d36 3837     ,......4....6-78
   81cc0:	1e27 201f 2221 2423 2625 33b3 2eb6 b8b7     '.. !"#$%&.3....
   81cd0:	849f 8685 8887 8a89 8c8b 8e8d 908f 9291     ................
   81ce0:	9493 9695 9897 9a99 9c9b 2f9d 3031 ada3     .........../10..
   81cf0:	0435 0605 0807 0a09 0c0b 0e0d 100f 1211     5...............
   81d00:	1413 1615 1817 1a19 1c1b af1d b0b1 00b5     ................

00081d10 <_hidInterface>:
   81d10:	0409 0002 0301 0000 0900 0121 0001 2201     ..........!...."
   81d20:	0065 0507 0384 0040 0001 0000               e.....@.....

00081d2c <_hidReportDescriptor>:
   81d2c:	0105 0209 01a1 0109 00a1 0185 0905 0119     ................
   81d3c:	0329 0015 0125 0395 0175 0281 0195 0575     )...%...u.....u.
   81d4c:	0381 0105 3009 3109 3809 8115 7f25 0875     .....0.1.8..%.u.
   81d5c:	0395 0681 c0c0 0105 0609 01a1 0285 0705     ................
   81d6c:	e019 e729 0015 0125 0175 0895 0281 0195     ..)...%.u.......
   81d7c:	0875 0381 0695 0875 0015 6525 0705 0019     u.....u...%e....
   81d8c:	6529 0081 00c0 0000                         )e......

00081d94 <g_APinDescription>:
   81d94:	0e00 400e 0100 0000 000b 0000 0001 0000     ...@............
   81da4:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   81db4:	0200 0000 000b 0000 0001 0000 0000 0000     ................
   81dc4:	0004 0000 ffff ffff 1000 400e 0000 0200     ...........@....
   81dd4:	000c 0000 0002 0000 0000 0000 0014 0000     ................
   81de4:	ffff 00ff 1200 400e 0000 1000 000d 0000     .......@........
   81df4:	0002 0000 0000 0000 0014 0000 ffff 0eff     ................
   81e04:	1200 400e 0000 0400 000d 0000 0002 0000     ...@............
   81e14:	0000 0000 0014 0000 ffff 0dff 1200 400e     ...............@
   81e24:	0000 0200 000d 0000 0002 0000 0000 0000     ................
   81e34:	0014 0000 ffff 0cff 1200 400e 0000 0100     ...........@....
   81e44:	000d 0000 0002 0000 0000 0000 000c 0000     ................
   81e54:	ffff ff07 1200 400e 0000 0080 000d 0000     .......@........
   81e64:	0002 0000 0000 0000 000c 0000 ffff ff06     ................
   81e74:	1200 400e 0000 0040 000d 0000 0002 0000     ...@..@.........
   81e84:	0000 0000 000c 0000 ffff ff05 1200 400e     ...............@
   81e94:	0000 0020 000d 0000 0002 0000 0000 0000     .. .............
   81ea4:	000c 0000 ffff ff04 1200 400e 0000 2000     ...........@... 
   81eb4:	000d 0000 0002 0000 0000 0000 0014 0000     ................
   81ec4:	ffff 0fff 1400 400e 0080 0000 000e 0000     .......@........
   81ed4:	0002 0000 0000 0000 0014 0000 ffff 10ff     ................
   81ee4:	1400 400e 0100 0000 000e 0000 0002 0000     ...@............
   81ef4:	0000 0000 0014 0000 ffff 11ff 1000 400e     ...............@
   81f04:	0000 0800 000c 0000 0002 0000 0000 0000     ................
   81f14:	0014 0000 ffff 01ff 1400 400e 0010 0000     ...........@....
   81f24:	000e 0000 0002 0000 0000 0000 0004 0000     ................
   81f34:	ffff ffff 1400 400e 0020 0000 000e 0000     .......@ .......
   81f44:	0002 0000 0000 0000 0004 0000 ffff ffff     ................
   81f54:	0e00 400e 2000 0000 000b 0000 0001 0000     ...@. ..........
   81f64:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   81f74:	1000 0000 000b 0000 0001 0000 0000 0000     ................
   81f84:	0004 0000 ffff ffff 0e00 400e 0800 0000     ...........@....
   81f94:	000b 0000 0001 0000 0000 0000 0004 0000     ................
   81fa4:	ffff ffff 0e00 400e 0400 0000 000b 0000     .......@........
   81fb4:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   81fc4:	1000 400e 1000 0000 000c 0000 0001 0000     ...@............
   81fd4:	0000 0000 0004 0000 ffff ffff 1000 400e     ...............@
   81fe4:	2000 0000 000c 0000 0001 0000 0000 0000     . ..............
   81ff4:	0004 0000 ffff ffff 1000 400e 0000 0400     ...........@....
   82004:	000c 0000 0004 0000 0000 0000 0004 0000     ................
   82014:	ffff ffff 0e00 400e 4000 0000 000b 0000     .......@.@......
   82024:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   82034:	0e00 400e 8000 0000 000b 0000 0004 0000     ...@............
   82044:	0000 0000 0004 0000 ffff ffff 1400 400e     ...............@
   82054:	0001 0000 000e 0000 0004 0000 0000 0000     ................
   82064:	0004 0000 ffff ffff 1400 400e 0002 0000     ...........@....
   82074:	000e 0000 0004 0000 0000 0000 0004 0000     ................
   82084:	ffff ffff 1400 400e 0004 0000 000e 0000     .......@........
   82094:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   820a4:	1400 400e 0008 0000 000e 0000 0004 0000     ...@............
   820b4:	0000 0000 0004 0000 ffff ffff 1400 400e     ...............@
   820c4:	0040 0000 000e 0000 0004 0000 0000 0000     @...............
   820d4:	0004 0000 ffff ffff 1400 400e 0200 0000     ...........@....
   820e4:	000e 0000 0004 0000 0000 0000 0004 0000     ................
   820f4:	ffff ffff 0e00 400e 0080 0000 000b 0000     .......@........
   82104:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   82114:	1400 400e 0400 0000 000e 0000 0004 0000     ...@............
   82124:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   82134:	0002 0000 000d 0000 0004 0000 0000 0000     ................
   82144:	0004 0000 ffff ffff 1200 400e 0004 0000     ...........@....
   82154:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   82164:	ffff ffff 1200 400e 0008 0000 000d 0000     .......@........
   82174:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   82184:	1200 400e 0010 0000 000d 0000 0004 0000     ...@............
   82194:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   821a4:	0020 0000 000d 0000 0004 0000 0000 0000      ...............
   821b4:	0004 0000 ffff ffff 1200 400e 0040 0000     ...........@@...
   821c4:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   821d4:	ffff ffff 1200 400e 0080 0000 000d 0000     .......@........
   821e4:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   821f4:	1200 400e 0100 0000 000d 0000 0004 0000     ...@............
   82204:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   82214:	0200 0000 000d 0000 0004 0000 0000 0000     ................
   82224:	0004 0000 ffff ffff 0e00 400e 0000 0008     ...........@....
   82234:	000b 0000 0004 0000 0000 0000 0004 0000     ................
   82244:	ffff ffff 0e00 400e 0000 0010 000b 0000     .......@........
   82254:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   82264:	1200 400e 0000 0008 000d 0000 0004 0000     ...@............
   82274:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   82284:	0000 0004 000d 0000 0004 0000 0000 0000     ................
   82294:	0004 0000 ffff ffff 1200 400e 0000 0002     ...........@....
   822a4:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   822b4:	ffff ffff 1200 400e 0000 0001 000d 0000     .......@........
   822c4:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   822d4:	1200 400e 8000 0000 000d 0000 0004 0000     ...@............
   822e4:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   822f4:	4000 0000 000d 0000 0004 0000 0000 0000     .@..............
   82304:	0004 0000 ffff ffff 1200 400e 2000 0000     ...........@. ..
   82314:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   82324:	ffff ffff 1200 400e 1000 0000 000d 0000     .......@........
   82334:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   82344:	1000 400e 0000 0020 000c 0000 0004 0000     ...@.. .........
   82354:	0000 0000 0004 0000 ffff ffff 1000 400e     ...............@
   82364:	4000 0000 000c 0000 0004 0000 0000 0000     .@..............
   82374:	0004 0000 ffff ffff 0e00 400e 0000 0001     ...........@....
   82384:	000b 0000 0003 0000 0000 0000 0002 0000     ................
   82394:	0700 ffff 0e00 400e 0000 0100 000b 0000     .......@........
   823a4:	0003 0000 0000 0000 0002 0000 0601 ffff     ................
   823b4:	0e00 400e 0000 0080 000b 0000 0003 0000     ...@............
   823c4:	0000 0000 0002 0000 0502 ffff 0e00 400e     ...............@
   823d4:	0000 0040 000b 0000 0003 0000 0000 0000     ..@.............
   823e4:	0002 0000 0403 ffff 0e00 400e 0040 0000     ...........@@...
   823f4:	000b 0000 0003 0000 0000 0000 0002 0000     ................
   82404:	0304 05ff 0e00 400e 0010 0000 000b 0000     .......@........
   82414:	0003 0000 0000 0000 0002 0000 0205 ffff     ................
   82424:	0e00 400e 0008 0000 000b 0000 0003 0000     ...@............
   82434:	0000 0000 0002 0000 0106 03ff 0e00 400e     ...............@
   82444:	0004 0000 000b 0000 0003 0000 0000 0000     ................
   82454:	0002 0000 0007 02ff 1000 400e 0000 0002     ...........@....
   82464:	000c 0000 0003 0000 0000 0000 0002 0000     ................
   82474:	0a08 ffff 1000 400e 0000 0004 000c 0000     .......@........
   82484:	0003 0000 0000 0000 0002 0000 0b09 ffff     ................
   82494:	1000 400e 0000 0008 000c 0000 0003 0000     ...@............
   824a4:	0000 0000 0002 0000 0c0a ffff 1000 400e     ...............@
   824b4:	0000 0010 000c 0000 0003 0000 0000 0000     ................
   824c4:	0002 0000 0d0b ffff 1000 400e 8000 0000     ...........@....
   824d4:	000c 0000 0003 0000 0000 0000 0002 0000     ................
   824e4:	100c ffff 1000 400e 0000 0001 000c 0000     .......@........
   824f4:	0003 0000 0000 0000 0002 0000 110d ffff     ................
   82504:	0e00 400e 0002 0000 000b 0000 0001 0000     ...@............
   82514:	0000 0000 0004 0000 ff0e ffff 0e00 400e     ...............@
   82524:	0001 0000 000b 0000 0001 0000 0000 0000     ................
   82534:	0004 0000 ff0f ffff 0e00 400e 0000 0002     ...........@....
   82544:	000b 0000 0001 0000 0000 0000 0004 0000     ................
   82554:	ffff ffff 0e00 400e 0000 0004 000b 0000     .......@........
   82564:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   82574:	1200 400e 0000 4000 000d 0000 0004 0000     ...@...@........
   82584:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   82594:	0000 0020 000b 0000 0004 0000 0000 0000     .. .............
   825a4:	0004 0000 ffff ffff 0e00 400e 0000 0200     ...........@....
   825b4:	000b 0000 0001 0000 0000 0000 0004 0000     ................
   825c4:	ffff ffff 0e00 400e 0000 0400 000b 0000     .......@........
   825d4:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   825e4:	0e00 400e 0000 0800 000b 0000 0001 0000     ...@............
   825f4:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   82604:	0000 1000 000b 0000 0001 0000 0000 0000     ................
   82614:	0004 0000 ffff ffff 1000 400e 0000 0080     ...........@....
   82624:	000c 0000 0002 0000 0000 0000 0004 0000     ................
   82634:	ffff ffff 0e00 400e 0000 0006 000b 0000     .......@........
   82644:	0001 0000 0000 0000 0005 0000 ffff ffff     ................
   82654:	1000 400e 3000 0000 000c 0000 0001 0000     ...@.0..........
   82664:	0000 0000 0005 0000 ffff ffff 0e00 400e     ...............@
   82674:	0300 0000 000b 0000 0001 0000 0000 0000     ................
   82684:	0005 0000 ffff ffff 0e00 400e 0c00 0000     ...........@....
   82694:	000b 0000 0001 0000 0000 0000 0005 0000     ................
   826a4:	ffff ffff 0e00 400e 3000 0000 000b 0000     .......@.0......
   826b4:	0001 0000 0000 0000 0005 0000 ffff ffff     ................
   826c4:	1400 400e 0030 0000 000e 0000 0002 0000     ...@0...........
   826d4:	0000 0000 0005 0000 ffff ffff 1000 400e     ...............@
   826e4:	0c00 0000 000c 0000 0001 0000 0000 0000     ................
   826f4:	0004 0000 ffff ffff 1000 400e 0000 0020     ...........@.. .
   82704:	000c 0000 0002 0000 0000 0000 0004 0000     ................
   82714:	ffff ffff 0e00 400e 0000 2000 000b 0000     .......@... ....
   82724:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   82734:	1000 400e 8000 0000 000c 0000 0001 0000     ...@............
   82744:	0000 0000 0004 0000 ffff ffff 1000 400e     ...............@
   82754:	4000 0000 000c 0000 0001 0000 0000 0000     .@..............
   82764:	0004 0000 ffff ffff 0000 0000 0000 0000     ................
	...
   82784:	ffff ffff                                   ....

00082788 <_ZTV10USARTClass>:
	...
   82790:	107d 0008 0285 0008 1035 0008 1055 0008     }.......5...U...
   827a0:	1043 0008 1071 0008 100d 0008 0000 0000     C...q...........

000827b0 <_ZTV7Serial_>:
	...
   827b8:	10f1 0008 1105 0008 10b9 0008 1135 0008     ............5...
   827c8:	10d1 0008 112d 0008 1179 0008 0000 0000     ....-...y.......

000827d8 <_ZL18_cdcOtherInterface>:
   827d8:	0b08 0200 0202 0001 0409 0000 0201 0002     ................
   827e8:	0500 0024 0110 2405 0101 0401 0224 0506     ..$....$....$...
   827f8:	0624 0100 0507 0381 0010 0910 0104 0200     $...............
   82808:	000a 0000 0507 0202 0040 0700 8305 4002     ........@......@
   82818:	0000 0000                                   ....

0008281c <_ZL13_cdcInterface>:
   8281c:	0b08 0200 0202 0001 0409 0000 0201 0002     ................
   8282c:	0500 0024 0110 2405 0101 0401 0224 0506     ..$....$....$...
   8283c:	0624 0100 0507 0381 0010 0910 0104 0200     $...............
   8284c:	000a 0000 0507 0202 0200 0700 8305 0002     ................
   8285c:	0002 0000                                   ....

00082860 <_init>:
   82860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82862:	bf00      	nop
   82864:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82866:	bc08      	pop	{r3}
   82868:	469e      	mov	lr, r3
   8286a:	4770      	bx	lr

0008286c <__init_array_start>:
   8286c:	00080109 	.word	0x00080109
   82870:	00080bcd 	.word	0x00080bcd
   82874:	00080dd1 	.word	0x00080dd1
   82878:	00080f39 	.word	0x00080f39
   8287c:	0008126d 	.word	0x0008126d

00082880 <_fini>:
   82880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82882:	bf00      	nop
   82884:	bcf8      	pop	{r3, r4, r5, r6, r7}
   82886:	bc08      	pop	{r3}
   82888:	469e      	mov	lr, r3
   8288a:	4770      	bx	lr

0008288c <__fini_array_start>:
   8288c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <banzai>:
20070000:	b672      	cpsid	i
	__disable_irq();

	// Set bootflag to run SAM-BA bootloader at restart
	const int EEFC_FCMD_CGPB = 0x0C;
	const int EEFC_KEY = 0x5A;
	while (EFC0->EEFC_FSR & EEFC_FSR_FRDY == 0);
20070002:	4b07      	ldr	r3, [pc, #28]	; (20070020 <banzai+0x20>)
20070004:	689a      	ldr	r2, [r3, #8]
	EFC0->EEFC_FCR =
		EEFC_FCR_FCMD(EEFC_FCMD_CGPB) |
		EEFC_FCR_FARG(1) |
		EEFC_FCR_FKEY(EEFC_KEY);
20070006:	4a07      	ldr	r2, [pc, #28]	; (20070024 <banzai+0x24>)
20070008:	605a      	str	r2, [r3, #4]
	while (EFC0->EEFC_FSR & EEFC_FSR_FRDY == 0);
2007000a:	689b      	ldr	r3, [r3, #8]
2007000c:	2300      	movs	r3, #0

	// From here flash memory is no more available.

	// Memory swap needs some time to stabilize
	for (uint32_t i=0; i<1000000; i++)
2007000e:	4a06      	ldr	r2, [pc, #24]	; (20070028 <banzai+0x28>)
20070010:	3301      	adds	r3, #1
20070012:	4293      	cmp	r3, r2
20070014:	d1fb      	bne.n	2007000e <banzai+0xe>
	// BANZAIIIIIII!!!
	const int RSTC_KEY = 0xA5;
	RSTC->RSTC_CR =
		RSTC_CR_KEY(RSTC_KEY) |
		RSTC_CR_PROCRST |
		RSTC_CR_PERRST;
20070016:	4a05      	ldr	r2, [pc, #20]	; (2007002c <banzai+0x2c>)
20070018:	4b05      	ldr	r3, [pc, #20]	; (20070030 <banzai+0x30>)
2007001a:	601a      	str	r2, [r3, #0]
2007001c:	e7fe      	b.n	2007001c <banzai+0x1c>
2007001e:	bf00      	nop
20070020:	400e0a00 	.word	0x400e0a00
20070024:	5a00010c 	.word	0x5a00010c
20070028:	000f4240 	.word	0x000f4240
2007002c:	a5000005 	.word	0xa5000005
20070030:	400e1a00 	.word	0x400e1a00

20070034 <pushButton>:
20070034:	00000002                                ....

20070038 <_ZL5ticks>:
20070038:	ffffffff                                ....

2007003c <_hid_protocol>:
2007003c:	00000101                                         .

2007003d <_hid_idle>:
2007003d:	00000001                                         ...

20070040 <_ZL12_usbLineInfo>:
20070040:	0000e100 00080000                       ........

20070048 <SystemCoreClock>:
20070048:	003d0900                                ..=.

2007004c <g_interrupt_enabled>:
2007004c:	00000001                                ....
