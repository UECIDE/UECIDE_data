/home/matt/.uecide/compilers/avr-sam-gcc/bin/arm-none-eabi-objdump -h -S /tmp/build-1b11397e-e830-49a8-a26d-99b120635516/Blink.elf 

/tmp/build-1b11397e-e830-49a8-a26d-99b120635516/Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002634  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000004c  20070000  00082634  00010000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000004a0  2007004c  00082680  0001004c  2**2
                  ALLOC
  3 .ARM.attributes 00000027  00000000  00000000  0001004c  2**0
                  CONTENTS, READONLY
  4 .comment      00000066  00000000  00000000  00010073  2**0
                  CONTENTS, READONLY
  5 .debug_abbrev 00003644  00000000  00000000  000100d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014f33  00000000  00000000  0001371d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000043c4  00000000  00000000  00028650  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000064da  00000000  00000000  0002ca14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 0000002d  00000000  00000000  00032eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000008d0  00000000  00000000  00032f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000010e0  00000000  00000000  000337eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000043e5  00000000  00000000  000348cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000278c  00000000  00000000  00038cb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20088000 	.word	0x20088000
   80004:	00081371 	.word	0x00081371
   80008:	0008017b 	.word	0x0008017b
   8000c:	0008017b 	.word	0x0008017b
   80010:	0008017b 	.word	0x0008017b
   80014:	0008017b 	.word	0x0008017b
   80018:	0008017b 	.word	0x0008017b
	...
   8002c:	0008017d 	.word	0x0008017d
   80030:	0008017b 	.word	0x0008017b
   80034:	00000000 	.word	0x00000000
   80038:	00080181 	.word	0x00080181
   8003c:	00080185 	.word	0x00080185
   80040:	0008017b 	.word	0x0008017b
   80044:	0008017b 	.word	0x0008017b
   80048:	0008017b 	.word	0x0008017b
   8004c:	0008017b 	.word	0x0008017b
   80050:	0008017b 	.word	0x0008017b
   80054:	0008017b 	.word	0x0008017b
   80058:	0008017b 	.word	0x0008017b
   8005c:	0008017b 	.word	0x0008017b
   80060:	00080b5d 	.word	0x00080b5d
   80064:	0008017b 	.word	0x0008017b
   80068:	00000000 	.word	0x00000000
   8006c:	0008017b 	.word	0x0008017b
   80070:	0008017b 	.word	0x0008017b
   80074:	0008017b 	.word	0x0008017b
   80078:	0008017b 	.word	0x0008017b
	...
   80084:	00080b69 	.word	0x00080b69
   80088:	00080b75 	.word	0x00080b75
   8008c:	0008017b 	.word	0x0008017b
   80090:	00080b81 	.word	0x00080b81
   80094:	0008017b 	.word	0x0008017b
   80098:	0008017b 	.word	0x0008017b
   8009c:	0008017b 	.word	0x0008017b
   800a0:	0008017b 	.word	0x0008017b
   800a4:	00000000 	.word	0x00000000
   800a8:	0008017b 	.word	0x0008017b
   800ac:	0008017b 	.word	0x0008017b
   800b0:	0008017b 	.word	0x0008017b
   800b4:	0008017b 	.word	0x0008017b
   800b8:	0008017b 	.word	0x0008017b
   800bc:	0008017b 	.word	0x0008017b
   800c0:	0008017b 	.word	0x0008017b
   800c4:	0008017b 	.word	0x0008017b
   800c8:	0008017b 	.word	0x0008017b
   800cc:	0008017b 	.word	0x0008017b
   800d0:	0008017b 	.word	0x0008017b
   800d4:	0008017b 	.word	0x0008017b
   800d8:	0008017b 	.word	0x0008017b
   800dc:	0008017b 	.word	0x0008017b
   800e0:	00081819 	.word	0x00081819
   800e4:	0008017b 	.word	0x0008017b
   800e8:	0008017b 	.word	0x0008017b
   800ec:	0008017b 	.word	0x0008017b
   800f0:	0008017b 	.word	0x0008017b

000800f4 <__do_global_dtors_aux>:
   800f4:	f240 034c 	movw	r3, #76	; 0x4c
   800f8:	f2c2 0307 	movt	r3, #8199	; 0x2007
   800fc:	781a      	ldrb	r2, [r3, #0]
   800fe:	b90a      	cbnz	r2, 80104 <__do_global_dtors_aux+0x10>
   80100:	2001      	movs	r0, #1
   80102:	7018      	strb	r0, [r3, #0]
   80104:	4770      	bx	lr
   80106:	bf00      	nop

00080108 <frame_dummy>:
   80108:	f242 6034 	movw	r0, #9780	; 0x2634
   8010c:	f2c0 0008 	movt	r0, #8
   80110:	b508      	push	{r3, lr}
   80112:	6803      	ldr	r3, [r0, #0]
   80114:	b12b      	cbz	r3, 80122 <frame_dummy+0x1a>
   80116:	f240 0300 	movw	r3, #0
   8011a:	f2c0 0300 	movt	r3, #0
   8011e:	b103      	cbz	r3, 80122 <frame_dummy+0x1a>
   80120:	4798      	blx	r3
   80122:	bd08      	pop	{r3, pc}

00080124 <loop>:
   80124:	b510      	push	{r4, lr}
   80126:	4c09      	ldr	r4, [pc, #36]	; (8014c <loop+0x28>)
   80128:	2101      	movs	r1, #1
   8012a:	6820      	ldr	r0, [r4, #0]
   8012c:	f000 f86a 	bl	80204 <digitalWrite>
   80130:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80134:	f000 f814 	bl	80160 <delay>
   80138:	6820      	ldr	r0, [r4, #0]
   8013a:	2100      	movs	r1, #0
   8013c:	f000 f862 	bl	80204 <digitalWrite>
   80140:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80148:	f000 b80a 	b.w	80160 <delay>
   8014c:	20070030 	.word	0x20070030

00080150 <setup>:
   80150:	4b02      	ldr	r3, [pc, #8]	; (8015c <setup+0xc>)
   80152:	2101      	movs	r1, #1
   80154:	6818      	ldr	r0, [r3, #0]
   80156:	f000 b821 	b.w	8019c <pinMode>
   8015a:	bf00      	nop
   8015c:	20070030 	.word	0x20070030

00080160 <delay>:
//     return count * 1000 + (SysTick->LOAD + 1 - ticks) / (SystemCoreClock/1000000) ;
// }


void delay( uint32_t ms )
{
   80160:	b510      	push	{r4, lr}
   80162:	4604      	mov	r4, r0
    uint32_t end = GetTickCount() + ms;
   80164:	f001 f8ac 	bl	812c0 <GetTickCount>
   80168:	1904      	adds	r4, r0, r4
    while (GetTickCount() < end)
   8016a:	e001      	b.n	80170 <delay+0x10>
    	yield();
   8016c:	f000 fde8 	bl	80d40 <yield>


void delay( uint32_t ms )
{
    uint32_t end = GetTickCount() + ms;
    while (GetTickCount() < end)
   80170:	f001 f8a6 	bl	812c0 <GetTickCount>
   80174:	42a0      	cmp	r0, r4
   80176:	d3f9      	bcc.n	8016c <delay+0xc>
    	yield();
}
   80178:	bd10      	pop	{r4, pc}

0008017a <ADC_Handler>:

#ifdef __cplusplus
extern "C" {
#endif

static void __halt() {
   8017a:	e7fe      	b.n	8017a <ADC_Handler>

0008017c <SVC_Handler>:
void HardFault_Handler (void) __attribute__ ((weak, alias("__halt")));
void MemManage_Handler (void) __attribute__ ((weak, alias("__halt")));
void BusFault_Handler  (void) __attribute__ ((weak, alias("__halt")));
void UsageFault_Handler(void) __attribute__ ((weak, alias("__halt")));
void DebugMon_Handler  (void) __attribute__ ((weak, alias("__halt")));
void SVC_Handler       (void) { svcHook(); }
   8017c:	f000 bde3 	b.w	80d46 <pendSVHook>

00080180 <PendSV_Handler>:
void PendSV_Handler    (void) {	pendSVHook(); }
   80180:	f000 bde1 	b.w	80d46 <pendSVHook>

00080184 <SysTick_Handler>:

void SysTick_Handler(void)
{
   80184:	b508      	push	{r3, lr}
	if (sysTickHook())
   80186:	f000 fddc 	bl	80d42 <sysTickHook>
   8018a:	b928      	cbnz	r0, 80198 <SysTick_Handler+0x14>
		return;

	tickReset();
   8018c:	f000 f86c 	bl	80268 <tickReset>

	// Increment tick count each ms
	TimeTick_Increment();
}
   80190:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return;

	tickReset();

	// Increment tick count each ms
	TimeTick_Increment();
   80194:	f001 b88c 	b.w	812b0 <TimeTick_Increment>
   80198:	bd08      	pop	{r3, pc}
	...

0008019c <pinMode>:
#ifdef __cplusplus
 extern "C" {
#endif

extern void pinMode( uint32_t ulPin, uint32_t ulMode )
{
   8019c:	b570      	push	{r4, r5, r6, lr}
	if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
   8019e:	251c      	movs	r5, #28
   801a0:	4345      	muls	r5, r0
   801a2:	4e17      	ldr	r6, [pc, #92]	; (80200 <pinMode+0x64>)
   801a4:	1974      	adds	r4, r6, r5
   801a6:	7b23      	ldrb	r3, [r4, #12]
   801a8:	2b00      	cmp	r3, #0
   801aa:	d027      	beq.n	801fc <pinMode+0x60>
    {
        return ;
    }

	switch ( ulMode )
   801ac:	2901      	cmp	r1, #1
   801ae:	d016      	beq.n	801de <pinMode+0x42>
   801b0:	d302      	bcc.n	801b8 <pinMode+0x1c>
   801b2:	2902      	cmp	r1, #2
   801b4:	d122      	bne.n	801fc <pinMode+0x60>
   801b6:	e007      	b.n	801c8 <pinMode+0x2c>
    {
        case INPUT:
            /* Enable peripheral for clocking input */
            pmc_enable_periph_clk( g_APinDescription[ulPin].ulPeripheralId ) ;
   801b8:	68a0      	ldr	r0, [r4, #8]
   801ba:	f001 f821 	bl	81200 <pmc_enable_periph_clk>
            PIO_Configure(
   801be:	5970      	ldr	r0, [r6, r5]
   801c0:	2103      	movs	r1, #3
   801c2:	6862      	ldr	r2, [r4, #4]
   801c4:	2300      	movs	r3, #0
   801c6:	e006      	b.n	801d6 <pinMode+0x3a>
            	0 ) ;
        break ;

        case INPUT_PULLUP:
            /* Enable peripheral for clocking input */
            pmc_enable_periph_clk( g_APinDescription[ulPin].ulPeripheralId ) ;
   801c8:	68a0      	ldr	r0, [r4, #8]
   801ca:	f001 f819 	bl	81200 <pmc_enable_periph_clk>
            PIO_Configure(
   801ce:	5970      	ldr	r0, [r6, r5]
   801d0:	6862      	ldr	r2, [r4, #4]
   801d2:	2103      	movs	r1, #3
   801d4:	2301      	movs	r3, #1
        break ;

        default:
        break ;
    }
}
   801d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        break ;

        case INPUT_PULLUP:
            /* Enable peripheral for clocking input */
            pmc_enable_periph_clk( g_APinDescription[ulPin].ulPeripheralId ) ;
            PIO_Configure(
   801da:	f000 bfbf 	b.w	8115c <PIO_Configure>
            	g_APinDescription[ulPin].ulPin,
            	PIO_PULLUP ) ;
        break ;

        case OUTPUT:
            PIO_Configure(
   801de:	5975      	ldr	r5, [r6, r5]
   801e0:	2105      	movs	r1, #5
   801e2:	6923      	ldr	r3, [r4, #16]
   801e4:	4628      	mov	r0, r5
   801e6:	6862      	ldr	r2, [r4, #4]
   801e8:	f000 ffb8 	bl	8115c <PIO_Configure>
            	PIO_OUTPUT_1,
            	g_APinDescription[ulPin].ulPin,
            	g_APinDescription[ulPin].ulPinConfiguration ) ;

            /* if all pins are output, disable PIO Controller clocking, reduce power consumption */
            if ( g_APinDescription[ulPin].pPort->PIO_OSR == 0xffffffff )
   801ec:	69ab      	ldr	r3, [r5, #24]
   801ee:	3301      	adds	r3, #1
   801f0:	d104      	bne.n	801fc <pinMode+0x60>
            {
                pmc_disable_periph_clk( g_APinDescription[ulPin].ulPeripheralId ) ;
   801f2:	68a0      	ldr	r0, [r4, #8]
        break ;

        default:
        break ;
    }
}
   801f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            	g_APinDescription[ulPin].ulPinConfiguration ) ;

            /* if all pins are output, disable PIO Controller clocking, reduce power consumption */
            if ( g_APinDescription[ulPin].pPort->PIO_OSR == 0xffffffff )
            {
                pmc_disable_periph_clk( g_APinDescription[ulPin].ulPeripheralId ) ;
   801f8:	f001 b826 	b.w	81248 <pmc_disable_periph_clk>
   801fc:	bd70      	pop	{r4, r5, r6, pc}
   801fe:	bf00      	nop
   80200:	00081b10 	.word	0x00081b10

00080204 <digitalWrite>:
}

extern void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
  /* Handle */
	if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
   80204:	221c      	movs	r2, #28
        break ;
    }
}

extern void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
   80206:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Handle */
	if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
   80208:	4350      	muls	r0, r2
   8020a:	4b0f      	ldr	r3, [pc, #60]	; (80248 <digitalWrite+0x44>)
        break ;
    }
}

extern void digitalWrite( uint32_t ulPin, uint32_t ulVal )
{
   8020c:	460e      	mov	r6, r1
  /* Handle */
	if ( g_APinDescription[ulPin].ulPinType == PIO_NOT_A_PIN )
   8020e:	181a      	adds	r2, r3, r0
   80210:	7b11      	ldrb	r1, [r2, #12]
   80212:	b1b1      	cbz	r1, 80242 <digitalWrite+0x3e>
  {
    return ;
  }

  if ( PIO_GetOutputDataStatus( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin ) == 0 )
   80214:	581d      	ldr	r5, [r3, r0]
   80216:	6854      	ldr	r4, [r2, #4]
   80218:	4628      	mov	r0, r5
   8021a:	4621      	mov	r1, r4
   8021c:	f000 ffd8 	bl	811d0 <PIO_GetOutputDataStatus>
   80220:	b938      	cbnz	r0, 80232 <digitalWrite+0x2e>
  {
    PIO_PullUp( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal ) ;
   80222:	4628      	mov	r0, r5
   80224:	4621      	mov	r1, r4
   80226:	4632      	mov	r2, r6
  }
  else
  {
    PIO_SetOutput( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal, 0, PIO_PULLUP ) ;
  }
}
   80228:	b002      	add	sp, #8
   8022a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return ;
  }

  if ( PIO_GetOutputDataStatus( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin ) == 0 )
  {
    PIO_PullUp( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal ) ;
   8022e:	f000 bf3f 	b.w	810b0 <PIO_PullUp>
  }
  else
  {
    PIO_SetOutput( g_APinDescription[ulPin].pPort, g_APinDescription[ulPin].ulPin, ulVal, 0, PIO_PULLUP ) ;
   80232:	2301      	movs	r3, #1
   80234:	9300      	str	r3, [sp, #0]
   80236:	4628      	mov	r0, r5
   80238:	4621      	mov	r1, r4
   8023a:	4632      	mov	r2, r6
   8023c:	2300      	movs	r3, #0
   8023e:	f000 ff71 	bl	81124 <PIO_SetOutput>
  }
}
   80242:	b002      	add	sp, #8
   80244:	bd70      	pop	{r4, r5, r6, pc}
   80246:	bf00      	nop
   80248:	00081b10 	.word	0x00081b10

0008024c <initiateReset>:
	while (true);
}

static int ticks = -1;

void initiateReset(int _ticks) {
   8024c:	4b01      	ldr	r3, [pc, #4]	; (80254 <initiateReset+0x8>)
   8024e:	6018      	str	r0, [r3, #0]
   80250:	4770      	bx	lr
   80252:	bf00      	nop
   80254:	20070034 	.word	0x20070034

00080258 <cancelReset>:
	ticks = _ticks;
}

void cancelReset() {
   80258:	4b02      	ldr	r3, [pc, #8]	; (80264 <cancelReset+0xc>)
   8025a:	f04f 32ff 	mov.w	r2, #4294967295
   8025e:	601a      	str	r2, [r3, #0]
   80260:	4770      	bx	lr
   80262:	bf00      	nop
   80264:	20070034 	.word	0x20070034

00080268 <tickReset>:
	ticks = -1;
}

void tickReset() {
   80268:	4a05      	ldr	r2, [pc, #20]	; (80280 <tickReset+0x18>)
   8026a:	b508      	push	{r3, lr}
	if (ticks == -1)
   8026c:	6813      	ldr	r3, [r2, #0]
   8026e:	1c59      	adds	r1, r3, #1
   80270:	d004      	beq.n	8027c <tickReset+0x14>
		return;
	ticks--;
   80272:	3b01      	subs	r3, #1
   80274:	6013      	str	r3, [r2, #0]
	if (ticks == 0)
   80276:	b90b      	cbnz	r3, 8027c <tickReset+0x14>
		banzai();
   80278:	4b02      	ldr	r3, [pc, #8]	; (80284 <tickReset+0x1c>)
   8027a:	4798      	blx	r3
   8027c:	bd08      	pop	{r3, pc}
   8027e:	bf00      	nop
   80280:	20070034 	.word	0x20070034
   80284:	20070001 	.word	0x20070001

00080288 <main>:

/*
 * \brief Main entry point of Arduino application
 */
int main( void )
{
   80288:	b508      	push	{r3, lr}
	init();
   8028a:	f000 fc7f 	bl	80b8c <init>

	delay(1);
   8028e:	2001      	movs	r0, #1
   80290:	f7ff ff66 	bl	80160 <delay>

#if defined(USBCON)
	USBDevice.attach();
   80294:	4806      	ldr	r0, [pc, #24]	; (802b0 <main+0x28>)
   80296:	f000 fb5b 	bl	80950 <_ZN10USBDevice_6attachEv>
#endif

	setup();
   8029a:	f7ff ff59 	bl	80150 <setup>

	for (;;)
	{
		loop();
		if (serialEventRun) serialEventRun();
   8029e:	4c05      	ldr	r4, [pc, #20]	; (802b4 <main+0x2c>)

	setup();

	for (;;)
	{
		loop();
   802a0:	f7ff ff40 	bl	80124 <loop>
		if (serialEventRun) serialEventRun();
   802a4:	2c00      	cmp	r4, #0
   802a6:	d0fb      	beq.n	802a0 <main+0x18>
   802a8:	f3af 8000 	nop.w
   802ac:	e7f8      	b.n	802a0 <main+0x18>
   802ae:	bf00      	nop
   802b0:	20070064 	.word	0x20070064
   802b4:	00000000 	.word	0x00000000

000802b8 <_ZL11USB_SendZlpv>:
}


static void USB_SendZlp( void )
{
    while( UOTGHS_DEVEPTISR_TXINI != (UOTGHS->UOTGHS_DEVEPTISR[0] & UOTGHS_DEVEPTISR_TXINI ) )
   802b8:	4b06      	ldr	r3, [pc, #24]	; (802d4 <_ZL11USB_SendZlpv+0x1c>)
   802ba:	e002      	b.n	802c2 <_ZL11USB_SendZlpv+0xa>
    {
        if((UOTGHS->UOTGHS_DEVISR & UOTGHS_DEVISR_SUSP) == UOTGHS_DEVISR_SUSP)
   802bc:	685a      	ldr	r2, [r3, #4]
   802be:	07d1      	lsls	r1, r2, #31
   802c0:	d407      	bmi.n	802d2 <_ZL11USB_SendZlpv+0x1a>
}


static void USB_SendZlp( void )
{
    while( UOTGHS_DEVEPTISR_TXINI != (UOTGHS->UOTGHS_DEVEPTISR[0] & UOTGHS_DEVEPTISR_TXINI ) )
   802c2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   802c6:	07d2      	lsls	r2, r2, #31
   802c8:	d5f8      	bpl.n	802bc <_ZL11USB_SendZlpv+0x4>
        if((UOTGHS->UOTGHS_DEVISR & UOTGHS_DEVISR_SUSP) == UOTGHS_DEVISR_SUSP)
        {
            return;
        }
    }
    UOTGHS->UOTGHS_DEVEPTICR[0] = UOTGHS_DEVEPTICR_TXINIC;
   802ca:	4b02      	ldr	r3, [pc, #8]	; (802d4 <_ZL11USB_SendZlpv+0x1c>)
   802cc:	2201      	movs	r2, #1
   802ce:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   802d2:	4770      	bx	lr
   802d4:	400ac000 	.word	0x400ac000

000802d8 <_Z14USBD_Availablem>:
	}
};

//	Number of bytes, assumes a rx endpoint
uint32_t USBD_Available(uint32_t ep)
{
   802d8:	b538      	push	{r3, r4, r5, lr}
typedef uint32_t irqflags_t;
extern int g_interrupt_enabled;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = g_interrupt_enabled;
   802da:	4c09      	ldr	r4, [pc, #36]	; (80300 <_Z14USBD_Availablem+0x28>)
   802dc:	6825      	ldr	r5, [r4, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   802de:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before 
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) static __INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   802e0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   802e4:	2300      	movs	r3, #0
	LockEP lock(ep);
	return UDD_FifoByteCount(ep & 0xF);
   802e6:	f000 000f 	and.w	r0, r0, #15
   802ea:	6023      	str	r3, [r4, #0]
   802ec:	f001 fa4a 	bl	81784 <UDD_FifoByteCount>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   802f0:	b125      	cbz	r5, 802fc <_Z14USBD_Availablem+0x24>
		cpu_irq_enable();
   802f2:	2301      	movs	r3, #1
   802f4:	6023      	str	r3, [r4, #0]
   802f6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   802fa:	b662      	cpsie	i
}
   802fc:	bd38      	pop	{r3, r4, r5, pc}
   802fe:	bf00      	nop
   80300:	20070048 	.word	0x20070048

00080304 <_Z9USBD_RecvmPvm>:

//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
{
	if (!_usbConfiguration || len < 0)
   80304:	4b1b      	ldr	r3, [pc, #108]	; (80374 <_Z9USBD_RecvmPvm+0x70>)
}

//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
{
   80306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!_usbConfiguration || len < 0)
   8030a:	681b      	ldr	r3, [r3, #0]
}

//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
{
   8030c:	460e      	mov	r6, r1
   8030e:	4614      	mov	r4, r2
	if (!_usbConfiguration || len < 0)
   80310:	b1a3      	cbz	r3, 8033c <_Z9USBD_RecvmPvm+0x38>
   80312:	e016      	b.n	80342 <_Z9USBD_RecvmPvm+0x3e>
	uint32_t n = UDD_FifoByteCount(ep & 0xF);
	len = min(n,len);
	n = len;
	uint8_t* dst = (uint8_t*)d;
	while (n--)
		*dst++ = UDD_Recv8(ep & 0xF);
   80314:	4628      	mov	r0, r5
   80316:	f001 f9fd 	bl	81714 <UDD_Recv8>
   8031a:	f806 0b01 	strb.w	r0, [r6], #1
	LockEP lock(ep);
	uint32_t n = UDD_FifoByteCount(ep & 0xF);
	len = min(n,len);
	n = len;
	uint8_t* dst = (uint8_t*)d;
	while (n--)
   8031e:	4546      	cmp	r6, r8
   80320:	d1f8      	bne.n	80314 <_Z9USBD_RecvmPvm+0x10>
		*dst++ = UDD_Recv8(ep & 0xF);
	if (len && !UDD_FifoByteCount(ep & 0xF)) // release empty buffer
   80322:	b11c      	cbz	r4, 8032c <_Z9USBD_RecvmPvm+0x28>
   80324:	4628      	mov	r0, r5
   80326:	f001 fa2d 	bl	81784 <UDD_FifoByteCount>
   8032a:	b1e0      	cbz	r0, 80366 <_Z9USBD_RecvmPvm+0x62>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   8032c:	b1ff      	cbz	r7, 8036e <_Z9USBD_RecvmPvm+0x6a>
		cpu_irq_enable();
   8032e:	4b12      	ldr	r3, [pc, #72]	; (80378 <_Z9USBD_RecvmPvm+0x74>)
   80330:	2201      	movs	r2, #1
   80332:	601a      	str	r2, [r3, #0]
   80334:	f3bf 8f5f 	dmb	sy
   80338:	b662      	cpsie	i
   8033a:	e018      	b.n	8036e <_Z9USBD_RecvmPvm+0x6a>
//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
{
	if (!_usbConfiguration || len < 0)
		return -1;
   8033c:	f04f 34ff 	mov.w	r4, #4294967295
   80340:	e015      	b.n	8036e <_Z9USBD_RecvmPvm+0x6a>
typedef uint32_t irqflags_t;
extern int g_interrupt_enabled;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = g_interrupt_enabled;
   80342:	4b0d      	ldr	r3, [pc, #52]	; (80378 <_Z9USBD_RecvmPvm+0x74>)
   80344:	681f      	ldr	r7, [r3, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) static __INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80346:	b672      	cpsid	i
   80348:	f3bf 8f5f 	dmb	sy

	LockEP lock(ep);
	uint32_t n = UDD_FifoByteCount(ep & 0xF);
   8034c:	f000 050f 	and.w	r5, r0, #15
	cpu_irq_disable();
   80350:	2200      	movs	r2, #0
   80352:	4628      	mov	r0, r5
   80354:	601a      	str	r2, [r3, #0]
   80356:	f001 fa15 	bl	81784 <UDD_FifoByteCount>
   8035a:	42a0      	cmp	r0, r4
   8035c:	bf38      	it	cc
   8035e:	4604      	movcc	r4, r0
	return UDD_FifoByteCount(ep & 0xF);
}

//	Non Blocking receive
//	Return number of bytes read
uint32_t USBD_Recv(uint32_t ep, void* d, uint32_t len)
   80360:	eb06 0804 	add.w	r8, r6, r4
	LockEP lock(ep);
	uint32_t n = UDD_FifoByteCount(ep & 0xF);
	len = min(n,len);
	n = len;
	uint8_t* dst = (uint8_t*)d;
	while (n--)
   80364:	e7db      	b.n	8031e <_Z9USBD_RecvmPvm+0x1a>
		*dst++ = UDD_Recv8(ep & 0xF);
	if (len && !UDD_FifoByteCount(ep & 0xF)) // release empty buffer
		UDD_ReleaseRX(ep & 0xF);
   80366:	4628      	mov	r0, r5
   80368:	f001 fa1a 	bl	817a0 <UDD_ReleaseRX>
   8036c:	e7de      	b.n	8032c <_Z9USBD_RecvmPvm+0x28>

	return len;
}
   8036e:	4620      	mov	r0, r4
   80370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80374:	2007006c 	.word	0x2007006c
   80378:	20070048 	.word	0x20070048

0008037c <_Z9USBD_Recvm>:

//	Recv 1 byte if ready
uint32_t USBD_Recv(uint32_t ep)
{
   8037c:	b507      	push	{r0, r1, r2, lr}
	uint8_t c;
	if (USBD_Recv(ep & 0xF, &c, 1) != 1)
   8037e:	2201      	movs	r2, #1
   80380:	f10d 0107 	add.w	r1, sp, #7
   80384:	f000 000f 	and.w	r0, r0, #15
   80388:	f7ff ffbc 	bl	80304 <_Z9USBD_RecvmPvm>
   8038c:	2801      	cmp	r0, #1
		return -1;
	else
		return c;
   8038e:	bf0c      	ite	eq
   80390:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
//	Recv 1 byte if ready
uint32_t USBD_Recv(uint32_t ep)
{
	uint8_t c;
	if (USBD_Recv(ep & 0xF, &c, 1) != 1)
		return -1;
   80394:	f04f 30ff 	movne.w	r0, #4294967295
	else
		return c;
}
   80398:	bd0e      	pop	{r1, r2, r3, pc}
	...

0008039c <_Z9USBD_SendmPKvm>:
    //else return 512 - UDD_FifoByteCount(ep & 0xF);  // EPX_SIZE  jcb
//}

//	Blocking Send of data to an endpoint
uint32_t USBD_Send(uint32_t ep, const void* d, uint32_t len)
{
   8039c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;

    if (!_usbConfiguration)
   803a0:	4b10      	ldr	r3, [pc, #64]	; (803e4 <_Z9USBD_SendmPKvm+0x48>)
    //else return 512 - UDD_FifoByteCount(ep & 0xF);  // EPX_SIZE  jcb
//}

//	Blocking Send of data to an endpoint
uint32_t USBD_Send(uint32_t ep, const void* d, uint32_t len)
{
   803a2:	4680      	mov	r8, r0
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;

    if (!_usbConfiguration)
   803a4:	681b      	ldr	r3, [r3, #0]
    //else return 512 - UDD_FifoByteCount(ep & 0xF);  // EPX_SIZE  jcb
//}

//	Blocking Send of data to an endpoint
uint32_t USBD_Send(uint32_t ep, const void* d, uint32_t len)
{
   803a6:	4615      	mov	r5, r2
    uint32_t n;
	int r = len;
	const uint8_t* data = (const uint8_t*)d;

    if (!_usbConfiguration)
   803a8:	b1bb      	cbz	r3, 803da <_Z9USBD_SendmPKvm+0x3e>
   803aa:	460e      	mov	r6, r1
   803ac:	4614      	mov	r4, r2
        else n =  EPX_SIZE;
		if (n > len)
			n = len;
		len -= n;

		UDD_Send(ep & 0xF, data, n);
   803ae:	f000 090f 	and.w	r9, r0, #15
   803b2:	e00f      	b.n	803d4 <_Z9USBD_SendmPKvm+0x38>
		return -1;
    }

	while (len)
	{
        if(ep==0) n = EP0_SIZE;
   803b4:	f1b8 0f00 	cmp.w	r8, #0
   803b8:	bf14      	ite	ne
   803ba:	f44f 7700 	movne.w	r7, #512	; 0x200
   803be:	2740      	moveq	r7, #64	; 0x40
   803c0:	42a7      	cmp	r7, r4
   803c2:	bf28      	it	cs
   803c4:	4627      	movcs	r7, r4
        else n =  EPX_SIZE;
		if (n > len)
			n = len;
		len -= n;

		UDD_Send(ep & 0xF, data, n);
   803c6:	4631      	mov	r1, r6
   803c8:	4648      	mov	r0, r9
   803ca:	463a      	mov	r2, r7
   803cc:	f001 f946 	bl	8165c <UDD_Send>
	{
        if(ep==0) n = EP0_SIZE;
        else n =  EPX_SIZE;
		if (n > len)
			n = len;
		len -= n;
   803d0:	1be4      	subs	r4, r4, r7

		UDD_Send(ep & 0xF, data, n);
		data += n;
   803d2:	19f6      	adds	r6, r6, r7
    {
    	TRACE_CORE(printf("pb conf\n\r");)
		return -1;
    }

	while (len)
   803d4:	2c00      	cmp	r4, #0
   803d6:	d1ed      	bne.n	803b4 <_Z9USBD_SendmPKvm+0x18>
   803d8:	e001      	b.n	803de <_Z9USBD_SendmPKvm+0x42>
	const uint8_t* data = (const uint8_t*)d;

    if (!_usbConfiguration)
    {
    	TRACE_CORE(printf("pb conf\n\r");)
		return -1;
   803da:	f04f 35ff 	mov.w	r5, #4294967295
		data += n;
    }
	//TXLED1;					// light the TX LED
	//TxLEDPulse = TX_RX_LED_PULSE_MS;
	return r;
}
   803de:	4628      	mov	r0, r5
   803e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   803e4:	2007006c 	.word	0x2007006c

000803e8 <_Z16USBD_SendControlhPKvm>:
	_cend = end;
}

//	Clipped by _cmark/_cend
int USBD_SendControl(uint8_t flags, const void* d, uint32_t len)
{
   803e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t sent = 0;
	uint32_t pos = 0;

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
   803ea:	4b0d      	ldr	r3, [pc, #52]	; (80420 <_Z16USBD_SendControlhPKvm+0x38>)
	_cend = end;
}

//	Clipped by _cmark/_cend
int USBD_SendControl(uint8_t flags, const void* d, uint32_t len)
{
   803ec:	4615      	mov	r5, r2
	uint32_t sent = 0;
	uint32_t pos = 0;

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
   803ee:	681a      	ldr	r2, [r3, #0]
   803f0:	4b0c      	ldr	r3, [pc, #48]	; (80424 <_Z16USBD_SendControlhPKvm+0x3c>)
	_cend = end;
}

//	Clipped by _cmark/_cend
int USBD_SendControl(uint8_t flags, const void* d, uint32_t len)
{
   803f2:	460f      	mov	r7, r1
	uint32_t sent = 0;
	uint32_t pos = 0;

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
   803f4:	681b      	ldr	r3, [r3, #0]
   803f6:	429a      	cmp	r2, r3
   803f8:	db08      	blt.n	8040c <_Z16USBD_SendControlhPKvm+0x24>
   803fa:	e00b      	b.n	80414 <_Z16USBD_SendControlhPKvm+0x2c>
	{
		while (len > 0)
		{
			sent = UDD_Send(EP0, data + pos, len);
   803fc:	19b9      	adds	r1, r7, r6
   803fe:	4622      	mov	r2, r4
   80400:	2000      	movs	r0, #0
   80402:	f001 f92b 	bl	8165c <UDD_Send>
			TRACE_CORE(printf("=> USBD_SendControl sent=%lu\r\n", sent);)
			pos += sent;
   80406:	1836      	adds	r6, r6, r0
			len -= sent;
   80408:	1a24      	subs	r4, r4, r0
   8040a:	e001      	b.n	80410 <_Z16USBD_SendControlhPKvm+0x28>
	uint32_t sent = 0;
	uint32_t pos = 0;

	TRACE_CORE(printf("=> USBD_SendControl TOTAL len=%lu\r\n", len);)

	if (_cmark < _cend)
   8040c:	462c      	mov	r4, r5
   8040e:	2600      	movs	r6, #0
	{
		while (len > 0)
   80410:	2c00      	cmp	r4, #0
   80412:	d1f3      	bne.n	803fc <_Z16USBD_SendControlhPKvm+0x14>
			pos += sent;
			len -= sent;
		}
	}

	_cmark += length;
   80414:	4b02      	ldr	r3, [pc, #8]	; (80420 <_Z16USBD_SendControlhPKvm+0x38>)

	return length;
}
   80416:	4628      	mov	r0, r5
			pos += sent;
			len -= sent;
		}
	}

	_cmark += length;
   80418:	681a      	ldr	r2, [r3, #0]
   8041a:	18aa      	adds	r2, r5, r2
   8041c:	601a      	str	r2, [r3, #0]

	return length;
}
   8041e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80420:	20070050 	.word	0x20070050
   80424:	20070054 	.word	0x20070054

00080428 <_ZL24USB_SendStringDescriptorPKhi>:

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
static bool USB_SendStringDescriptor(const uint8_t *string, int wLength) {
   80428:	b510      	push	{r4, lr}
	uint16_t buff[64];
	int l = 1;
   8042a:	2201      	movs	r2, #1
}

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
static bool USB_SendStringDescriptor(const uint8_t *string, int wLength) {
   8042c:	b0a0      	sub	sp, #128	; 0x80
   8042e:	1883      	adds	r3, r0, r2
	uint16_t buff[64];
	int l = 1;
	wLength-=2;
	while (*string && wLength>0) {
   80430:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   80434:	b963      	cbnz	r3, 80450 <_ZL24USB_SendStringDescriptorPKhi+0x28>
		buff[l++] = (uint8_t)(*string++);
		wLength-=2;
	}
	buff[0] = (3<<8) | (l*2);
   80436:	0052      	lsls	r2, r2, #1
   80438:	f442 7340 	orr.w	r3, r2, #768	; 0x300
	return USBD_SendControl(0, (uint8_t*)buff, l*2);
   8043c:	2000      	movs	r0, #0
   8043e:	4669      	mov	r1, sp
	wLength-=2;
	while (*string && wLength>0) {
		buff[l++] = (uint8_t)(*string++);
		wLength-=2;
	}
	buff[0] = (3<<8) | (l*2);
   80440:	f8ad 3000 	strh.w	r3, [sp]
	return USBD_SendControl(0, (uint8_t*)buff, l*2);
   80444:	f7ff ffd0 	bl	803e8 <_Z16USBD_SendControlhPKvm>
   80448:	3000      	adds	r0, #0
   8044a:	bf18      	it	ne
   8044c:	2001      	movne	r0, #1
   8044e:	e007      	b.n	80460 <_ZL24USB_SendStringDescriptorPKhi+0x38>
}

// Send a USB descriptor string. The string is stored as a
// plain ASCII string but is sent out as UTF-16 with the
// correct 2-byte prefix
static bool USB_SendStringDescriptor(const uint8_t *string, int wLength) {
   80450:	0054      	lsls	r4, r2, #1
   80452:	1b0c      	subs	r4, r1, r4
	uint16_t buff[64];
	int l = 1;
	wLength-=2;
	while (*string && wLength>0) {
   80454:	2c00      	cmp	r4, #0
   80456:	ddee      	ble.n	80436 <_ZL24USB_SendStringDescriptorPKhi+0xe>
		buff[l++] = (uint8_t)(*string++);
   80458:	f82d 3012 	strh.w	r3, [sp, r2, lsl #1]
   8045c:	3201      	adds	r2, #1
   8045e:	e7e6      	b.n	8042e <_ZL24USB_SendStringDescriptorPKhi+0x6>
		wLength-=2;
	}
	buff[0] = (3<<8) | (l*2);
	return USBD_SendControl(0, (uint8_t*)buff, l*2);
}
   80460:	b020      	add	sp, #128	; 0x80
   80462:	bd10      	pop	{r4, pc}

00080464 <_Z16USBD_RecvControlPvm>:

//	Does not timeout or cross fifo boundaries
//	Will only work for transfers <= 64 bytes
//	TODO
int USBD_RecvControl(void* d, uint32_t len)
{
   80464:	b538      	push	{r3, r4, r5, lr}
   80466:	460c      	mov	r4, r1
   80468:	4605      	mov	r5, r0
	UDD_WaitOUT();
   8046a:	f001 f8c5 	bl	815f8 <UDD_WaitOUT>
	UDD_Recv(EP0, (uint8_t*)d, len);
   8046e:	2000      	movs	r0, #0
   80470:	4629      	mov	r1, r5
   80472:	4622      	mov	r2, r4
   80474:	f001 f962 	bl	8173c <UDD_Recv>
	UDD_ClearOUT();
   80478:	f001 f8d4 	bl	81624 <UDD_ClearOUT>

	return len;
}
   8047c:	4620      	mov	r0, r4
   8047e:	bd38      	pop	{r3, r4, r5, pc}

00080480 <_Z26USBD_ClassInterfaceRequestR5Setup>:

//	Handle CLASS_INTERFACE requests
bool USBD_ClassInterfaceRequest(Setup& setup)
{
	uint8_t i = setup.wIndex;
   80480:	7903      	ldrb	r3, [r0, #4]

	TRACE_CORE(printf("=> USBD_ClassInterfaceRequest\r\n");)

#ifdef CDC_ENABLED
	if (CDC_ACM_INTERFACE == i)
   80482:	b90b      	cbnz	r3, 80488 <_Z26USBD_ClassInterfaceRequestR5Setup+0x8>
	{
		return CDC_Setup(setup);
   80484:	f000 bdd4 	b.w	81030 <_Z9CDC_SetupR5Setup>
	}
#endif

#ifdef HID_ENABLED
	if (HID_INTERFACE == i)
   80488:	2b02      	cmp	r3, #2
   8048a:	d101      	bne.n	80490 <_Z26USBD_ClassInterfaceRequestR5Setup+0x10>
	{
		return HID_Setup(setup);
   8048c:	f000 baac 	b.w	809e8 <_Z9HID_SetupR5Setup>
	}
#endif

	return false;
}
   80490:	2000      	movs	r0, #0
   80492:	4770      	bx	lr

00080494 <_Z19USBD_SendInterfacesv>:

int USBD_SendInterfaces(void)
{
   80494:	b513      	push	{r0, r1, r4, lr}
	int total = 0;
	uint8_t interfaces = 0;
   80496:	2300      	movs	r3, #0
   80498:	ac02      	add	r4, sp, #8
   8049a:	f804 3d01 	strb.w	r3, [r4, #-1]!

#ifdef CDC_ENABLED
	total = CDC_GetInterface(&interfaces);
   8049e:	4620      	mov	r0, r4
   804a0:	f000 fdb2 	bl	81008 <_Z16CDC_GetInterfacePh>
#endif

#ifdef HID_ENABLED
	total += HID_GetInterface(&interfaces);
   804a4:	4620      	mov	r0, r4
   804a6:	f000 fa77 	bl	80998 <_Z16HID_GetInterfacePh>
#endif

	total = total; // Get rid of compiler warning
	TRACE_CORE(printf("=> USBD_SendInterfaces, total=%d interfaces=%d\r\n", total, interfaces);)
	return interfaces;
}
   804aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   804ae:	bd1c      	pop	{r2, r3, r4, pc}

000804b0 <_Z24USBD_SendOtherInterfacesv>:

int USBD_SendOtherInterfaces(void)
{
   804b0:	b513      	push	{r0, r1, r4, lr}
	int total = 0;
	uint8_t interfaces = 0;
   804b2:	2300      	movs	r3, #0
   804b4:	ac02      	add	r4, sp, #8
   804b6:	f804 3d01 	strb.w	r3, [r4, #-1]!

#ifdef CDC_ENABLED
	total = CDC_GetOtherInterface(&interfaces);
   804ba:	4620      	mov	r0, r4
   804bc:	f000 fdae 	bl	8101c <_Z21CDC_GetOtherInterfacePh>
#endif

#ifdef HID_ENABLED
	total += HID_GetInterface(&interfaces);
   804c0:	4620      	mov	r0, r4
   804c2:	f000 fa69 	bl	80998 <_Z16HID_GetInterfacePh>
#endif

	total = total; // Get rid of compiler warning
	TRACE_CORE(printf("=> USBD_SendInterfaces, total=%d interfaces=%d\r\n", total, interfaces);)
	return interfaces;
}
   804c6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   804ca:	bd1c      	pop	{r2, r3, r4, pc}

000804cc <_ZL7USB_ISRv>:


//unsigned int iii=0;
//	Endpoint 0 interrupt
static void USB_ISR(void)
{
   804cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
//    printf("ISR=0x%X\n\r", UOTGHS->UOTGHS_DEVISR); // jcb
//    if( iii++ > 1500 ) while(1); // jcb
    // End of bus reset
    if (Is_udd_reset())
   804d0:	4cac      	ldr	r4, [pc, #688]	; (80784 <_ZL7USB_ISRv+0x2b8>)


//unsigned int iii=0;
//	Endpoint 0 interrupt
static void USB_ISR(void)
{
   804d2:	b086      	sub	sp, #24
//    printf("ISR=0x%X\n\r", UOTGHS->UOTGHS_DEVISR); // jcb
//    if( iii++ > 1500 ) while(1); // jcb
    // End of bus reset
    if (Is_udd_reset())
   804d4:	6863      	ldr	r3, [r4, #4]
   804d6:	0718      	lsls	r0, r3, #28
   804d8:	d517      	bpl.n	8050a <_ZL7USB_ISRv+0x3e>
    {
		TRACE_CORE(printf(">>> End of Reset\r\n");)

		// Reset USB address to 0
		udd_configure_address(0);
   804da:	6823      	ldr	r3, [r4, #0]
		udd_enable_address();

		// Configure EP 0
        UDD_InitEP(0, EP_TYPE_CONTROL);
   804dc:	2000      	movs	r0, #0
    if (Is_udd_reset())
    {
		TRACE_CORE(printf(">>> End of Reset\r\n");)

		// Reset USB address to 0
		udd_configure_address(0);
   804de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   804e2:	6023      	str	r3, [r4, #0]
		udd_enable_address();
   804e4:	6823      	ldr	r3, [r4, #0]

		// Configure EP 0
        UDD_InitEP(0, EP_TYPE_CONTROL);
   804e6:	f242 0132 	movw	r1, #8242	; 0x2032
    {
		TRACE_CORE(printf(">>> End of Reset\r\n");)

		// Reset USB address to 0
		udd_configure_address(0);
		udd_enable_address();
   804ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   804ee:	6023      	str	r3, [r4, #0]

		// Configure EP 0
        UDD_InitEP(0, EP_TYPE_CONTROL);
   804f0:	f001 f842 	bl	81578 <UDD_InitEP>
		udd_enable_setup_received_interrupt(0);
   804f4:	4ba4      	ldr	r3, [pc, #656]	; (80788 <_ZL7USB_ISRv+0x2bc>)
   804f6:	2204      	movs	r2, #4
   804f8:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_interrupt(0);
   804fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   804fe:	61a3      	str	r3, [r4, #24]

        _usbConfiguration = 0;
   80500:	4ba2      	ldr	r3, [pc, #648]	; (8078c <_ZL7USB_ISRv+0x2c0>)
   80502:	2200      	movs	r2, #0
   80504:	601a      	str	r2, [r3, #0]
		udd_ack_reset();
   80506:	2308      	movs	r3, #8
   80508:	60a3      	str	r3, [r4, #8]
    }

#ifdef CDC_ENABLED
  	if (Is_udd_endpoint_interrupt(CDC_RX))
   8050a:	4b9e      	ldr	r3, [pc, #632]	; (80784 <_ZL7USB_ISRv+0x2b8>)
   8050c:	685b      	ldr	r3, [r3, #4]
   8050e:	0459      	lsls	r1, r3, #17
   80510:	d508      	bpl.n	80524 <_ZL7USB_ISRv+0x58>
	{
		udd_ack_out_received(CDC_RX);
   80512:	4b9f      	ldr	r3, [pc, #636]	; (80790 <_ZL7USB_ISRv+0x2c4>)
   80514:	2002      	movs	r0, #2
   80516:	6018      	str	r0, [r3, #0]

		// Handle received bytes
		if (USBD_Available(CDC_RX))
   80518:	f7ff fede 	bl	802d8 <_Z14USBD_Availablem>
   8051c:	b110      	cbz	r0, 80524 <_ZL7USB_ISRv+0x58>
			SerialUSB.accept();
   8051e:	489d      	ldr	r0, [pc, #628]	; (80794 <_ZL7USB_ISRv+0x2c8>)
   80520:	f000 fd2a 	bl	80f78 <_ZN7Serial_6acceptEv>
	}

	if (Is_udd_sof())
   80524:	4b97      	ldr	r3, [pc, #604]	; (80784 <_ZL7USB_ISRv+0x2b8>)
   80526:	685a      	ldr	r2, [r3, #4]
   80528:	0752      	lsls	r2, r2, #29
   8052a:	d501      	bpl.n	80530 <_ZL7USB_ISRv+0x64>
	{
		udd_ack_sof();
   8052c:	2204      	movs	r2, #4
   8052e:	609a      	str	r2, [r3, #8]
	//	USBD_Flush(CDC_TX); // jcb
	}
#endif

	// EP 0 Interrupt
	if (Is_udd_endpoint_interrupt(0) )
   80530:	685b      	ldr	r3, [r3, #4]
   80532:	04d8      	lsls	r0, r3, #19
   80534:	f140 81d8 	bpl.w	808e8 <_ZL7USB_ISRv+0x41c>
	{
		if (!UDD_ReceivedSetupInt())
   80538:	f001 f880 	bl	8163c <UDD_ReceivedSetupInt>
   8053c:	2800      	cmp	r0, #0
   8053e:	f000 81d3 	beq.w	808e8 <_ZL7USB_ISRv+0x41c>
		{
			return;
		}

		Setup setup;
		UDD_Recv(EP0, (uint8_t*)&setup, 8);
   80542:	2000      	movs	r0, #0
   80544:	a901      	add	r1, sp, #4
   80546:	2208      	movs	r2, #8
   80548:	f001 f8f8 	bl	8173c <UDD_Recv>
		UDD_ClearSetupInt();
   8054c:	f001 f87e 	bl	8164c <UDD_ClearSetupInt>

		uint8_t requestType = setup.bmRequestType;
   80550:	f89d 4004 	ldrb.w	r4, [sp, #4]
		if (requestType & REQUEST_DEVICETOHOST)
   80554:	0621      	lsls	r1, r4, #24
   80556:	d502      	bpl.n	8055e <_ZL7USB_ISRv+0x92>
		{
			TRACE_CORE(puts(">>> EP0 Int: IN Request\r\n");)
			UDD_WaitIN();
   80558:	f001 f844 	bl	815e4 <UDD_WaitIN>
   8055c:	e001      	b.n	80562 <_ZL7USB_ISRv+0x96>
		}
		else
		{
			TRACE_CORE(puts(">>> EP0 Int: OUT Request\r\n");)
			UDD_ClearIN();
   8055e:	f001 f855 	bl	8160c <UDD_ClearIN>
		}

		bool ok = true;
		if (REQUEST_STANDARD == (requestType & REQUEST_TYPE))
   80562:	f004 0260 	and.w	r2, r4, #96	; 0x60
   80566:	4615      	mov	r5, r2
   80568:	2a00      	cmp	r2, #0
   8056a:	f040 81a5 	bne.w	808b8 <_ZL7USB_ISRv+0x3ec>
		{
			// Standard Requests
			uint8_t r = setup.bRequest;
   8056e:	f89d 3005 	ldrb.w	r3, [sp, #5]
			if (GET_STATUS == r)
   80572:	b9ab      	cbnz	r3, 805a0 <_ZL7USB_ISRv+0xd4>
			{
                if( setup.bmRequestType == 0 )  // device
   80574:	f89d 4004 	ldrb.w	r4, [sp, #4]
   80578:	b92c      	cbnz	r4, 80586 <_ZL7USB_ISRv+0xba>
     				TRACE_CORE(puts(">>> EP0 Int: GET_STATUS\r\n");)
                    // Check current configuration for power mode (if device is configured)
                    // TODO
                    // Check if remote wake-up is enabled
                    // TODO
                    UDD_Send8(EP0, 0); // TODO
   8057a:	4620      	mov	r0, r4
   8057c:	4621      	mov	r1, r4
   8057e:	f001 f8b5 	bl	816ec <UDD_Send8>
	    			UDD_Send8(EP0, 0);
   80582:	4620      	mov	r0, r4
   80584:	e00a      	b.n	8059c <_ZL7USB_ISRv+0xd0>
                // if( setup.bmRequestType == 2 ) // Endpoint:
                else
                {
                    // Send the endpoint status
                    // Check if the endpoint if currently halted
                    if( isEndpointHalt == 1 )
   80586:	4b84      	ldr	r3, [pc, #528]	; (80798 <_ZL7USB_ISRv+0x2cc>)
   80588:	781b      	ldrb	r3, [r3, #0]
    				UDD_Send8(EP0, 1); // TODO
   8058a:	2000      	movs	r0, #0
                // if( setup.bmRequestType == 2 ) // Endpoint:
                else
                {
                    // Send the endpoint status
                    // Check if the endpoint if currently halted
                    if( isEndpointHalt == 1 )
   8058c:	2b01      	cmp	r3, #1
   8058e:	d101      	bne.n	80594 <_ZL7USB_ISRv+0xc8>
    				UDD_Send8(EP0, 1); // TODO
   80590:	2101      	movs	r1, #1
   80592:	e000      	b.n	80596 <_ZL7USB_ISRv+0xca>
                    else
    				UDD_Send8(EP0, 0); // TODO
   80594:	4601      	mov	r1, r0
   80596:	f001 f8a9 	bl	816ec <UDD_Send8>
	    			UDD_Send8(EP0, 0);
   8059a:	2000      	movs	r0, #0
   8059c:	4601      	mov	r1, r0
   8059e:	e181      	b.n	808a4 <_ZL7USB_ISRv+0x3d8>
                }
			}
			else if (CLEAR_FEATURE == r)
   805a0:	2b01      	cmp	r3, #1
   805a2:	d10d      	bne.n	805c0 <_ZL7USB_ISRv+0xf4>
			{
               // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
   805a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   805a8:	2b01      	cmp	r3, #1
   805aa:	d101      	bne.n	805b0 <_ZL7USB_ISRv+0xe4>
                {
                    // Enable remote wake-up and send a ZLP
                    if( isRemoteWakeUpEnabled == 1 )
   805ac:	4b7b      	ldr	r3, [pc, #492]	; (8079c <_ZL7USB_ISRv+0x2d0>)
   805ae:	e7eb      	b.n	80588 <_ZL7USB_ISRv+0xbc>
	    			UDD_Send8(EP0, 0);
                    UDD_Send8(EP0, 0);
                }
                else // if( setup.wValueL == 0) // ENDPOINTHALT
                {
                    isEndpointHalt = 0;  // TODO
   805b0:	4b79      	ldr	r3, [pc, #484]	; (80798 <_ZL7USB_ISRv+0x2cc>)
    				UDD_Send8(EP0, 0);
   805b2:	4610      	mov	r0, r2
   805b4:	4611      	mov	r1, r2
	    			UDD_Send8(EP0, 0);
                    UDD_Send8(EP0, 0);
                }
                else // if( setup.wValueL == 0) // ENDPOINTHALT
                {
                    isEndpointHalt = 0;  // TODO
   805b6:	701a      	strb	r2, [r3, #0]
    				UDD_Send8(EP0, 0);
   805b8:	f001 f898 	bl	816ec <UDD_Send8>
	    			UDD_Send8(EP0, 0);
   805bc:	4628      	mov	r0, r5
   805be:	e7ed      	b.n	8059c <_ZL7USB_ISRv+0xd0>
                }

 			}
			else if (SET_FEATURE == r)
   805c0:	2b03      	cmp	r3, #3
   805c2:	d179      	bne.n	806b8 <_ZL7USB_ISRv+0x1ec>
			{
                // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
   805c4:	f89d 3006 	ldrb.w	r3, [sp, #6]
   805c8:	2b01      	cmp	r3, #1
   805ca:	d105      	bne.n	805d8 <_ZL7USB_ISRv+0x10c>
                {
                    // Enable remote wake-up and send a ZLP
                    isRemoteWakeUpEnabled = 1;
   805cc:	4a73      	ldr	r2, [pc, #460]	; (8079c <_ZL7USB_ISRv+0x2d0>)
	    			UDD_Send8(EP0, 0);
   805ce:	4628      	mov	r0, r5
   805d0:	4629      	mov	r1, r5
			{
                // Check which is the selected feature
                if( setup.wValueL == 1) // DEVICEREMOTEWAKEUP
                {
                    // Enable remote wake-up and send a ZLP
                    isRemoteWakeUpEnabled = 1;
   805d2:	7013      	strb	r3, [r2, #0]
	    			UDD_Send8(EP0, 0);
   805d4:	f001 f88a 	bl	816ec <UDD_Send8>
                }
                if( setup.wValueL == 0) // ENDPOINTHALT
   805d8:	f89d 0006 	ldrb.w	r0, [sp, #6]
   805dc:	b928      	cbnz	r0, 805ea <_ZL7USB_ISRv+0x11e>
                {
                    // Halt endpoint
                    isEndpointHalt = 1;
   805de:	4b6e      	ldr	r3, [pc, #440]	; (80798 <_ZL7USB_ISRv+0x2cc>)
   805e0:	2201      	movs	r2, #1
                    //USBD_Halt(USBGenericRequest_GetEndpointNumber(pRequest));
	    			UDD_Send8(EP0, 0);
   805e2:	4601      	mov	r1, r0
	    			UDD_Send8(EP0, 0);
                }
                if( setup.wValueL == 0) // ENDPOINTHALT
                {
                    // Halt endpoint
                    isEndpointHalt = 1;
   805e4:	701a      	strb	r2, [r3, #0]
                    //USBD_Halt(USBGenericRequest_GetEndpointNumber(pRequest));
	    			UDD_Send8(EP0, 0);
   805e6:	f001 f881 	bl	816ec <UDD_Send8>
                }
                if( setup.wValueL == 2) // TEST_MODE
   805ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
   805ee:	2b02      	cmp	r3, #2
   805f0:	f040 816f 	bne.w	808d2 <_ZL7USB_ISRv+0x406>
                {
                    // 7.1.20 Test Mode Support, 9.4.9 SetFeature
                    if( (setup.bmRequestType == 0 /*USBGenericRequest_DEVICE*/) &&
   805f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
   805f8:	2b00      	cmp	r3, #0
   805fa:	f040 816a 	bne.w	808d2 <_ZL7USB_ISRv+0x406>
   805fe:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   80602:	071a      	lsls	r2, r3, #28
   80604:	f040 8165 	bne.w	808d2 <_ZL7USB_ISRv+0x406>
                        ((setup.wIndex & 0x000F) == 0) )
                    {
                        // the lower byte of wIndex must be zero
                        // the most significant byte of wIndex is used to specify the specific test mode

                        UOTGHS->UOTGHS_DEVIDR &= ~UOTGHS_DEVIDR_SUSPEC;
   80608:	4c5e      	ldr	r4, [pc, #376]	; (80784 <_ZL7USB_ISRv+0x2b8>)
static void Test_Mode_Support( uint8_t wIndex )
{
    uint8_t i;
	uint8_t *ptr_dest = (uint8_t *) &udd_get_endpoint_fifo_access8(2);

	switch( wIndex )
   8060a:	0a1b      	lsrs	r3, r3, #8
                        ((setup.wIndex & 0x000F) == 0) )
                    {
                        // the lower byte of wIndex must be zero
                        // the most significant byte of wIndex is used to specify the specific test mode

                        UOTGHS->UOTGHS_DEVIDR &= ~UOTGHS_DEVIDR_SUSPEC;
   8060c:	6962      	ldr	r2, [r4, #20]
static void Test_Mode_Support( uint8_t wIndex )
{
    uint8_t i;
	uint8_t *ptr_dest = (uint8_t *) &udd_get_endpoint_fifo_access8(2);

	switch( wIndex )
   8060e:	3b01      	subs	r3, #1
                        ((setup.wIndex & 0x000F) == 0) )
                    {
                        // the lower byte of wIndex must be zero
                        // the most significant byte of wIndex is used to specify the specific test mode

                        UOTGHS->UOTGHS_DEVIDR &= ~UOTGHS_DEVIDR_SUSPEC;
   80610:	f022 0201 	bic.w	r2, r2, #1
   80614:	6162      	str	r2, [r4, #20]
                        UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_SPDCONF_HIGH_SPEED; // remove suspend ?
   80616:	6822      	ldr	r2, [r4, #0]
   80618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8061c:	6022      	str	r2, [r4, #0]
static void Test_Mode_Support( uint8_t wIndex )
{
    uint8_t i;
	uint8_t *ptr_dest = (uint8_t *) &udd_get_endpoint_fifo_access8(2);

	switch( wIndex )
   8061e:	2b03      	cmp	r3, #3
   80620:	f200 8157 	bhi.w	808d2 <_ZL7USB_ISRv+0x406>
   80624:	e8df f003 	tbb	[pc, r3]
   80628:	02433c35 	.word	0x02433c35
			//A port in Test_Packet mode must send this packet repetitively. The inter-packet timing
			//must be no less than the minimum allowable inter-packet gap as defined in Section 7.1.18 and
			//no greater than 125 us.

			// Send ZLP
			USB_SendZlp();
   8062c:	f7ff fe44 	bl	802b8 <_ZL11USB_SendZlpv>

			UOTGHS->UOTGHS_DEVDMA[0].UOTGHS_DEVDMACONTROL = 0; // raz
   80630:	2300      	movs	r3, #0
   80632:	f8c4 3318 	str.w	r3, [r4, #792]	; 0x318
			UOTGHS->UOTGHS_DEVDMA[1].UOTGHS_DEVDMACONTROL = 0; // raz
   80636:	f8c4 3328 	str.w	r3, [r4, #808]	; 0x328

			// Configure endpoint 2, 64 bytes, direction IN, type BULK, 1 bank
			UOTGHS->UOTGHS_DEVEPTCFG[2] = UOTGHS_DEVEPTCFG_EPSIZE_64_BYTE
												 | UOTGHS_DEVEPTCFG_EPDIR_IN
												 | UOTGHS_DEVEPTCFG_EPTYPE_BLK
												 | UOTGHS_DEVEPTCFG_EPBK_1_BANK;
   8063a:	f241 1330 	movw	r3, #4400	; 0x1130
   8063e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			// Check if the configuration is ok
			UOTGHS->UOTGHS_DEVEPTCFG[2] |= UOTGHS_DEVEPTCFG_ALLOC;
   80642:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
			while((UOTGHS->UOTGHS_DEVEPTISR[2]&UOTGHS_DEVEPTISR_CFGOK)==0) {}
   80646:	494f      	ldr	r1, [pc, #316]	; (80784 <_ZL7USB_ISRv+0x2b8>)
			UOTGHS->UOTGHS_DEVEPTCFG[2] = UOTGHS_DEVEPTCFG_EPSIZE_64_BYTE
												 | UOTGHS_DEVEPTCFG_EPDIR_IN
												 | UOTGHS_DEVEPTCFG_EPTYPE_BLK
												 | UOTGHS_DEVEPTCFG_EPBK_1_BANK;
			// Check if the configuration is ok
			UOTGHS->UOTGHS_DEVEPTCFG[2] |= UOTGHS_DEVEPTCFG_ALLOC;
   80648:	f043 0302 	orr.w	r3, r3, #2
   8064c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
			while((UOTGHS->UOTGHS_DEVEPTISR[2]&UOTGHS_DEVEPTISR_CFGOK)==0) {}
   80650:	f8d1 2138 	ldr.w	r2, [r1, #312]	; 0x138
   80654:	4b4b      	ldr	r3, [pc, #300]	; (80784 <_ZL7USB_ISRv+0x2b8>)
   80656:	0354      	lsls	r4, r2, #13
   80658:	d5fa      	bpl.n	80650 <_ZL7USB_ISRv+0x184>
			UOTGHS->UOTGHS_DEVEPT |= UOTGHS_DEVEPT_EPEN2;
   8065a:	69da      	ldr	r2, [r3, #28]
}


//unsigned int iii=0;
//	Endpoint 0 interrupt
static void USB_ISR(void)
   8065c:	4c50      	ldr	r4, [pc, #320]	; (807a0 <_ZL7USB_ISRv+0x2d4>)
												 | UOTGHS_DEVEPTCFG_EPTYPE_BLK
												 | UOTGHS_DEVEPTCFG_EPBK_1_BANK;
			// Check if the configuration is ok
			UOTGHS->UOTGHS_DEVEPTCFG[2] |= UOTGHS_DEVEPTCFG_ALLOC;
			while((UOTGHS->UOTGHS_DEVEPTISR[2]&UOTGHS_DEVEPTISR_CFGOK)==0) {}
			UOTGHS->UOTGHS_DEVEPT |= UOTGHS_DEVEPT_EPEN2;
   8065e:	f042 0204 	orr.w	r2, r2, #4
   80662:	61da      	str	r2, [r3, #28]
			// Write FIFO
			for( i=0; i<sizeof(test_packet_buffer); i++)
   80664:	494f      	ldr	r1, [pc, #316]	; (807a4 <_ZL7USB_ISRv+0x2d8>)
												 | UOTGHS_DEVEPTCFG_EPTYPE_BLK
												 | UOTGHS_DEVEPTCFG_EPBK_1_BANK;
			// Check if the configuration is ok
			UOTGHS->UOTGHS_DEVEPTCFG[2] |= UOTGHS_DEVEPTCFG_ALLOC;
			while((UOTGHS->UOTGHS_DEVEPTISR[2]&UOTGHS_DEVEPTISR_CFGOK)==0) {}
			UOTGHS->UOTGHS_DEVEPT |= UOTGHS_DEVEPT_EPEN2;
   80666:	4b50      	ldr	r3, [pc, #320]	; (807a8 <_ZL7USB_ISRv+0x2dc>)
}


//unsigned int iii=0;
//	Endpoint 0 interrupt
static void USB_ISR(void)
   80668:	4a50      	ldr	r2, [pc, #320]	; (807ac <_ZL7USB_ISRv+0x2e0>)
   8066a:	18e0      	adds	r0, r4, r3
   8066c:	1882      	adds	r2, r0, r2
			while((UOTGHS->UOTGHS_DEVEPTISR[2]&UOTGHS_DEVEPTISR_CFGOK)==0) {}
			UOTGHS->UOTGHS_DEVEPT |= UOTGHS_DEVEPT_EPEN2;
			// Write FIFO
			for( i=0; i<sizeof(test_packet_buffer); i++)
			{
				ptr_dest[i] = test_packet_buffer[i];;
   8066e:	7812      	ldrb	r2, [r2, #0]
   80670:	f803 2f01 	strb.w	r2, [r3, #1]!
			// Check if the configuration is ok
			UOTGHS->UOTGHS_DEVEPTCFG[2] |= UOTGHS_DEVEPTCFG_ALLOC;
			while((UOTGHS->UOTGHS_DEVEPTISR[2]&UOTGHS_DEVEPTISR_CFGOK)==0) {}
			UOTGHS->UOTGHS_DEVEPT |= UOTGHS_DEVEPT_EPEN2;
			// Write FIFO
			for( i=0; i<sizeof(test_packet_buffer); i++)
   80674:	428b      	cmp	r3, r1
   80676:	d1f7      	bne.n	80668 <_ZL7USB_ISRv+0x19c>
			{
				ptr_dest[i] = test_packet_buffer[i];;
			}
			// Tst PACKET
			UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_TSTPCKT;
   80678:	4b42      	ldr	r3, [pc, #264]	; (80784 <_ZL7USB_ISRv+0x2b8>)
   8067a:	681a      	ldr	r2, [r3, #0]
   8067c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   80680:	601a      	str	r2, [r3, #0]
			// Send packet
			UOTGHS->UOTGHS_DEVEPTICR[2] = UOTGHS_DEVEPTICR_TXINIC;
   80682:	2201      	movs	r2, #1
   80684:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
			UOTGHS->UOTGHS_DEVEPTIDR[2] = UOTGHS_DEVEPTIDR_FIFOCONC;
   80688:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8068c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
   80690:	e7fe      	b.n	80690 <_ZL7USB_ISRv+0x1c4>
			//Test mode Test_J:
			//Upon command, a port's transceiver must enter the high-speed J state and remain in that
			//state until the exit action is taken. This enables the testing of the high output drive
			//level on the D+ line.
			// Send a ZLP
			USB_SendZlp();
   80692:	f7ff fe11 	bl	802b8 <_ZL11USB_SendZlpv>
			UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_TSTJ;
   80696:	6823      	ldr	r3, [r4, #0]
   80698:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8069c:	6023      	str	r3, [r4, #0]
   8069e:	e7fe      	b.n	8069e <_ZL7USB_ISRv+0x1d2>
			//Test mode Test_K:
			//Upon command, a port's transceiver must enter the high-speed K state and remain in
			//that state until the exit action is taken. This enables the testing of the high output drive
			//level on the D- line.
			// Send a ZLP
			USB_SendZlp();
   806a0:	f7ff fe0a 	bl	802b8 <_ZL11USB_SendZlpv>
			UOTGHS->UOTGHS_DEVCTRL |= UOTGHS_DEVCTRL_TSTK;
   806a4:	6823      	ldr	r3, [r4, #0]
   806a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   806aa:	6023      	str	r3, [r4, #0]
   806ac:	e7fe      	b.n	806ac <_ZL7USB_ISRv+0x1e0>
			//determined to be correct) within the normal allowed device response time. This enables testing of
			//the device squelch level circuitry and, additionally, provides a general purpose stimulus/response
			//test for basic functional testing.

			// Send a ZLP
			USB_SendZlp();
   806ae:	f7ff fe03 	bl	802b8 <_ZL11USB_SendZlpv>
							   | UOTGHS_DEVIDR_DMA_1
							   | UOTGHS_DEVIDR_DMA_2
							   | UOTGHS_DEVIDR_DMA_3
							   | UOTGHS_DEVIDR_DMA_4
							   | UOTGHS_DEVIDR_DMA_5
							   | UOTGHS_DEVIDR_DMA_6;
   806b2:	4b3f      	ldr	r3, [pc, #252]	; (807b0 <_ZL7USB_ISRv+0x2e4>)
   806b4:	6163      	str	r3, [r4, #20]
   806b6:	e7fe      	b.n	806b6 <_ZL7USB_ISRv+0x1ea>

                        Test_Mode_Support( (setup.wIndex & 0xFF00)>>8 );
                    }
                }
			}
			else if (SET_ADDRESS == r)
   806b8:	2b05      	cmp	r3, #5
   806ba:	d106      	bne.n	806ca <_ZL7USB_ISRv+0x1fe>
			{
				TRACE_CORE(puts(">>> EP0 Int: SET_ADDRESS\r\n");)
				UDD_WaitIN();
   806bc:	f000 ff92 	bl	815e4 <UDD_WaitIN>
				UDD_SetAddress(setup.wValueL);
   806c0:	f89d 0006 	ldrb.w	r0, [sp, #6]
   806c4:	f001 f898 	bl	817f8 <UDD_SetAddress>
   806c8:	e103      	b.n	808d2 <_ZL7USB_ISRv+0x406>
			}
			else if (GET_DESCRIPTOR == r)
   806ca:	2b06      	cmp	r3, #6
   806cc:	f040 80c7 	bne.w	8085e <_ZL7USB_ISRv+0x392>
	return true;
}

static bool USBD_SendDescriptor(Setup& setup)
{
	uint8_t t = setup.wValueH;
   806d0:	f89d 6007 	ldrb.w	r6, [sp, #7]
   806d4:	4f37      	ldr	r7, [pc, #220]	; (807b4 <_ZL7USB_ISRv+0x2e8>)
	uint8_t desc_length = 0;
	const uint8_t* desc_addr = 0;

	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
   806d6:	2e02      	cmp	r6, #2
   806d8:	f8bd 400a 	ldrh.w	r4, [sp, #10]
   806dc:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 807c8 <_ZL7USB_ISRv+0x2fc>
int _cmark;
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
   806e0:	603a      	str	r2, [r7, #0]
{
	uint8_t t = setup.wValueH;
	uint8_t desc_length = 0;
	const uint8_t* desc_addr = 0;

	if (USB_CONFIGURATION_DESCRIPTOR_TYPE == t)
   806e2:	d129      	bne.n	80738 <_ZL7USB_ISRv+0x26c>
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
	_cend = end;
   806e4:	f8c8 2000 	str.w	r2, [r8]
static bool USBD_SendConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendInterfaces();
   806e8:	f7ff fed4 	bl	80494 <_Z19USBD_SendInterfacesv>
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   806ec:	f04f 0909 	mov.w	r9, #9
static bool USBD_SendConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendInterfaces();
   806f0:	4682      	mov	sl, r0
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   806f2:	4629      	mov	r1, r5
   806f4:	464a      	mov	r2, r9
   806f6:	a803      	add	r0, sp, #12
   806f8:	f001 f8be 	bl	81878 <memset>
   806fc:	2301      	movs	r3, #1
   806fe:	f88d 3011 	strb.w	r3, [sp, #17]
   80702:	23c0      	movs	r3, #192	; 0xc0
   80704:	f88d 3013 	strb.w	r3, [sp, #19]
   80708:	23fa      	movs	r3, #250	; 0xfa
   8070a:	f88d 3014 	strb.w	r3, [sp, #20]
   8070e:	683b      	ldr	r3, [r7, #0]

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   80710:	a903      	add	r1, sp, #12
	int interfaces = USBD_SendInterfaces();
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   80712:	444b      	add	r3, r9

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   80714:	464a      	mov	r2, r9
   80716:	4628      	mov	r0, r5
	int interfaces = USBD_SendInterfaces();
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_CONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   80718:	f8ad 300e 	strh.w	r3, [sp, #14]
   8071c:	f88d 900c 	strb.w	r9, [sp, #12]
   80720:	f88d 600d 	strb.w	r6, [sp, #13]
   80724:	f88d a010 	strb.w	sl, [sp, #16]
int _cmark;
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
   80728:	603d      	str	r5, [r7, #0]
	_cend = end;
   8072a:	f8c8 4000 	str.w	r4, [r8]

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   8072e:	f7ff fe5b 	bl	803e8 <_Z16USBD_SendControlhPKvm>
	USBD_SendInterfaces();
   80732:	f7ff feaf 	bl	80494 <_Z19USBD_SendInterfacesv>
   80736:	e0cc      	b.n	808d2 <_ZL7USB_ISRv+0x406>
		return USBD_SendConfiguration(setup.wLength);
	}

	USBD_InitControl(setup.wLength);
#ifdef HID_ENABLED
	if (HID_REPORT_DESCRIPTOR_TYPE == t)
   80738:	2e22      	cmp	r6, #34	; 0x22
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
	_cend = end;
   8073a:	f8c8 4000 	str.w	r4, [r8]
		return USBD_SendConfiguration(setup.wLength);
	}

	USBD_InitControl(setup.wLength);
#ifdef HID_ENABLED
	if (HID_REPORT_DESCRIPTOR_TYPE == t)
   8073e:	d106      	bne.n	8074e <_ZL7USB_ISRv+0x282>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : HID_REPORT_DESCRIPTOR_TYPE\r\n");)
		return HID_GetDescriptor(t);
   80740:	4630      	mov	r0, r6
   80742:	f000 f933 	bl	809ac <_Z17HID_GetDescriptori>
   80746:	3000      	adds	r0, #0
   80748:	bf18      	it	ne
   8074a:	2001      	movne	r0, #1
   8074c:	e0c0      	b.n	808d0 <_ZL7USB_ISRv+0x404>
	}
#endif

	if (USB_DEVICE_DESCRIPTOR_TYPE == t)
   8074e:	2e01      	cmp	r6, #1
   80750:	d10e      	bne.n	80770 <_ZL7USB_ISRv+0x2a4>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : USB_DEVICE_DESCRIPTOR_TYPE\r\n");)
		if (setup.wLength == 8)
   80752:	2c08      	cmp	r4, #8
   80754:	4b18      	ldr	r3, [pc, #96]	; (807b8 <_ZL7USB_ISRv+0x2ec>)
   80756:	d101      	bne.n	8075c <_ZL7USB_ISRv+0x290>
		{
			_cdcComposite = 1;
   80758:	2201      	movs	r2, #1
   8075a:	601a      	str	r2, [r3, #0]
		}
		desc_addr = _cdcComposite ?  (const uint8_t*)&USB_DeviceDescriptorA : (const uint8_t*)&USB_DeviceDescriptor;
   8075c:	6819      	ldr	r1, [r3, #0]
   8075e:	4a17      	ldr	r2, [pc, #92]	; (807bc <_ZL7USB_ISRv+0x2f0>)
   80760:	4b17      	ldr	r3, [pc, #92]	; (807c0 <_ZL7USB_ISRv+0x2f4>)
   80762:	2900      	cmp	r1, #0
   80764:	bf0c      	ite	eq
   80766:	4611      	moveq	r1, r2
   80768:	4619      	movne	r1, r3
        if( *desc_addr > setup.wLength ) {
   8076a:	2c11      	cmp	r4, #17
   8076c:	d872      	bhi.n	80854 <_ZL7USB_ISRv+0x388>
   8076e:	e038      	b.n	807e2 <_ZL7USB_ISRv+0x316>
            desc_length = setup.wLength;
        }
	}
	else if (USB_STRING_DESCRIPTOR_TYPE == t)
   80770:	2e03      	cmp	r6, #3
   80772:	d138      	bne.n	807e6 <_ZL7USB_ISRv+0x31a>
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : USB_STRING_DESCRIPTOR_TYPE\r\n");)
		if (setup.wValueL == 0) {
   80774:	f89d 3006 	ldrb.w	r3, [sp, #6]
   80778:	bb43      	cbnz	r3, 807cc <_ZL7USB_ISRv+0x300>
			return USB_SendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
		}
		else {
			return false;
		}
		if( *desc_addr > setup.wLength ) {
   8077a:	4912      	ldr	r1, [pc, #72]	; (807c4 <_ZL7USB_ISRv+0x2f8>)
   8077c:	780b      	ldrb	r3, [r1, #0]
   8077e:	42a3      	cmp	r3, r4
   80780:	d82f      	bhi.n	807e2 <_ZL7USB_ISRv+0x316>
   80782:	e067      	b.n	80854 <_ZL7USB_ISRv+0x388>
   80784:	400ac000 	.word	0x400ac000
   80788:	400ac1f0 	.word	0x400ac1f0
   8078c:	2007006c 	.word	0x2007006c
   80790:	400ac168 	.word	0x400ac168
   80794:	20070480 	.word	0x20070480
   80798:	2007004d 	.word	0x2007004d
   8079c:	2007005c 	.word	0x2007005c
   807a0:	00081984 	.word	0x00081984
   807a4:	20190034 	.word	0x20190034
   807a8:	2018ffff 	.word	0x2018ffff
   807ac:	dfe70001 	.word	0xdfe70001
   807b0:	7e07f07f 	.word	0x7e07f07f
   807b4:	20070050 	.word	0x20070050
   807b8:	20070058 	.word	0x20070058
   807bc:	00081958 	.word	0x00081958
   807c0:	000819c5 	.word	0x000819c5
   807c4:	00081980 	.word	0x00081980
   807c8:	20070054 	.word	0x20070054
	{
		TRACE_CORE(puts("=> USBD_SendDescriptor : USB_STRING_DESCRIPTOR_TYPE\r\n");)
		if (setup.wValueL == 0) {
			desc_addr = (const uint8_t*)&STRING_LANGUAGE;
		}
		else if (setup.wValueL == IPRODUCT) {
   807cc:	2b02      	cmp	r3, #2
   807ce:	d101      	bne.n	807d4 <_ZL7USB_ISRv+0x308>
			return USB_SendStringDescriptor(STRING_PRODUCT, setup.wLength);
   807d0:	4847      	ldr	r0, [pc, #284]	; (808f0 <_ZL7USB_ISRv+0x424>)
   807d2:	e002      	b.n	807da <_ZL7USB_ISRv+0x30e>
		}
		else if (setup.wValueL == IMANUFACTURER) {
   807d4:	2b01      	cmp	r3, #1
   807d6:	d17f      	bne.n	808d8 <_ZL7USB_ISRv+0x40c>
			return USB_SendStringDescriptor(STRING_MANUFACTURER, setup.wLength);
   807d8:	4846      	ldr	r0, [pc, #280]	; (808f4 <_ZL7USB_ISRv+0x428>)
   807da:	4621      	mov	r1, r4
   807dc:	f7ff fe24 	bl	80428 <_ZL24USB_SendStringDescriptorPKhi>
   807e0:	e076      	b.n	808d0 <_ZL7USB_ISRv+0x404>
		}
		else {
			return false;
		}
		if( *desc_addr > setup.wLength ) {
			desc_length = setup.wLength;
   807e2:	b2e2      	uxtb	r2, r4
   807e4:	e07b      	b.n	808de <_ZL7USB_ISRv+0x412>
		}
	}
	else if (USB_DEVICE_QUALIFIER == t)
   807e6:	2e06      	cmp	r6, #6
   807e8:	d104      	bne.n	807f4 <_ZL7USB_ISRv+0x328>
	{
		// Device qualifier descriptor requested
		desc_addr = (const uint8_t*)&USB_DeviceQualifier;
        if( *desc_addr > setup.wLength ) {
   807ea:	2c09      	cmp	r4, #9
   807ec:	d87a      	bhi.n	808e4 <_ZL7USB_ISRv+0x418>
            desc_length = setup.wLength;
   807ee:	b2e2      	uxtb	r2, r4
		}
	}
	else if (USB_DEVICE_QUALIFIER == t)
	{
		// Device qualifier descriptor requested
		desc_addr = (const uint8_t*)&USB_DeviceQualifier;
   807f0:	4941      	ldr	r1, [pc, #260]	; (808f8 <_ZL7USB_ISRv+0x42c>)
   807f2:	e074      	b.n	808de <_ZL7USB_ISRv+0x412>
        if( *desc_addr > setup.wLength ) {
            desc_length = setup.wLength;
        }
    }
    else if (USB_OTHER_SPEED_CONFIGURATION == t)
   807f4:	2e07      	cmp	r6, #7
   807f6:	f04f 0500 	mov.w	r5, #0
   807fa:	d16d      	bne.n	808d8 <_ZL7USB_ISRv+0x40c>
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
	_cend = end;
   807fc:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80910 <_ZL7USB_ISRv+0x444>
	int interfaces = USBD_SendOtherInterfaces();
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   80800:	2709      	movs	r7, #9
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
	_cend = end;
   80802:	f8c8 5000 	str.w	r5, [r8]
static bool USBD_SendOtherConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendOtherInterfaces();
   80806:	f7ff fe53 	bl	804b0 <_Z24USBD_SendOtherInterfacesv>
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   8080a:	4629      	mov	r1, r5
static bool USBD_SendOtherConfiguration(int maxlen)
{
	//	Count and measure interfaces
	USBD_InitControl(0);
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark1=%d\r\n", _cmark);)
	int interfaces = USBD_SendOtherInterfaces();
   8080c:	4681      	mov	r9, r0
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   8080e:	463a      	mov	r2, r7
   80810:	a803      	add	r0, sp, #12
   80812:	f001 f831 	bl	81878 <memset>
   80816:	2301      	movs	r3, #1
   80818:	f88d 3011 	strb.w	r3, [sp, #17]
   8081c:	23c0      	movs	r3, #192	; 0xc0
   8081e:	f88d 3013 	strb.w	r3, [sp, #19]
   80822:	23fa      	movs	r3, #250	; 0xfa
   80824:	f88d 3014 	strb.w	r3, [sp, #20]
   80828:	4b34      	ldr	r3, [pc, #208]	; (808fc <_ZL7USB_ISRv+0x430>)

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   8082a:	a903      	add	r1, sp, #12
	int interfaces = USBD_SendOtherInterfaces();
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   8082c:	681a      	ldr	r2, [r3, #0]

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   8082e:	4628      	mov	r0, r5
	int interfaces = USBD_SendOtherInterfaces();
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   80830:	19d2      	adds	r2, r2, r7
   80832:	f8ad 200e 	strh.w	r2, [sp, #14]

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   80836:	463a      	mov	r2, r7
int _cmark;
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
   80838:	601d      	str	r5, [r3, #0]
	int interfaces = USBD_SendOtherInterfaces();
	//TRACE_CORE(printf("=> USBD_SendConfiguration _cmark2=%d\r\n", _cmark);)
	//TRACE_CORE(printf("=> USBD_SendConfiguration sizeof=%d\r\n", sizeof(ConfigDescriptor));)

_Pragma("pack(1)")
	ConfigDescriptor config = D_OTHERCONFIG(_cmark + sizeof(ConfigDescriptor),interfaces);
   8083a:	f88d 700c 	strb.w	r7, [sp, #12]
   8083e:	f88d 600d 	strb.w	r6, [sp, #13]
   80842:	f88d 9010 	strb.w	r9, [sp, #16]
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
	_cend = end;
   80846:	f8c8 4000 	str.w	r4, [r8]

	//TRACE_CORE(printf("=> USBD_SendConfiguration maxlen=%d\r\n", maxlen);)

	//	Now send them
	USBD_InitControl(maxlen);
	USBD_SendControl(0,&config,sizeof(ConfigDescriptor));
   8084a:	f7ff fdcd 	bl	803e8 <_Z16USBD_SendControlhPKvm>
	USBD_SendOtherInterfaces();
   8084e:	f7ff fe2f 	bl	804b0 <_Z24USBD_SendOtherInterfacesv>
   80852:	e03e      	b.n	808d2 <_ZL7USB_ISRv+0x406>
		return false;
	}

	if (desc_length == 0)
	{
		desc_length = *desc_addr;
   80854:	780a      	ldrb	r2, [r1, #0]
	}

	TRACE_CORE(printf("=> USBD_SendDescriptor : desc_addr=%p desc_length=%d\r\n", desc_addr, desc_length);)
	USBD_SendControl(0, desc_addr, desc_length);
   80856:	2000      	movs	r0, #0
   80858:	f7ff fdc6 	bl	803e8 <_Z16USBD_SendControlhPKvm>
   8085c:	e039      	b.n	808d2 <_ZL7USB_ISRv+0x406>
			else if (GET_DESCRIPTOR == r)
			{
				TRACE_CORE(puts(">>> EP0 Int: GET_DESCRIPTOR\r\n");)
				ok = USBD_SendDescriptor(setup);
			}
			else if (SET_DESCRIPTOR == r)
   8085e:	2b07      	cmp	r3, #7
   80860:	d03a      	beq.n	808d8 <_ZL7USB_ISRv+0x40c>
			{
				TRACE_CORE(puts(">>> EP0 Int: SET_DESCRIPTOR\r\n");)
				ok = false;
			}
			else if (GET_CONFIGURATION == r)
   80862:	2b08      	cmp	r3, #8
   80864:	d104      	bne.n	80870 <_ZL7USB_ISRv+0x3a4>
			{
				TRACE_CORE(puts(">>> EP0 Int: GET_CONFIGURATION\r\n");)
				UDD_Send8(EP0, _usbConfiguration);
   80866:	4b26      	ldr	r3, [pc, #152]	; (80900 <_ZL7USB_ISRv+0x434>)
   80868:	4610      	mov	r0, r2
   8086a:	6819      	ldr	r1, [r3, #0]
   8086c:	b2c9      	uxtb	r1, r1
   8086e:	e019      	b.n	808a4 <_ZL7USB_ISRv+0x3d8>
			}
			else if (SET_CONFIGURATION == r)
   80870:	2b09      	cmp	r3, #9
   80872:	d112      	bne.n	8089a <_ZL7USB_ISRv+0x3ce>
			{
				if (REQUEST_DEVICE == (requestType & REQUEST_RECIPIENT))
   80874:	06e0      	lsls	r0, r4, #27
   80876:	d12f      	bne.n	808d8 <_ZL7USB_ISRv+0x40c>
				{
					TRACE_CORE(printf(">>> EP0 Int: SET_CONFIGURATION REQUEST_DEVICE %d\r\n", setup.wValueL);)

					UDD_InitEndpoints(EndPoints, (sizeof(EndPoints) / sizeof(EndPoints[0])));
   80878:	4822      	ldr	r0, [pc, #136]	; (80904 <_ZL7USB_ISRv+0x438>)
   8087a:	2105      	movs	r1, #5
   8087c:	f000 fe94 	bl	815a8 <UDD_InitEndpoints>
					_usbConfiguration = setup.wValueL;
   80880:	f89d 2006 	ldrb.w	r2, [sp, #6]
   80884:	4b1e      	ldr	r3, [pc, #120]	; (80900 <_ZL7USB_ISRv+0x434>)
   80886:	601a      	str	r2, [r3, #0]

#ifdef CDC_ENABLED
					// Enable interrupt for CDC reception from host (OUT packet)
					udd_enable_out_received_interrupt(CDC_RX);
   80888:	4b1f      	ldr	r3, [pc, #124]	; (80908 <_ZL7USB_ISRv+0x43c>)
   8088a:	2202      	movs	r2, #2
   8088c:	601a      	str	r2, [r3, #0]
					udd_enable_endpoint_interrupt(CDC_RX);
   8088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80892:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
   80896:	619a      	str	r2, [r3, #24]
   80898:	e01b      	b.n	808d2 <_ZL7USB_ISRv+0x406>
				{
					TRACE_CORE(puts(">>> EP0 Int: SET_CONFIGURATION failed!\r\n");)
					ok = false;
				}
			}
			else if (GET_INTERFACE == r)
   8089a:	2b0a      	cmp	r3, #10
   8089c:	d105      	bne.n	808aa <_ZL7USB_ISRv+0x3de>
			{
				TRACE_CORE(puts(">>> EP0 Int: GET_INTERFACE\r\n");)
				UDD_Send8(EP0, _usbSetInterface);
   8089e:	4b1b      	ldr	r3, [pc, #108]	; (8090c <_ZL7USB_ISRv+0x440>)
   808a0:	2000      	movs	r0, #0
   808a2:	7819      	ldrb	r1, [r3, #0]
   808a4:	f000 ff22 	bl	816ec <UDD_Send8>
   808a8:	e013      	b.n	808d2 <_ZL7USB_ISRv+0x406>
			}
			else if (SET_INTERFACE == r)
   808aa:	2b0b      	cmp	r3, #11
   808ac:	d111      	bne.n	808d2 <_ZL7USB_ISRv+0x406>
			{
                _usbSetInterface = setup.wValueL;
   808ae:	f89d 2006 	ldrb.w	r2, [sp, #6]
   808b2:	4b16      	ldr	r3, [pc, #88]	; (8090c <_ZL7USB_ISRv+0x440>)
   808b4:	601a      	str	r2, [r3, #0]
   808b6:	e00c      	b.n	808d2 <_ZL7USB_ISRv+0x406>
		}
		else
		{
			TRACE_CORE(puts(">>> EP0 Int: ClassInterfaceRequest\r\n");)

			UDD_WaitIN(); // Workaround: need tempo here, else CDC serial won't open correctly
   808b8:	f000 fe94 	bl	815e4 <UDD_WaitIN>
int _cmark;
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
   808bc:	4b0f      	ldr	r3, [pc, #60]	; (808fc <_ZL7USB_ISRv+0x430>)
   808be:	2100      	movs	r1, #0
   808c0:	6019      	str	r1, [r3, #0]
		{
			TRACE_CORE(puts(">>> EP0 Int: ClassInterfaceRequest\r\n");)

			UDD_WaitIN(); // Workaround: need tempo here, else CDC serial won't open correctly

			USBD_InitControl(setup.wLength); // Max length of transfer
   808c2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
	_cend = end;
   808c6:	4b12      	ldr	r3, [pc, #72]	; (80910 <_ZL7USB_ISRv+0x444>)
			TRACE_CORE(puts(">>> EP0 Int: ClassInterfaceRequest\r\n");)

			UDD_WaitIN(); // Workaround: need tempo here, else CDC serial won't open correctly

			USBD_InitControl(setup.wLength); // Max length of transfer
			ok = USBD_ClassInterfaceRequest(setup);
   808c8:	a801      	add	r0, sp, #4
int _cend;

void USBD_InitControl(int end)
{
	_cmark = 0;
	_cend = end;
   808ca:	601a      	str	r2, [r3, #0]
			TRACE_CORE(puts(">>> EP0 Int: ClassInterfaceRequest\r\n");)

			UDD_WaitIN(); // Workaround: need tempo here, else CDC serial won't open correctly

			USBD_InitControl(setup.wLength); // Max length of transfer
			ok = USBD_ClassInterfaceRequest(setup);
   808cc:	f7ff fdd8 	bl	80480 <_Z26USBD_ClassInterfaceRequestR5Setup>
		}

		if (ok)
   808d0:	b110      	cbz	r0, 808d8 <_ZL7USB_ISRv+0x40c>
		{
			TRACE_CORE(puts(">>> EP0 Int: Send packet\r\n");)
			UDD_ClearIN();
   808d2:	f000 fe9b 	bl	8160c <UDD_ClearIN>
   808d6:	e007      	b.n	808e8 <_ZL7USB_ISRv+0x41c>
		}
		else
		{
			TRACE_CORE(puts(">>> EP0 Int: Stall\r\n");)
			UDD_Stall();
   808d8:	f000 ff4a 	bl	81770 <UDD_Stall>
   808dc:	e004      	b.n	808e8 <_ZL7USB_ISRv+0x41c>
	if (desc_addr == 0)
	{
		return false;
	}

	if (desc_length == 0)
   808de:	2a00      	cmp	r2, #0
   808e0:	d1b9      	bne.n	80856 <_ZL7USB_ISRv+0x38a>
   808e2:	e7b7      	b.n	80854 <_ZL7USB_ISRv+0x388>
		}
	}
	else if (USB_DEVICE_QUALIFIER == t)
	{
		// Device qualifier descriptor requested
		desc_addr = (const uint8_t*)&USB_DeviceQualifier;
   808e4:	4904      	ldr	r1, [pc, #16]	; (808f8 <_ZL7USB_ISRv+0x42c>)
   808e6:	e7b5      	b.n	80854 <_ZL7USB_ISRv+0x388>
		{
			TRACE_CORE(puts(">>> EP0 Int: Stall\r\n");)
			UDD_Stall();
		}
	}
}
   808e8:	b006      	add	sp, #24
   808ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   808ee:	bf00      	nop
   808f0:	0008194c 	.word	0x0008194c
   808f4:	000819b9 	.word	0x000819b9
   808f8:	000819d7 	.word	0x000819d7
   808fc:	20070050 	.word	0x20070050
   80900:	2007006c 	.word	0x2007006c
   80904:	0008196c 	.word	0x0008196c
   80908:	400ac1f8 	.word	0x400ac1f8
   8090c:	20070068 	.word	0x20070068
   80910:	20070054 	.word	0x20070054

00080914 <_Z10USBD_Flushm>:

void USBD_Flush(uint32_t ep)
{
   80914:	b510      	push	{r4, lr}
   80916:	4604      	mov	r4, r0
	if (UDD_FifoByteCount(ep))
   80918:	f000 ff34 	bl	81784 <UDD_FifoByteCount>
   8091c:	b120      	cbz	r0, 80928 <_Z10USBD_Flushm+0x14>
		UDD_ReleaseTX(ep);
   8091e:	4620      	mov	r0, r4
}
   80920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void USBD_Flush(uint32_t ep)
{
	if (UDD_FifoByteCount(ep))
		UDD_ReleaseTX(ep);
   80924:	f000 bf52 	b.w	817cc <UDD_ReleaseTX>
   80928:	bd10      	pop	{r4, pc}
	...

0008092c <_ZN10USBDevice_C1Ev>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
   8092c:	b510      	push	{r4, lr}
   8092e:	4604      	mov	r4, r0
{
	UDD_SetStack(&USB_ISR);
   80930:	4805      	ldr	r0, [pc, #20]	; (80948 <_ZN10USBDevice_C1Ev+0x1c>)
   80932:	f000 fd8d 	bl	81450 <UDD_SetStack>

	if (UDD_Init() == 0UL)
   80936:	f000 fd91 	bl	8145c <UDD_Init>
   8093a:	b910      	cbnz	r0, 80942 <_ZN10USBDevice_C1Ev+0x16>
	{
		_usbInitialized=1UL;
   8093c:	4b03      	ldr	r3, [pc, #12]	; (8094c <_ZN10USBDevice_C1Ev+0x20>)
   8093e:	2201      	movs	r2, #1
   80940:	601a      	str	r2, [r3, #0]
	}
}
   80942:	4620      	mov	r0, r4
   80944:	bd10      	pop	{r4, pc}
   80946:	bf00      	nop
   80948:	000804cd 	.word	0x000804cd
   8094c:	20070060 	.word	0x20070060

00080950 <_ZN10USBDevice_6attachEv>:

bool USBDevice_::attach(void)
{
   80950:	b508      	push	{r3, lr}
  if (_usbInitialized != 0UL)
   80952:	4b05      	ldr	r3, [pc, #20]	; (80968 <_ZN10USBDevice_6attachEv+0x18>)
   80954:	6818      	ldr	r0, [r3, #0]
   80956:	b128      	cbz	r0, 80964 <_ZN10USBDevice_6attachEv+0x14>
  {
    UDD_Attach();
   80958:	f000 fde8 	bl	8152c <UDD_Attach>
	_usbConfiguration = 0;
   8095c:	4b03      	ldr	r3, [pc, #12]	; (8096c <_ZN10USBDevice_6attachEv+0x1c>)
   8095e:	2200      	movs	r2, #0
   80960:	601a      	str	r2, [r3, #0]
	return true;
   80962:	2001      	movs	r0, #1
  }
  else
  {
    return false;
  }
}
   80964:	bd08      	pop	{r3, pc}
   80966:	bf00      	nop
   80968:	20070060 	.word	0x20070060
   8096c:	2007006c 	.word	0x2007006c

00080970 <_GLOBAL__sub_I_TxLEDPulse>:


//=======================================================================
//=======================================================================

USBDevice_ USBDevice;
   80970:	4801      	ldr	r0, [pc, #4]	; (80978 <_GLOBAL__sub_I_TxLEDPulse+0x8>)
   80972:	f7ff bfdb 	b.w	8092c <_ZN10USBDevice_C1Ev>
   80976:	bf00      	nop
   80978:	20070064 	.word	0x20070064

0008097c <_ZN9Keyboard_5writeEh>:

size_t Keyboard_::write(uint8_t c)
{
	uint8_t p = 0;

	p = press(c);	// Keydown
   8097c:	6803      	ldr	r3, [r0, #0]
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
}

size_t Keyboard_::write(uint8_t c)
{
   8097e:	b570      	push	{r4, r5, r6, lr}
	uint8_t p = 0;

	p = press(c);	// Keydown
   80980:	689b      	ldr	r3, [r3, #8]
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
}

size_t Keyboard_::write(uint8_t c)
{
   80982:	4604      	mov	r4, r0
   80984:	460e      	mov	r6, r1
	uint8_t p = 0;

	p = press(c);	// Keydown
   80986:	4798      	blx	r3
	release(c);		// Keyup
   80988:	6823      	ldr	r3, [r4, #0]

size_t Keyboard_::write(uint8_t c)
{
	uint8_t p = 0;

	p = press(c);	// Keydown
   8098a:	4605      	mov	r5, r0
	release(c);		// Keyup
   8098c:	68db      	ldr	r3, [r3, #12]
   8098e:	4620      	mov	r0, r4
   80990:	4631      	mov	r1, r6
   80992:	4798      	blx	r3

	return (p);		// Just return the result of press() since release() almost always returns 1
}
   80994:	b2e8      	uxtb	r0, r5
   80996:	bd70      	pop	{r4, r5, r6, pc}

00080998 <_Z16HID_GetInterfacePh>:

#define WEAK __attribute__ ((weak))

int WEAK HID_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 1;	// uses 1
   80998:	7803      	ldrb	r3, [r0, #0]
	return USBD_SendControl(0,&_hidInterface,sizeof(_hidInterface));
   8099a:	4903      	ldr	r1, [pc, #12]	; (809a8 <_Z16HID_GetInterfacePh+0x10>)

#define WEAK __attribute__ ((weak))

int WEAK HID_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 1;	// uses 1
   8099c:	3301      	adds	r3, #1
   8099e:	7003      	strb	r3, [r0, #0]
	return USBD_SendControl(0,&_hidInterface,sizeof(_hidInterface));
   809a0:	2219      	movs	r2, #25
   809a2:	2000      	movs	r0, #0
   809a4:	f7ff bd20 	b.w	803e8 <_Z16USBD_SendControlhPKvm>
   809a8:	00081a90 	.word	0x00081a90

000809ac <_Z17HID_GetDescriptori>:
}

int WEAK HID_GetDescriptor(int i)
{
	return USBD_SendControl(0,_hidReportDescriptor,sizeof(_hidReportDescriptor));
   809ac:	4902      	ldr	r1, [pc, #8]	; (809b8 <_Z17HID_GetDescriptori+0xc>)
   809ae:	2000      	movs	r0, #0
   809b0:	2265      	movs	r2, #101	; 0x65
   809b2:	f7ff bd19 	b.w	803e8 <_Z16USBD_SendControlhPKvm>
   809b6:	bf00      	nop
   809b8:	00081aa9 	.word	0x00081aa9

000809bc <_Z14HID_SendReporthPKvm>:
}

void WEAK HID_SendReport(uint8_t id, const void* data, uint32_t len)
{
   809bc:	b500      	push	{lr}
   809be:	b091      	sub	sp, #68	; 0x44
	uint8_t p[64];
	const uint8_t *d = reinterpret_cast<const uint8_t *>(data);

	p[0] = id;
   809c0:	f88d 0000 	strb.w	r0, [sp]
	for (uint32_t i=0; i<len; i++)
   809c4:	2300      	movs	r3, #0
   809c6:	e004      	b.n	809d2 <_Z14HID_SendReporthPKvm+0x16>
int WEAK HID_GetDescriptor(int i)
{
	return USBD_SendControl(0,_hidReportDescriptor,sizeof(_hidReportDescriptor));
}

void WEAK HID_SendReport(uint8_t id, const void* data, uint32_t len)
   809c8:	18c8      	adds	r0, r1, r3
	uint8_t p[64];
	const uint8_t *d = reinterpret_cast<const uint8_t *>(data);

	p[0] = id;
	for (uint32_t i=0; i<len; i++)
		p[i+1] = d[i];
   809ca:	f810 0c01 	ldrb.w	r0, [r0, #-1]
   809ce:	f80d 0003 	strb.w	r0, [sp, r3]
{
	uint8_t p[64];
	const uint8_t *d = reinterpret_cast<const uint8_t *>(data);

	p[0] = id;
	for (uint32_t i=0; i<len; i++)
   809d2:	4293      	cmp	r3, r2
   809d4:	f103 0301 	add.w	r3, r3, #1
   809d8:	d1f6      	bne.n	809c8 <_Z14HID_SendReporthPKvm+0xc>
		p[i+1] = d[i];
	USBD_Send(HID_TX, p, len+1);
   809da:	2004      	movs	r0, #4
   809dc:	4669      	mov	r1, sp
   809de:	461a      	mov	r2, r3
   809e0:	f7ff fcdc 	bl	8039c <_Z9USBD_SendmPKvm>
}
   809e4:	b011      	add	sp, #68	; 0x44
   809e6:	bd00      	pop	{pc}

000809e8 <_Z9HID_SetupR5Setup>:

bool WEAK HID_Setup(Setup& setup)
{
	uint8_t r = setup.bRequest;
	uint8_t requestType = setup.bmRequestType;
   809e8:	7802      	ldrb	r2, [r0, #0]
	USBD_Send(HID_TX, p, len+1);
}

bool WEAK HID_Setup(Setup& setup)
{
	uint8_t r = setup.bRequest;
   809ea:	7843      	ldrb	r3, [r0, #1]
	uint8_t requestType = setup.bmRequestType;

	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
   809ec:	2aa1      	cmp	r2, #161	; 0xa1
   809ee:	d105      	bne.n	809fc <_Z9HID_SetupR5Setup+0x14>
	{
		if (HID_GET_REPORT == r)
   809f0:	2b01      	cmp	r3, #1
   809f2:	d011      	beq.n	80a18 <_Z9HID_SetupR5Setup+0x30>
		{
			//HID_GetReport();
			return true;
		}
		if (HID_GET_PROTOCOL == r)
   809f4:	3b03      	subs	r3, #3
   809f6:	4258      	negs	r0, r3
   809f8:	4158      	adcs	r0, r3
   809fa:	4770      	bx	lr
			//Send8(_hid_protocol);	// TODO
			return true;
		}
	}

	if (REQUEST_HOSTTODEVICE_CLASS_INTERFACE == requestType)
   809fc:	2a21      	cmp	r2, #33	; 0x21
   809fe:	d10d      	bne.n	80a1c <_Z9HID_SetupR5Setup+0x34>
	{
		if (HID_SET_PROTOCOL == r)
   80a00:	2b0b      	cmp	r3, #11
   80a02:	d102      	bne.n	80a0a <_Z9HID_SetupR5Setup+0x22>
		{
			_hid_protocol = setup.wValueL;
   80a04:	7882      	ldrb	r2, [r0, #2]
   80a06:	4b06      	ldr	r3, [pc, #24]	; (80a20 <_Z9HID_SetupR5Setup+0x38>)
   80a08:	e003      	b.n	80a12 <_Z9HID_SetupR5Setup+0x2a>
			return true;
		}

		if (HID_SET_IDLE == r)
   80a0a:	2b0a      	cmp	r3, #10
   80a0c:	d106      	bne.n	80a1c <_Z9HID_SetupR5Setup+0x34>
		{
			_hid_idle = setup.wValueL;
   80a0e:	7882      	ldrb	r2, [r0, #2]
   80a10:	4b04      	ldr	r3, [pc, #16]	; (80a24 <_Z9HID_SetupR5Setup+0x3c>)
   80a12:	701a      	strb	r2, [r3, #0]
			return true;
   80a14:	2001      	movs	r0, #1
   80a16:	4770      	bx	lr
	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
	{
		if (HID_GET_REPORT == r)
		{
			//HID_GetReport();
			return true;
   80a18:	4618      	mov	r0, r3
   80a1a:	4770      	bx	lr
		{
			_hid_idle = setup.wValueL;
			return true;
		}
	}
	return false;
   80a1c:	2000      	movs	r0, #0
}
   80a1e:	4770      	bx	lr
   80a20:	20070038 	.word	0x20070038
   80a24:	20070039 	.word	0x20070039

00080a28 <_ZN9Keyboard_10sendReportEP9KeyReport>:
void Keyboard_::end(void)
{
}

void Keyboard_::sendReport(KeyReport* keys)
{
   80a28:	b508      	push	{r3, lr}
	HID_SendReport(2,keys,sizeof(KeyReport));
   80a2a:	2002      	movs	r0, #2
   80a2c:	2208      	movs	r2, #8
   80a2e:	f7ff ffc5 	bl	809bc <_Z14HID_SendReporthPKvm>
   80a32:	bd08      	pop	{r3, pc}

00080a34 <_ZN9Keyboard_10releaseAllEv>:
	return 1;
}

void Keyboard_::releaseAll(void)
{
	_keyReport.keys[0] = 0;
   80a34:	2300      	movs	r3, #0
	sendReport(&_keyReport);
	return 1;
}

void Keyboard_::releaseAll(void)
{
   80a36:	4601      	mov	r1, r0
	_keyReport.keys[1] = 0;
	_keyReport.keys[2] = 0;
	_keyReport.keys[3] = 0;
	_keyReport.keys[4] = 0;
	_keyReport.keys[5] = 0;
	_keyReport.modifiers = 0;
   80a38:	f801 3f08 	strb.w	r3, [r1, #8]!
	return 1;
}

void Keyboard_::releaseAll(void)
{
	_keyReport.keys[0] = 0;
   80a3c:	7283      	strb	r3, [r0, #10]
	_keyReport.keys[1] = 0;
   80a3e:	72c3      	strb	r3, [r0, #11]
	_keyReport.keys[2] = 0;
   80a40:	7303      	strb	r3, [r0, #12]
	_keyReport.keys[3] = 0;
   80a42:	7343      	strb	r3, [r0, #13]
	_keyReport.keys[4] = 0;
   80a44:	7383      	strb	r3, [r0, #14]
	_keyReport.keys[5] = 0;
   80a46:	73c3      	strb	r3, [r0, #15]
	_keyReport.modifiers = 0;
	sendReport(&_keyReport);
   80a48:	f7ff bfee 	b.w	80a28 <_ZN9Keyboard_10sendReportEP9KeyReport>

00080a4c <_ZN9Keyboard_7releaseEh>:
// sends the report.  This tells the OS the key is no longer pressed and that
// it shouldn't be repeated any more.
size_t Keyboard_::release(uint8_t k)
{
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80a4c:	2987      	cmp	r1, #135	; 0x87

// release() takes the specified key out of the persistent key report and
// sends the report.  This tells the OS the key is no longer pressed and that
// it shouldn't be repeated any more.
size_t Keyboard_::release(uint8_t k)
{
   80a4e:	b538      	push	{r3, r4, r5, lr}
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80a50:	d902      	bls.n	80a58 <_ZN9Keyboard_7releaseEh+0xc>
		k = k - 136;
   80a52:	3178      	adds	r1, #120	; 0x78
   80a54:	b2c9      	uxtb	r1, r1
   80a56:	e016      	b.n	80a86 <_ZN9Keyboard_7releaseEh+0x3a>
	} else if (k >= 128) {	// it's a modifier key
   80a58:	060b      	lsls	r3, r1, #24
   80a5a:	d509      	bpl.n	80a70 <_ZN9Keyboard_7releaseEh+0x24>
		_keyReport.modifiers &= ~(1<<(k-128));
   80a5c:	2301      	movs	r3, #1
   80a5e:	3980      	subs	r1, #128	; 0x80
   80a60:	fa03 f101 	lsl.w	r1, r3, r1
   80a64:	7a03      	ldrb	r3, [r0, #8]
   80a66:	ea23 0101 	bic.w	r1, r3, r1
   80a6a:	7201      	strb	r1, [r0, #8]
		k = 0;
   80a6c:	2100      	movs	r1, #0
   80a6e:	e00a      	b.n	80a86 <_ZN9Keyboard_7releaseEh+0x3a>
	} else {				// it's a printing key
		k = _asciimap[k];
   80a70:	4b0f      	ldr	r3, [pc, #60]	; (80ab0 <_ZN9Keyboard_7releaseEh+0x64>)
   80a72:	5c59      	ldrb	r1, [r3, r1]
		if (!k) {
   80a74:	b1d1      	cbz	r1, 80aac <_ZN9Keyboard_7releaseEh+0x60>
			return 0;
		}
		if (k & 0x80) {							// it's a capital letter or other character reached with shift
   80a76:	060a      	lsls	r2, r1, #24
   80a78:	d505      	bpl.n	80a86 <_ZN9Keyboard_7releaseEh+0x3a>
			_keyReport.modifiers &= ~(0x02);	// the left shift modifier
   80a7a:	7a03      	ldrb	r3, [r0, #8]
			k &= 0x7F;
   80a7c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		k = _asciimap[k];
		if (!k) {
			return 0;
		}
		if (k & 0x80) {							// it's a capital letter or other character reached with shift
			_keyReport.modifiers &= ~(0x02);	// the left shift modifier
   80a80:	f023 0302 	bic.w	r3, r3, #2
   80a84:	7203      	strb	r3, [r0, #8]
   80a86:	4603      	mov	r3, r0
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
		k = k - 136;
	} else if (k >= 128) {	// it's a modifier key
		_keyReport.modifiers &= ~(1<<(k-128));
		k = 0;
   80a88:	2206      	movs	r2, #6

	// Test the key report to see if k is present.  Clear it if it exists.
	// Check all positions in case the key is present more than once (which it shouldn't be)
	for (i=0; i<6; i++) {
		if (0 != k && _keyReport.keys[i] == k) {
			_keyReport.keys[i] = 0x00;
   80a8a:	2400      	movs	r4, #0
	}

	// Test the key report to see if k is present.  Clear it if it exists.
	// Check all positions in case the key is present more than once (which it shouldn't be)
	for (i=0; i<6; i++) {
		if (0 != k && _keyReport.keys[i] == k) {
   80a8c:	b119      	cbz	r1, 80a96 <_ZN9Keyboard_7releaseEh+0x4a>
   80a8e:	7a9d      	ldrb	r5, [r3, #10]
   80a90:	428d      	cmp	r5, r1
			_keyReport.keys[i] = 0x00;
   80a92:	bf08      	it	eq
   80a94:	729c      	strbeq	r4, [r3, #10]
   80a96:	3a01      	subs	r2, #1
   80a98:	3301      	adds	r3, #1
		}
	}

	// Test the key report to see if k is present.  Clear it if it exists.
	// Check all positions in case the key is present more than once (which it shouldn't be)
	for (i=0; i<6; i++) {
   80a9a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   80a9e:	d1f5      	bne.n	80a8c <_ZN9Keyboard_7releaseEh+0x40>
		if (0 != k && _keyReport.keys[i] == k) {
			_keyReport.keys[i] = 0x00;
		}
	}

	sendReport(&_keyReport);
   80aa0:	f100 0108 	add.w	r1, r0, #8
   80aa4:	f7ff ffc0 	bl	80a28 <_ZN9Keyboard_10sendReportEP9KeyReport>
	return 1;
   80aa8:	2001      	movs	r0, #1
   80aaa:	bd38      	pop	{r3, r4, r5, pc}
		_keyReport.modifiers &= ~(1<<(k-128));
		k = 0;
	} else {				// it's a printing key
		k = _asciimap[k];
		if (!k) {
			return 0;
   80aac:	4608      	mov	r0, r1
		}
	}

	sendReport(&_keyReport);
	return 1;
}
   80aae:	bd38      	pop	{r3, r4, r5, pc}
   80ab0:	00081a10 	.word	0x00081a10

00080ab4 <_ZN9Keyboard_5pressEh>:
// USB HID works, the host acts like the key remains pressed until we
// call release(), releaseAll(), or otherwise clear the report and resend.
size_t Keyboard_::press(uint8_t k)
{
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80ab4:	2987      	cmp	r1, #135	; 0x87
// press() adds the specified key (printing, non-printing, or modifier)
// to the persistent key report and sends the report.  Because of the way
// USB HID works, the host acts like the key remains pressed until we
// call release(), releaseAll(), or otherwise clear the report and resend.
size_t Keyboard_::press(uint8_t k)
{
   80ab6:	b510      	push	{r4, lr}
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
   80ab8:	d902      	bls.n	80ac0 <_ZN9Keyboard_5pressEh+0xc>
		k = k - 136;
   80aba:	3178      	adds	r1, #120	; 0x78
   80abc:	b2c9      	uxtb	r1, r1
   80abe:	e016      	b.n	80aee <_ZN9Keyboard_5pressEh+0x3a>
	} else if (k >= 128) {	// it's a modifier key
   80ac0:	060b      	lsls	r3, r1, #24
   80ac2:	d508      	bpl.n	80ad6 <_ZN9Keyboard_5pressEh+0x22>
		_keyReport.modifiers |= (1<<(k-128));
   80ac4:	2301      	movs	r3, #1
   80ac6:	3980      	subs	r1, #128	; 0x80
   80ac8:	fa03 f101 	lsl.w	r1, r3, r1
   80acc:	7a03      	ldrb	r3, [r0, #8]
   80ace:	4319      	orrs	r1, r3
   80ad0:	7201      	strb	r1, [r0, #8]
		k = 0;
   80ad2:	2100      	movs	r1, #0
   80ad4:	e00b      	b.n	80aee <_ZN9Keyboard_5pressEh+0x3a>
	} else {				// it's a printing key
		k = _asciimap[k];
   80ad6:	4b19      	ldr	r3, [pc, #100]	; (80b3c <_ZN9Keyboard_5pressEh+0x88>)
   80ad8:	5c59      	ldrb	r1, [r3, r1]
		if (!k) {
   80ada:	b901      	cbnz	r1, 80ade <_ZN9Keyboard_5pressEh+0x2a>
   80adc:	e029      	b.n	80b32 <_ZN9Keyboard_5pressEh+0x7e>
			setWriteError();
			return 0;
		}
		if (k & 0x80) {						// it's a capital letter or other character reached with shift
   80ade:	060a      	lsls	r2, r1, #24
   80ae0:	d505      	bpl.n	80aee <_ZN9Keyboard_5pressEh+0x3a>
			_keyReport.modifiers |= 0x02;	// the left shift modifier
   80ae2:	7a03      	ldrb	r3, [r0, #8]
			k &= 0x7F;
   80ae4:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		if (!k) {
			setWriteError();
			return 0;
		}
		if (k & 0x80) {						// it's a capital letter or other character reached with shift
			_keyReport.modifiers |= 0x02;	// the left shift modifier
   80ae8:	f043 0302 	orr.w	r3, r3, #2
   80aec:	7203      	strb	r3, [r0, #8]
		}
	}

	// Add k to the key report only if it's not already present
	// and if there is an empty slot.
	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
   80aee:	7a83      	ldrb	r3, [r0, #10]
   80af0:	428b      	cmp	r3, r1
   80af2:	d018      	beq.n	80b26 <_ZN9Keyboard_5pressEh+0x72>
   80af4:	7ac3      	ldrb	r3, [r0, #11]
   80af6:	428b      	cmp	r3, r1
   80af8:	d015      	beq.n	80b26 <_ZN9Keyboard_5pressEh+0x72>
   80afa:	7b03      	ldrb	r3, [r0, #12]
   80afc:	428b      	cmp	r3, r1
   80afe:	d012      	beq.n	80b26 <_ZN9Keyboard_5pressEh+0x72>
   80b00:	7b43      	ldrb	r3, [r0, #13]
   80b02:	428b      	cmp	r3, r1
   80b04:	d00f      	beq.n	80b26 <_ZN9Keyboard_5pressEh+0x72>
   80b06:	7b83      	ldrb	r3, [r0, #14]
   80b08:	428b      	cmp	r3, r1
   80b0a:	d00c      	beq.n	80b26 <_ZN9Keyboard_5pressEh+0x72>
   80b0c:	7bc3      	ldrb	r3, [r0, #15]
   80b0e:	428b      	cmp	r3, r1
   80b10:	d009      	beq.n	80b26 <_ZN9Keyboard_5pressEh+0x72>
   80b12:	2300      	movs	r3, #0

// press() adds the specified key (printing, non-printing, or modifier)
// to the persistent key report and sends the report.  Because of the way
// USB HID works, the host acts like the key remains pressed until we
// call release(), releaseAll(), or otherwise clear the report and resend.
size_t Keyboard_::press(uint8_t k)
   80b14:	18c2      	adds	r2, r0, r3
	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {

		for (i=0; i<6; i++) {
			if (_keyReport.keys[i] == 0x00) {
   80b16:	7a94      	ldrb	r4, [r2, #10]
   80b18:	b90c      	cbnz	r4, 80b1e <_ZN9Keyboard_5pressEh+0x6a>
				_keyReport.keys[i] = k;
   80b1a:	7291      	strb	r1, [r2, #10]
   80b1c:	e003      	b.n	80b26 <_ZN9Keyboard_5pressEh+0x72>
   80b1e:	3301      	adds	r3, #1
	// and if there is an empty slot.
	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {

		for (i=0; i<6; i++) {
   80b20:	2b06      	cmp	r3, #6
   80b22:	d1f7      	bne.n	80b14 <_ZN9Keyboard_5pressEh+0x60>
   80b24:	e005      	b.n	80b32 <_ZN9Keyboard_5pressEh+0x7e>
		if (i == 6) {
			setWriteError();
			return 0;
		}
	}
	sendReport(&_keyReport);
   80b26:	f100 0108 	add.w	r1, r0, #8
   80b2a:	f7ff ff7d 	bl	80a28 <_ZN9Keyboard_10sendReportEP9KeyReport>
	return 1;
   80b2e:	2001      	movs	r0, #1
   80b30:	bd10      	pop	{r4, pc}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   80b32:	2301      	movs	r3, #1
   80b34:	6043      	str	r3, [r0, #4]
				break;
			}
		}
		if (i == 6) {
			setWriteError();
			return 0;
   80b36:	2000      	movs	r0, #0
		}
	}
	sendReport(&_keyReport);
	return 1;
}
   80b38:	bd10      	pop	{r4, pc}
   80b3a:	bf00      	nop
   80b3c:	00081a10 	.word	0x00081a10

00080b40 <_GLOBAL__sub_I_Mouse>:

//================================================================================
//================================================================================
//	Mouse

Mouse_::Mouse_(void) : _buttons(0)
   80b40:	4b03      	ldr	r3, [pc, #12]	; (80b50 <_GLOBAL__sub_I_Mouse+0x10>)
   80b42:	2200      	movs	r2, #0
   80b44:	701a      	strb	r2, [r3, #0]
  public:
    Print() : write_error(0) {}
   80b46:	4b03      	ldr	r3, [pc, #12]	; (80b54 <_GLOBAL__sub_I_Mouse+0x14>)
   80b48:	605a      	str	r2, [r3, #4]

//================================================================================
//================================================================================
//	Keyboard

Keyboard_::Keyboard_(void)
   80b4a:	4a03      	ldr	r2, [pc, #12]	; (80b58 <_GLOBAL__sub_I_Mouse+0x18>)
   80b4c:	601a      	str	r2, [r3, #0]
   80b4e:	4770      	bx	lr
   80b50:	20070070 	.word	0x20070070
   80b54:	20070074 	.word	0x20070074
   80b58:	000819f8 	.word	0x000819f8

00080b5c <UART_Handler>:
UARTClass Serial(UART, UART_IRQn, ID_UART, &rx_buffer1);

// IT handlers
void UART_Handler(void)
{
  Serial.IrqHandler();
   80b5c:	4801      	ldr	r0, [pc, #4]	; (80b64 <UART_Handler+0x8>)
   80b5e:	f000 b9ab 	b.w	80eb8 <_ZN9UARTClass10IrqHandlerEv>
   80b62:	bf00      	nop
   80b64:	20070084 	.word	0x20070084

00080b68 <USART0_Handler>:
USARTClass Serial3(USART3, USART3_IRQn, ID_USART3, &rx_buffer4);

// IT handlers
void USART0_Handler(void)
{
  Serial1.IrqHandler();
   80b68:	4801      	ldr	r0, [pc, #4]	; (80b70 <USART0_Handler+0x8>)
   80b6a:	f000 b953 	b.w	80e14 <_ZN10USARTClass10IrqHandlerEv>
   80b6e:	bf00      	nop
   80b70:	200700ec 	.word	0x200700ec

00080b74 <USART1_Handler>:
}

void USART1_Handler(void)
{
  Serial2.IrqHandler();
   80b74:	4801      	ldr	r0, [pc, #4]	; (80b7c <USART1_Handler+0x8>)
   80b76:	f000 b94d 	b.w	80e14 <_ZN10USARTClass10IrqHandlerEv>
   80b7a:	bf00      	nop
   80b7c:	2007010c 	.word	0x2007010c

00080b80 <USART3_Handler>:
}

void USART3_Handler(void)
{
  Serial3.IrqHandler();
   80b80:	4801      	ldr	r0, [pc, #4]	; (80b88 <USART3_Handler+0x8>)
   80b82:	f000 b947 	b.w	80e14 <_ZN10USARTClass10IrqHandlerEv>
   80b86:	bf00      	nop
   80b88:	2007012c 	.word	0x2007012c

00080b8c <init>:
#endif

void __libc_init_array(void);

void init( void )
{
   80b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SystemInit();
   80b8e:	f000 fba1 	bl	812d4 <SystemInit>

  // Set Systick to 1ms interval, common to all SAM3 variants
  if (SysTick_Config(SystemCoreClock / 1000))
   80b92:	4b39      	ldr	r3, [pc, #228]	; (80c78 <init+0xec>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80b94:	21f0      	movs	r1, #240	; 0xf0
   80b96:	681a      	ldr	r2, [r3, #0]
   80b98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   80b9c:	fbb2 f2f3 	udiv	r2, r2, r3
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   80ba0:	4b36      	ldr	r3, [pc, #216]	; (80c7c <init+0xf0>)
   80ba2:	3a01      	subs	r2, #1
   80ba4:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80ba6:	4a36      	ldr	r2, [pc, #216]	; (80c80 <init+0xf4>)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   80ba8:	2400      	movs	r4, #0
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80baa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
   80bae:	2207      	movs	r2, #7
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   80bb0:	609c      	str	r4, [r3, #8]
    // Capture error
    while (true);
  }

  // Disable watchdog
  WDT_Disable(WDT);
   80bb2:	4834      	ldr	r0, [pc, #208]	; (80c84 <init+0xf8>)
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
   80bb4:	601a      	str	r2, [r3, #0]
   80bb6:	f000 fb89 	bl	812cc <WDT_Disable>

  // Initialize C library
  __libc_init_array();
   80bba:	f000 fe35 	bl	81828 <__libc_init_array>

  // Disable pull-up on every pin
  for (int i = 0; i < PINS_COUNT; i++)
   80bbe:	e004      	b.n	80bca <init+0x3e>
	  digitalWrite(i, LOW);
   80bc0:	4620      	mov	r0, r4
   80bc2:	2100      	movs	r1, #0
   80bc4:	f7ff fb1e 	bl	80204 <digitalWrite>

  // Initialize C library
  __libc_init_array();

  // Disable pull-up on every pin
  for (int i = 0; i < PINS_COUNT; i++)
   80bc8:	3401      	adds	r4, #1
   80bca:	2c4f      	cmp	r4, #79	; 0x4f
   80bcc:	d1f8      	bne.n	80bc0 <init+0x34>
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
   80bce:	4d2e      	ldr	r5, [pc, #184]	; (80c88 <init+0xfc>)
  PIOB->PIO_OWER = 0xFFFFFFFF;
   80bd0:	4e2e      	ldr	r6, [pc, #184]	; (80c8c <init+0x100>)
  PIOC->PIO_OWER = 0xFFFFFFFF;
  PIOD->PIO_OWER = 0xFFFFFFFF;
   80bd2:	4f2f      	ldr	r7, [pc, #188]	; (80c90 <init+0x104>)
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
  PIOC->PIO_OWER = 0xFFFFFFFF;
   80bd4:	4b2f      	ldr	r3, [pc, #188]	; (80c94 <init+0x108>)
  // Disable pull-up on every pin
  for (int i = 0; i < PINS_COUNT; i++)
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
   80bd6:	f04f 34ff 	mov.w	r4, #4294967295
   80bda:	f8c5 40a0 	str.w	r4, [r5, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80bde:	2101      	movs	r1, #1
  for (int i = 0; i < PINS_COUNT; i++)
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
   80be0:	f8c6 40a0 	str.w	r4, [r6, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80be4:	f44f 7240 	mov.w	r2, #768	; 0x300
	  digitalWrite(i, LOW);

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
  PIOC->PIO_OWER = 0xFFFFFFFF;
   80be8:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80bec:	4628      	mov	r0, r5
   80bee:	2300      	movs	r3, #0

  // Enable parallel access on PIO output data registers
  PIOA->PIO_OWER = 0xFFFFFFFF;
  PIOB->PIO_OWER = 0xFFFFFFFF;
  PIOC->PIO_OWER = 0xFFFFFFFF;
  PIOD->PIO_OWER = 0xFFFFFFFF;
   80bf0:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
  // Initialize Serial port U(S)ART pins
  PIO_Configure(
    g_APinDescription[PINS_UART].pPort,
    g_APinDescription[PINS_UART].ulPinType,
    g_APinDescription[PINS_UART].ulPin,
    g_APinDescription[PINS_UART].ulPinConfiguration);
   80bf4:	f000 fab2 	bl	8115c <PIO_Configure>
  digitalWrite(0, HIGH); // Enable pullup for RX0
   80bf8:	2000      	movs	r0, #0
   80bfa:	2101      	movs	r1, #1
   80bfc:	f7ff fb02 	bl	80204 <digitalWrite>
  PIO_Configure(
    g_APinDescription[PINS_USART0].pPort,
    g_APinDescription[PINS_USART0].ulPinType,
    g_APinDescription[PINS_USART0].ulPin,
    g_APinDescription[PINS_USART0].ulPinConfiguration);
   80c00:	2101      	movs	r1, #1
   80c02:	2300      	movs	r3, #0
   80c04:	4628      	mov	r0, r5
   80c06:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   80c0a:	f000 faa7 	bl	8115c <PIO_Configure>
  PIO_Configure(
    g_APinDescription[PINS_USART1].pPort,
    g_APinDescription[PINS_USART1].ulPinType,
    g_APinDescription[PINS_USART1].ulPin,
    g_APinDescription[PINS_USART1].ulPinConfiguration);
   80c0e:	2101      	movs	r1, #1
   80c10:	2300      	movs	r3, #0
   80c12:	4628      	mov	r0, r5
   80c14:	f44f 5240 	mov.w	r2, #12288	; 0x3000
   80c18:	f000 faa0 	bl	8115c <PIO_Configure>
  PIO_Configure(
    g_APinDescription[PINS_USART3].pPort,
    g_APinDescription[PINS_USART3].ulPinType,
    g_APinDescription[PINS_USART3].ulPin,
    g_APinDescription[PINS_USART3].ulPinConfiguration);
   80c1c:	2102      	movs	r1, #2
   80c1e:	2230      	movs	r2, #48	; 0x30
   80c20:	2300      	movs	r3, #0
   80c22:	4638      	mov	r0, r7
   80c24:	f000 fa9a 	bl	8115c <PIO_Configure>
  // Initialize USB pins
  PIO_Configure(
    g_APinDescription[PINS_USB].pPort,
    g_APinDescription[PINS_USB].ulPinType,
    g_APinDescription[PINS_USB].ulPin,
    g_APinDescription[PINS_USB].ulPinConfiguration);
   80c28:	2101      	movs	r1, #1
   80c2a:	2300      	movs	r3, #0
   80c2c:	f44f 6240 	mov.w	r2, #3072	; 0xc00
   80c30:	4630      	mov	r0, r6
   80c32:	f000 fa93 	bl	8115c <PIO_Configure>

  // Initialize Analog Controller
  pmc_enable_periph_clk(ID_ADC);
   80c36:	2025      	movs	r0, #37	; 0x25
   80c38:	f000 fae2 	bl	81200 <pmc_enable_periph_clk>
  adc_init(ADC, SystemCoreClock, ADC_FREQ_MAX, ADC_STARTUP_FAST);
   80c3c:	4b0e      	ldr	r3, [pc, #56]	; (80c78 <init+0xec>)
   80c3e:	4a16      	ldr	r2, [pc, #88]	; (80c98 <init+0x10c>)
   80c40:	6819      	ldr	r1, [r3, #0]
   80c42:	4816      	ldr	r0, [pc, #88]	; (80c9c <init+0x110>)
   80c44:	230c      	movs	r3, #12
   80c46:	f000 fbcb 	bl	813e0 <adc_init>
  adc_configure_timing(ADC, 0, ADC_SETTLING_TIME_3, 1);
   80c4a:	2301      	movs	r3, #1
   80c4c:	2100      	movs	r1, #0
   80c4e:	4813      	ldr	r0, [pc, #76]	; (80c9c <init+0x110>)
   80c50:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
   80c54:	f000 fbe9 	bl	8142a <adc_configure_timing>
  adc_configure_trigger(ADC, ADC_TRIG_SW, 0); // Disable hardware trigger.
   80c58:	2100      	movs	r1, #0
   80c5a:	460a      	mov	r2, r1
   80c5c:	480f      	ldr	r0, [pc, #60]	; (80c9c <init+0x110>)
   80c5e:	f000 fbdc 	bl	8141a <adc_configure_trigger>
  adc_disable_interrupt(ADC, 0xFFFFFFFF); // Disable all ADC interrupts.
   80c62:	4621      	mov	r1, r4
   80c64:	480d      	ldr	r0, [pc, #52]	; (80c9c <init+0x110>)
   80c66:	f000 fbf1 	bl	8144c <adc_disable_interrupt>
  adc_disable_all_channel(ADC);
   80c6a:	480c      	ldr	r0, [pc, #48]	; (80c9c <init+0x110>)
   80c6c:	f000 fbea 	bl	81444 <adc_disable_all_channel>

  // Initialize analogOutput module
  analogOutputInit();
}
   80c70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  adc_configure_trigger(ADC, ADC_TRIG_SW, 0); // Disable hardware trigger.
  adc_disable_interrupt(ADC, 0xFFFFFFFF); // Disable all ADC interrupts.
  adc_disable_all_channel(ADC);

  // Initialize analogOutput module
  analogOutputInit();
   80c74:	f000 b85a 	b.w	80d2c <analogOutputInit>
   80c78:	20070044 	.word	0x20070044
   80c7c:	e000e010 	.word	0xe000e010
   80c80:	e000ed00 	.word	0xe000ed00
   80c84:	400e1a50 	.word	0x400e1a50
   80c88:	400e0e00 	.word	0x400e0e00
   80c8c:	400e1000 	.word	0x400e1000
   80c90:	400e1400 	.word	0x400e1400
   80c94:	400e1200 	.word	0x400e1200
   80c98:	01312d00 	.word	0x01312d00
   80c9c:	400c0000 	.word	0x400c0000

00080ca0 <_GLOBAL__sub_I_g_APinDescription>:
}

#ifdef __cplusplus
}
   80ca0:	b573      	push	{r0, r1, r4, r5, r6, lr}
#endif

/*
 * UART objects
 */
RingBuffer rx_buffer1;
   80ca2:	4c16      	ldr	r4, [pc, #88]	; (80cfc <_GLOBAL__sub_I_g_APinDescription+0x5c>)

// ----------------------------------------------------------------------------
/*
 * USART objects
 */
RingBuffer rx_buffer2;
   80ca4:	4e16      	ldr	r6, [pc, #88]	; (80d00 <_GLOBAL__sub_I_g_APinDescription+0x60>)
#endif

/*
 * UART objects
 */
RingBuffer rx_buffer1;
   80ca6:	4620      	mov	r0, r4
   80ca8:	f000 f85f 	bl	80d6a <_ZN10RingBufferC1Ev>

UARTClass Serial(UART, UART_IRQn, ID_UART, &rx_buffer1);
   80cac:	2208      	movs	r2, #8
   80cae:	4613      	mov	r3, r2
   80cb0:	4914      	ldr	r1, [pc, #80]	; (80d04 <_GLOBAL__sub_I_g_APinDescription+0x64>)
   80cb2:	9400      	str	r4, [sp, #0]
// ----------------------------------------------------------------------------
/*
 * USART objects
 */
RingBuffer rx_buffer2;
RingBuffer rx_buffer3;
   80cb4:	4d14      	ldr	r5, [pc, #80]	; (80d08 <_GLOBAL__sub_I_g_APinDescription+0x68>)
/*
 * UART objects
 */
RingBuffer rx_buffer1;

UARTClass Serial(UART, UART_IRQn, ID_UART, &rx_buffer1);
   80cb6:	4815      	ldr	r0, [pc, #84]	; (80d0c <_GLOBAL__sub_I_g_APinDescription+0x6c>)
   80cb8:	f000 f8ec 	bl	80e94 <_ZN9UARTClassC1EP4Uart4IRQnmP10RingBuffer>
/*
 * USART objects
 */
RingBuffer rx_buffer2;
RingBuffer rx_buffer3;
RingBuffer rx_buffer4;
   80cbc:	4c14      	ldr	r4, [pc, #80]	; (80d10 <_GLOBAL__sub_I_g_APinDescription+0x70>)

// ----------------------------------------------------------------------------
/*
 * USART objects
 */
RingBuffer rx_buffer2;
   80cbe:	4630      	mov	r0, r6
   80cc0:	f000 f853 	bl	80d6a <_ZN10RingBufferC1Ev>
RingBuffer rx_buffer3;
   80cc4:	4628      	mov	r0, r5
   80cc6:	f000 f850 	bl	80d6a <_ZN10RingBufferC1Ev>
RingBuffer rx_buffer4;
   80cca:	4620      	mov	r0, r4
   80ccc:	f000 f84d 	bl	80d6a <_ZN10RingBufferC1Ev>

USARTClass Serial1(USART0, USART0_IRQn, ID_USART0, &rx_buffer2);
   80cd0:	2211      	movs	r2, #17
   80cd2:	4613      	mov	r3, r2
   80cd4:	9600      	str	r6, [sp, #0]
   80cd6:	490f      	ldr	r1, [pc, #60]	; (80d14 <_GLOBAL__sub_I_g_APinDescription+0x74>)
   80cd8:	480f      	ldr	r0, [pc, #60]	; (80d18 <_GLOBAL__sub_I_g_APinDescription+0x78>)
   80cda:	f000 f889 	bl	80df0 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>
USARTClass Serial2(USART1, USART1_IRQn, ID_USART1, &rx_buffer3);
   80cde:	2212      	movs	r2, #18
   80ce0:	4613      	mov	r3, r2
   80ce2:	9500      	str	r5, [sp, #0]
   80ce4:	490d      	ldr	r1, [pc, #52]	; (80d1c <_GLOBAL__sub_I_g_APinDescription+0x7c>)
   80ce6:	480e      	ldr	r0, [pc, #56]	; (80d20 <_GLOBAL__sub_I_g_APinDescription+0x80>)
   80ce8:	f000 f882 	bl	80df0 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>
USARTClass Serial3(USART3, USART3_IRQn, ID_USART3, &rx_buffer4);
   80cec:	2214      	movs	r2, #20
   80cee:	9400      	str	r4, [sp, #0]
   80cf0:	490c      	ldr	r1, [pc, #48]	; (80d24 <_GLOBAL__sub_I_g_APinDescription+0x84>)
   80cf2:	4613      	mov	r3, r2
   80cf4:	480c      	ldr	r0, [pc, #48]	; (80d28 <_GLOBAL__sub_I_g_APinDescription+0x88>)
   80cf6:	f000 f87b 	bl	80df0 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>
  // Initialize analogOutput module
  analogOutputInit();
}

#ifdef __cplusplus
}
   80cfa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   80cfc:	200700a4 	.word	0x200700a4
   80d00:	2007014c 	.word	0x2007014c
   80d04:	400e0800 	.word	0x400e0800
   80d08:	20070194 	.word	0x20070194
   80d0c:	20070084 	.word	0x20070084
   80d10:	200701dc 	.word	0x200701dc
   80d14:	40098000 	.word	0x40098000
   80d18:	200700ec 	.word	0x200700ec
   80d1c:	4009c000 	.word	0x4009c000
   80d20:	2007010c 	.word	0x2007010c
   80d24:	400a4000 	.word	0x400a4000
   80d28:	2007012c 	.word	0x2007012c

00080d2c <analogOutputInit>:

static uint8_t PWMEnabled = 0;
static uint8_t pinEnabled[PINS_COUNT];
static uint8_t TCChanEnabled[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};

void analogOutputInit(void) {
   80d2c:	2300      	movs	r3, #0
	uint8_t i;
	for (i=0; i<PINS_COUNT; i++)
		pinEnabled[i] = 0;
   80d2e:	4a03      	ldr	r2, [pc, #12]	; (80d3c <analogOutputInit+0x10>)
   80d30:	4619      	mov	r1, r3
   80d32:	5499      	strb	r1, [r3, r2]
   80d34:	3301      	adds	r3, #1
static uint8_t pinEnabled[PINS_COUNT];
static uint8_t TCChanEnabled[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};

void analogOutputInit(void) {
	uint8_t i;
	for (i=0; i<PINS_COUNT; i++)
   80d36:	2b4f      	cmp	r3, #79	; 0x4f
   80d38:	d1fb      	bne.n	80d32 <analogOutputInit+0x6>
		pinEnabled[i] = 0;
}
   80d3a:	4770      	bx	lr
   80d3c:	20070224 	.word	0x20070224

00080d40 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
   80d40:	4770      	bx	lr

00080d42 <sysTickHook>:
 * handler provided by Arduino.
 */
static int __false() {
	// Return false
	return 0;
}
   80d42:	2000      	movs	r0, #0
   80d44:	4770      	bx	lr

00080d46 <pendSVHook>:
 * PendSV hook
 *
 * These functions are called from SVC handler, and PensSV handler.
 * Default action is halting.
 */
static void __halt() {
   80d46:	e7fe      	b.n	80d46 <pendSVHook>

00080d48 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   80d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d4a:	4606      	mov	r6, r0
   80d4c:	460c      	mov	r4, r1
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
   80d4e:	188f      	adds	r7, r1, r2
{
  size_t n = 0;
   80d50:	2500      	movs	r5, #0
  while (size--) {
   80d52:	e006      	b.n	80d62 <_ZN5Print5writeEPKhj+0x1a>
    n += write(*buffer++);
   80d54:	6833      	ldr	r3, [r6, #0]
   80d56:	4630      	mov	r0, r6
   80d58:	681b      	ldr	r3, [r3, #0]
   80d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
   80d5e:	4798      	blx	r3
   80d60:	182d      	adds	r5, r5, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   80d62:	42bc      	cmp	r4, r7
   80d64:	d1f6      	bne.n	80d54 <_ZN5Print5writeEPKhj+0xc>
    n += write(*buffer++);
  }
  return n;
}
   80d66:	4628      	mov	r0, r5
   80d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00080d6a <_ZN10RingBufferC1Ev>:
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
   80d6a:	b510      	push	{r4, lr}
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
   80d6c:	2100      	movs	r1, #0
   80d6e:	2240      	movs	r2, #64	; 0x40
*/

#include "RingBuffer.h"
#include <string.h>

RingBuffer::RingBuffer( void )
   80d70:	4604      	mov	r4, r0
{
    memset( _aucBuffer, 0, SERIAL_BUFFER_SIZE ) ;
   80d72:	f000 fd81 	bl	81878 <memset>
    _iHead=0 ;
   80d76:	2300      	movs	r3, #0
   80d78:	6423      	str	r3, [r4, #64]	; 0x40
    _iTail=0 ;
   80d7a:	6463      	str	r3, [r4, #68]	; 0x44
}
   80d7c:	4620      	mov	r0, r4
   80d7e:	bd10      	pop	{r4, pc}

00080d80 <_ZN10RingBuffer10store_charEh>:

void RingBuffer::store_char( uint8_t c )
{
  int i = (uint32_t)(_iHead + 1) % SERIAL_BUFFER_SIZE ;
   80d80:	6c02      	ldr	r2, [r0, #64]	; 0x40
    _iHead=0 ;
    _iTail=0 ;
}

void RingBuffer::store_char( uint8_t c )
{
   80d82:	b510      	push	{r4, lr}
  int i = (uint32_t)(_iHead + 1) % SERIAL_BUFFER_SIZE ;
   80d84:	1c53      	adds	r3, r2, #1

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
   80d86:	6c44      	ldr	r4, [r0, #68]	; 0x44
    _iTail=0 ;
}

void RingBuffer::store_char( uint8_t c )
{
  int i = (uint32_t)(_iHead + 1) % SERIAL_BUFFER_SIZE ;
   80d88:	f003 033f 	and.w	r3, r3, #63	; 0x3f

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if ( i != _iTail )
   80d8c:	42a3      	cmp	r3, r4
  {
    _aucBuffer[_iHead] = c ;
   80d8e:	bf1c      	itt	ne
   80d90:	5481      	strbne	r1, [r0, r2]
    _iHead = i ;
   80d92:	6403      	strne	r3, [r0, #64]	; 0x40
   80d94:	bd10      	pop	{r4, pc}

00080d96 <_ZN10USARTClasscvbEv>:
#elif defined __ICCARM__ /* IAR Ewarm 5.41+ */
//    virtual void write( const char *str ) ;
//    virtual void write( const uint8_t *buffer, size_t size ) ;
#endif

    operator bool() { return true; }; // USART always active
   80d96:	2001      	movs	r0, #1
   80d98:	4770      	bx	lr

00080d9a <_ZN10USARTClass9availableEv>:
  pmc_disable_periph_clk( _dwId ) ;
}

int USARTClass::available( void )
{
  return (uint32_t)(SERIAL_BUFFER_SIZE + _rx_buffer->_iHead - _rx_buffer->_iTail) % SERIAL_BUFFER_SIZE ;
   80d9a:	6903      	ldr	r3, [r0, #16]
   80d9c:	6c18      	ldr	r0, [r3, #64]	; 0x40
   80d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   80da0:	1ac0      	subs	r0, r0, r3
}
   80da2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   80da6:	4770      	bx	lr

00080da8 <_ZN10USARTClass4peekEv>:

int USARTClass::peek( void )
{
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   80da8:	6903      	ldr	r3, [r0, #16]
   80daa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80dac:	6c19      	ldr	r1, [r3, #64]	; 0x40
   80dae:	4291      	cmp	r1, r2
    return -1 ;

  return _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   80db0:	bf14      	ite	ne
   80db2:	5c98      	ldrbne	r0, [r3, r2]
}

int USARTClass::peek( void )
{
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
    return -1 ;
   80db4:	f04f 30ff 	moveq.w	r0, #4294967295

  return _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
}
   80db8:	4770      	bx	lr

00080dba <_ZN10USARTClass4readEv>:

int USARTClass::read( void )
{
  // if the head isn't ahead of the tail, we don't have any characters
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   80dba:	6903      	ldr	r3, [r0, #16]
   80dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80dbe:	6c19      	ldr	r1, [r3, #64]	; 0x40
   80dc0:	4291      	cmp	r1, r2
   80dc2:	d005      	beq.n	80dd0 <_ZN10USARTClass4readEv+0x16>
    return -1 ;

  uint8_t uc = _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   80dc4:	5c98      	ldrb	r0, [r3, r2]
  _rx_buffer->_iTail = (unsigned int)(_rx_buffer->_iTail + 1) % SERIAL_BUFFER_SIZE ;
   80dc6:	3201      	adds	r2, #1
   80dc8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   80dcc:	645a      	str	r2, [r3, #68]	; 0x44
  return uc ;
   80dce:	4770      	bx	lr

int USARTClass::read( void )
{
  // if the head isn't ahead of the tail, we don't have any characters
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
    return -1 ;
   80dd0:	f04f 30ff 	mov.w	r0, #4294967295

  uint8_t uc = _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
  _rx_buffer->_iTail = (unsigned int)(_rx_buffer->_iTail + 1) % SERIAL_BUFFER_SIZE ;
  return uc ;
}
   80dd4:	4770      	bx	lr

00080dd6 <_ZN10USARTClass5flushEv>:

void USARTClass::flush( void )
{
  // Wait for transmission to complete
  while ((_pUsart->US_CSR & US_CSR_TXRDY) != US_CSR_TXRDY)
   80dd6:	6942      	ldr	r2, [r0, #20]
   80dd8:	6953      	ldr	r3, [r2, #20]
   80dda:	079b      	lsls	r3, r3, #30
   80ddc:	d5fc      	bpl.n	80dd8 <_ZN10USARTClass5flushEv+0x2>
	;
}
   80dde:	4770      	bx	lr

00080de0 <_ZN10USARTClass5writeEh>:

size_t USARTClass::write( const uint8_t uc_data )
{
  // Check if the transmitter is ready
  while ((_pUsart->US_CSR & US_CSR_TXRDY) != US_CSR_TXRDY)
   80de0:	6943      	ldr	r3, [r0, #20]
   80de2:	695a      	ldr	r2, [r3, #20]
   80de4:	0792      	lsls	r2, r2, #30
   80de6:	d5fc      	bpl.n	80de2 <_ZN10USARTClass5writeEh+0x2>
    ;

  // Send character
  _pUsart->US_THR = uc_data ;
   80de8:	61d9      	str	r1, [r3, #28]
  return 1;
}
   80dea:	2001      	movs	r0, #1
   80dec:	4770      	bx	lr
	...

00080df0 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer>:
#include <string.h>
#include "USARTClass.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTClass::USARTClass( Usart* pUsart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
   80df0:	b530      	push	{r4, r5, lr}
   80df2:	2500      	movs	r5, #0
   80df4:	6045      	str	r5, [r0, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   80df6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   80dfa:	6085      	str	r5, [r0, #8]
   80dfc:	4d04      	ldr	r5, [pc, #16]	; (80e10 <_ZN10USARTClassC1EP5Usart4IRQnmP10RingBuffer+0x20>)
   80dfe:	4604      	mov	r4, r0
   80e00:	6005      	str	r5, [r0, #0]
{
  _rx_buffer = pRx_buffer ;
   80e02:	9d03      	ldr	r5, [sp, #12]

  _pUsart=pUsart ;
   80e04:	6141      	str	r1, [r0, #20]

// Constructors ////////////////////////////////////////////////////////////////

USARTClass::USARTClass( Usart* pUsart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
{
  _rx_buffer = pRx_buffer ;
   80e06:	6105      	str	r5, [r0, #16]

  _pUsart=pUsart ;
  _dwIrq=dwIrq ;
   80e08:	7602      	strb	r2, [r0, #24]
  _dwId=dwId ;
   80e0a:	61c3      	str	r3, [r0, #28]
}
   80e0c:	bd30      	pop	{r4, r5, pc}
   80e0e:	bf00      	nop
   80e10:	00082510 	.word	0x00082510

00080e14 <_ZN10USARTClass10IrqHandlerEv>:
  _pUsart->US_THR = uc_data ;
  return 1;
}

void USARTClass::IrqHandler( void )
{
   80e14:	b538      	push	{r3, r4, r5, lr}
  uint32_t status = _pUsart->US_CSR;
   80e16:	6943      	ldr	r3, [r0, #20]
  _pUsart->US_THR = uc_data ;
  return 1;
}

void USARTClass::IrqHandler( void )
{
   80e18:	4604      	mov	r4, r0
  uint32_t status = _pUsart->US_CSR;
   80e1a:	695d      	ldr	r5, [r3, #20]

  // Did we receive data ?
  if ((status & US_CSR_RXRDY) == US_CSR_RXRDY)
   80e1c:	07e9      	lsls	r1, r5, #31
   80e1e:	d504      	bpl.n	80e2a <_ZN10USARTClass10IrqHandlerEv+0x16>
    _rx_buffer->store_char( _pUsart->US_RHR ) ;
   80e20:	6999      	ldr	r1, [r3, #24]
   80e22:	6900      	ldr	r0, [r0, #16]
   80e24:	b2c9      	uxtb	r1, r1
   80e26:	f7ff ffab 	bl	80d80 <_ZN10RingBuffer10store_charEh>

  // Acknowledge errors
  if ((status & US_CSR_OVRE) == US_CSR_OVRE ||
   80e2a:	f015 0f60 	tst.w	r5, #96	; 0x60
   80e2e:	d004      	beq.n	80e3a <_ZN10USARTClass10IrqHandlerEv+0x26>
		  (status & US_CSR_FRAME) == US_CSR_FRAME)
  {
	// TODO: error reporting outside ISR
    _pUsart->US_CR |= US_CR_RSTSTA;
   80e30:	6963      	ldr	r3, [r4, #20]
   80e32:	681a      	ldr	r2, [r3, #0]
   80e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80e38:	601a      	str	r2, [r3, #0]
   80e3a:	bd38      	pop	{r3, r4, r5, pc}

00080e3c <_ZN9UARTClasscvbEv>:
#elif defined __ICCARM__ /* IAR Ewarm 5.41+ */
//    virtual void write( const char *str ) ;
//    virtual void write( const uint8_t *buffer, size_t size ) ;
#endif

    operator bool() { return true; }; // UART always active
   80e3c:	2001      	movs	r0, #1
   80e3e:	4770      	bx	lr

00080e40 <_ZN9UARTClass9availableEv>:
  pmc_disable_periph_clk( _dwId ) ;
}

int UARTClass::available( void )
{
  return (uint32_t)(SERIAL_BUFFER_SIZE + _rx_buffer->_iHead - _rx_buffer->_iTail) % SERIAL_BUFFER_SIZE ;
   80e40:	6903      	ldr	r3, [r0, #16]
   80e42:	6c18      	ldr	r0, [r3, #64]	; 0x40
   80e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   80e46:	1ac0      	subs	r0, r0, r3
}
   80e48:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   80e4c:	4770      	bx	lr

00080e4e <_ZN9UARTClass4peekEv>:

int UARTClass::peek( void )
{
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   80e4e:	6903      	ldr	r3, [r0, #16]
   80e50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80e52:	6c19      	ldr	r1, [r3, #64]	; 0x40
   80e54:	4291      	cmp	r1, r2
    return -1 ;

  return _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   80e56:	bf14      	ite	ne
   80e58:	5c98      	ldrbne	r0, [r3, r2]
}

int UARTClass::peek( void )
{
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
    return -1 ;
   80e5a:	f04f 30ff 	moveq.w	r0, #4294967295

  return _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
}
   80e5e:	4770      	bx	lr

00080e60 <_ZN9UARTClass4readEv>:

int UARTClass::read( void )
{
  // if the head isn't ahead of the tail, we don't have any characters
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
   80e60:	6903      	ldr	r3, [r0, #16]
   80e62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   80e64:	6c19      	ldr	r1, [r3, #64]	; 0x40
   80e66:	4291      	cmp	r1, r2
   80e68:	d005      	beq.n	80e76 <_ZN9UARTClass4readEv+0x16>
    return -1 ;

  uint8_t uc = _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
   80e6a:	5c98      	ldrb	r0, [r3, r2]
  _rx_buffer->_iTail = (unsigned int)(_rx_buffer->_iTail + 1) % SERIAL_BUFFER_SIZE ;
   80e6c:	3201      	adds	r2, #1
   80e6e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   80e72:	645a      	str	r2, [r3, #68]	; 0x44
  return uc ;
   80e74:	4770      	bx	lr

int UARTClass::read( void )
{
  // if the head isn't ahead of the tail, we don't have any characters
  if ( _rx_buffer->_iHead == _rx_buffer->_iTail )
    return -1 ;
   80e76:	f04f 30ff 	mov.w	r0, #4294967295

  uint8_t uc = _rx_buffer->_aucBuffer[_rx_buffer->_iTail] ;
  _rx_buffer->_iTail = (unsigned int)(_rx_buffer->_iTail + 1) % SERIAL_BUFFER_SIZE ;
  return uc ;
}
   80e7a:	4770      	bx	lr

00080e7c <_ZN9UARTClass5flushEv>:

void UARTClass::flush( void )
{
  // Wait for transmission to complete
  while ((_pUart->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80e7c:	6942      	ldr	r2, [r0, #20]
   80e7e:	6953      	ldr	r3, [r2, #20]
   80e80:	079b      	lsls	r3, r3, #30
   80e82:	d5fc      	bpl.n	80e7e <_ZN9UARTClass5flushEv+0x2>
    ;
}
   80e84:	4770      	bx	lr

00080e86 <_ZN9UARTClass5writeEh>:

size_t UARTClass::write( const uint8_t uc_data )
{
  // Check if the transmitter is ready
  while ((_pUart->UART_SR & UART_SR_TXRDY) != UART_SR_TXRDY)
   80e86:	6943      	ldr	r3, [r0, #20]
   80e88:	695a      	ldr	r2, [r3, #20]
   80e8a:	0792      	lsls	r2, r2, #30
   80e8c:	d5fc      	bpl.n	80e88 <_ZN9UARTClass5writeEh+0x2>
    ;

  // Send character
  _pUart->UART_THR = uc_data;
   80e8e:	61d9      	str	r1, [r3, #28]
  return 1;
}
   80e90:	2001      	movs	r0, #1
   80e92:	4770      	bx	lr

00080e94 <_ZN9UARTClassC1EP4Uart4IRQnmP10RingBuffer>:
#include <string.h>
#include "UARTClass.h"

// Constructors ////////////////////////////////////////////////////////////////

UARTClass::UARTClass( Uart* pUart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
   80e94:	b530      	push	{r4, r5, lr}
   80e96:	2500      	movs	r5, #0
   80e98:	6045      	str	r5, [r0, #4]
   80e9a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   80e9e:	6085      	str	r5, [r0, #8]
   80ea0:	4d04      	ldr	r5, [pc, #16]	; (80eb4 <_ZN9UARTClassC1EP4Uart4IRQnmP10RingBuffer+0x20>)
   80ea2:	4604      	mov	r4, r0
   80ea4:	6005      	str	r5, [r0, #0]
{
  _rx_buffer = pRx_buffer ;
   80ea6:	9d03      	ldr	r5, [sp, #12]

  _pUart=pUart ;
   80ea8:	6141      	str	r1, [r0, #20]

// Constructors ////////////////////////////////////////////////////////////////

UARTClass::UARTClass( Uart* pUart, IRQn_Type dwIrq, uint32_t dwId, RingBuffer* pRx_buffer )
{
  _rx_buffer = pRx_buffer ;
   80eaa:	6105      	str	r5, [r0, #16]

  _pUart=pUart ;
  _dwIrq=dwIrq ;
   80eac:	7602      	strb	r2, [r0, #24]
  _dwId=dwId ;
   80eae:	61c3      	str	r3, [r0, #28]
}
   80eb0:	bd30      	pop	{r4, r5, pc}
   80eb2:	bf00      	nop
   80eb4:	00082538 	.word	0x00082538

00080eb8 <_ZN9UARTClass10IrqHandlerEv>:
  _pUart->UART_THR = uc_data;
  return 1;
}

void UARTClass::IrqHandler( void )
{
   80eb8:	b538      	push	{r3, r4, r5, lr}
  uint32_t status = _pUart->UART_SR;
   80eba:	6943      	ldr	r3, [r0, #20]
  _pUart->UART_THR = uc_data;
  return 1;
}

void UARTClass::IrqHandler( void )
{
   80ebc:	4604      	mov	r4, r0
  uint32_t status = _pUart->UART_SR;
   80ebe:	695d      	ldr	r5, [r3, #20]

  // Did we receive data ?
  if ((status & UART_SR_RXRDY) == UART_SR_RXRDY)
   80ec0:	07e9      	lsls	r1, r5, #31
   80ec2:	d504      	bpl.n	80ece <_ZN9UARTClass10IrqHandlerEv+0x16>
    _rx_buffer->store_char(_pUart->UART_RHR);
   80ec4:	6999      	ldr	r1, [r3, #24]
   80ec6:	6900      	ldr	r0, [r0, #16]
   80ec8:	b2c9      	uxtb	r1, r1
   80eca:	f7ff ff59 	bl	80d80 <_ZN10RingBuffer10store_charEh>

  // Acknowledge errors
  if ((status & UART_SR_OVRE) == UART_SR_OVRE ||
   80ece:	f015 0f60 	tst.w	r5, #96	; 0x60
   80ed2:	d004      	beq.n	80ede <_ZN9UARTClass10IrqHandlerEv+0x26>
		  (status & UART_SR_FRAME) == UART_SR_FRAME)
  {
	// TODO: error reporting outside ISR
    _pUart->UART_CR |= UART_CR_RSTSTA;
   80ed4:	6963      	ldr	r3, [r4, #20]
   80ed6:	681a      	ldr	r2, [r3, #0]
   80ed8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   80edc:	601a      	str	r2, [r3, #0]
   80ede:	bd38      	pop	{r3, r4, r5, pc}

00080ee0 <_ZN7Serial_9availableEv>:
}

int Serial_::available(void)
{
	ring_buffer *buffer = &cdc_rx_buffer;
	return (unsigned int)(CDC_SERIAL_BUFFER_SIZE + buffer->head - buffer->tail) % CDC_SERIAL_BUFFER_SIZE;
   80ee0:	4b04      	ldr	r3, [pc, #16]	; (80ef4 <_ZN7Serial_9availableEv+0x14>)
   80ee2:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
   80ee6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
   80eea:	1ac0      	subs	r0, r0, r3
   80eec:	05c0      	lsls	r0, r0, #23
}
   80eee:	0dc0      	lsrs	r0, r0, #23
   80ef0:	4770      	bx	lr
   80ef2:	bf00      	nop
   80ef4:	20070274 	.word	0x20070274

00080ef8 <_ZN7Serial_4peekEv>:

int Serial_::peek(void)
{
	ring_buffer *buffer = &cdc_rx_buffer;

	if (buffer->head == buffer->tail)
   80ef8:	4b06      	ldr	r3, [pc, #24]	; (80f14 <_ZN7Serial_4peekEv+0x1c>)
   80efa:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   80efe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   80f02:	4291      	cmp	r1, r2
   80f04:	d003      	beq.n	80f0e <_ZN7Serial_4peekEv+0x16>
	{
		return -1;
	}
	else
	{
		return buffer->buffer[buffer->tail];
   80f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   80f0a:	5c98      	ldrb	r0, [r3, r2]
   80f0c:	4770      	bx	lr
{
	ring_buffer *buffer = &cdc_rx_buffer;

	if (buffer->head == buffer->tail)
	{
		return -1;
   80f0e:	f04f 30ff 	mov.w	r0, #4294967295
	}
	else
	{
		return buffer->buffer[buffer->tail];
	}
}
   80f12:	4770      	bx	lr
   80f14:	20070274 	.word	0x20070274

00080f18 <_ZN7Serial_5writeEh>:
	}
	setWriteError();
	return 0;
}

size_t Serial_::write(uint8_t c) {
   80f18:	b513      	push	{r0, r1, r4, lr}
	return write(&c, 1);
   80f1a:	6802      	ldr	r2, [r0, #0]
	}
	setWriteError();
	return 0;
}

size_t Serial_::write(uint8_t c) {
   80f1c:	ab02      	add	r3, sp, #8
   80f1e:	f803 1d01 	strb.w	r1, [r3, #-1]!
	return write(&c, 1);
   80f22:	6854      	ldr	r4, [r2, #4]
   80f24:	4619      	mov	r1, r3
   80f26:	2201      	movs	r2, #1
   80f28:	47a0      	blx	r4
}
   80f2a:	bd1c      	pop	{r2, r3, r4, pc}

00080f2c <_ZN7Serial_5flushEv>:
	}
}

void Serial_::flush(void)
{
	USBD_Flush(CDC_TX);
   80f2c:	2003      	movs	r0, #3
   80f2e:	f7ff bcf1 	b.w	80914 <_Z10USBD_Flushm>
	...

00080f34 <_ZN7Serial_4readEv>:
		return buffer->buffer[buffer->tail];
	}
}

int Serial_::read(void)
{
   80f34:	b538      	push	{r3, r4, r5, lr}
	ring_buffer *buffer = &cdc_rx_buffer;

	// if the head isn't ahead of the tail, we don't have any characters
	if (buffer->head == buffer->tail)
   80f36:	4b0f      	ldr	r3, [pc, #60]	; (80f74 <_ZN7Serial_4readEv+0x40>)
		return buffer->buffer[buffer->tail];
	}
}

int Serial_::read(void)
{
   80f38:	4604      	mov	r4, r0
	ring_buffer *buffer = &cdc_rx_buffer;

	// if the head isn't ahead of the tail, we don't have any characters
	if (buffer->head == buffer->tail)
   80f3a:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   80f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   80f42:	4291      	cmp	r1, r2
   80f44:	d013      	beq.n	80f6e <_ZN7Serial_4readEv+0x3a>
	{
		return -1;
	}
	else
	{
		unsigned char c = buffer->buffer[buffer->tail];
   80f46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
		buffer->tail = (unsigned int)(buffer->tail + 1) % CDC_SERIAL_BUFFER_SIZE;
		if (USBD_Available(CDC_RX))
   80f4a:	2002      	movs	r0, #2
	{
		return -1;
	}
	else
	{
		unsigned char c = buffer->buffer[buffer->tail];
   80f4c:	5c9d      	ldrb	r5, [r3, r2]
		buffer->tail = (unsigned int)(buffer->tail + 1) % CDC_SERIAL_BUFFER_SIZE;
   80f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
   80f52:	3201      	adds	r2, #1
   80f54:	05d2      	lsls	r2, r2, #23
   80f56:	0dd2      	lsrs	r2, r2, #23
   80f58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (USBD_Available(CDC_RX))
   80f5c:	f7ff f9bc 	bl	802d8 <_Z14USBD_Availablem>
   80f60:	b118      	cbz	r0, 80f6a <_ZN7Serial_4readEv+0x36>
			accept();
   80f62:	6823      	ldr	r3, [r4, #0]
   80f64:	4620      	mov	r0, r4
   80f66:	699b      	ldr	r3, [r3, #24]
   80f68:	4798      	blx	r3
		return c;
   80f6a:	4628      	mov	r0, r5
   80f6c:	bd38      	pop	{r3, r4, r5, pc}
	ring_buffer *buffer = &cdc_rx_buffer;

	// if the head isn't ahead of the tail, we don't have any characters
	if (buffer->head == buffer->tail)
	{
		return -1;
   80f6e:	f04f 30ff 	mov.w	r0, #4294967295
		buffer->tail = (unsigned int)(buffer->tail + 1) % CDC_SERIAL_BUFFER_SIZE;
		if (USBD_Available(CDC_RX))
			accept();
		return c;
	}
}
   80f72:	bd38      	pop	{r3, r4, r5, pc}
   80f74:	20070274 	.word	0x20070274

00080f78 <_ZN7Serial_6acceptEv>:
void Serial_::end(void)
{
}

void Serial_::accept(void)
{
   80f78:	b538      	push	{r3, r4, r5, lr}
	static uint32_t guard = 0;

	// synchronized access to guard
	do {
		if (__LDREXW(&guard) != 0) {
   80f7a:	4b16      	ldr	r3, [pc, #88]	; (80fd4 <_ZN7Serial_6acceptEv+0x5c>)
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
   80f7c:	2101      	movs	r1, #1
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   80f7e:	e853 2f00 	ldrex	r2, [r3]
   80f82:	b112      	cbz	r2, 80f8a <_ZN7Serial_6acceptEv+0x12>
    This function removes the exclusive lock which is created by LDREX.

 */
__attribute__( ( always_inline ) ) static __INLINE void __CLREX(void)
{
  __ASM volatile ("clrex");
   80f84:	f3bf 8f2f 	clrex
   80f88:	bd38      	pop	{r3, r4, r5, pc}
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
   80f8a:	e843 1200 	strex	r2, r1, [r3]
void Serial_::accept(void)
{
	static uint32_t guard = 0;

	// synchronized access to guard
	do {
   80f8e:	2a00      	cmp	r2, #0
   80f90:	d1f5      	bne.n	80f7e <_ZN7Serial_6acceptEv+0x6>
			return;  // busy
		}
	} while (__STREXW(1, &guard) != 0); // retry until write succeed

	ring_buffer *buffer = &cdc_rx_buffer;
	uint32_t i = (uint32_t)(buffer->head+1) % CDC_SERIAL_BUFFER_SIZE;
   80f92:	4d11      	ldr	r5, [pc, #68]	; (80fd8 <_ZN7Serial_6acceptEv+0x60>)
   80f94:	f8d5 4200 	ldr.w	r4, [r5, #512]	; 0x200
   80f98:	e010      	b.n	80fbc <_ZN7Serial_6acceptEv+0x44>
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
		uint32_t c;
		if (!USBD_Available(CDC_RX)) {
   80f9a:	2002      	movs	r0, #2
   80f9c:	f7ff f99c 	bl	802d8 <_Z14USBD_Availablem>
   80fa0:	b920      	cbnz	r0, 80fac <_ZN7Serial_6acceptEv+0x34>
			udd_ack_fifocon(CDC_RX);
   80fa2:	4b0e      	ldr	r3, [pc, #56]	; (80fdc <_ZN7Serial_6acceptEv+0x64>)
   80fa4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   80fa8:	601a      	str	r2, [r3, #0]
			break;
   80faa:	e00e      	b.n	80fca <_ZN7Serial_6acceptEv+0x52>
		}
		c = USBD_Recv(CDC_RX);
   80fac:	2002      	movs	r0, #2
   80fae:	f7ff f9e5 	bl	8037c <_Z9USBD_Recvm>
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
   80fb2:	f8d5 3200 	ldr.w	r3, [r5, #512]	; 0x200
		buffer->head = i;
   80fb6:	f8c5 4200 	str.w	r4, [r5, #512]	; 0x200
			udd_ack_fifocon(CDC_RX);
			break;
		}
		c = USBD_Recv(CDC_RX);
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
   80fba:	54e8      	strb	r0, [r5, r3]
		buffer->head = i;

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
   80fbc:	3401      	adds	r4, #1
   80fbe:	05e4      	lsls	r4, r4, #23

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
   80fc0:	f8d5 3204 	ldr.w	r3, [r5, #516]	; 0x204
		c = USBD_Recv(CDC_RX);
		// c = UDD_Recv8(CDC_RX & 0xF);
		buffer->buffer[buffer->head] = c;
		buffer->head = i;

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
   80fc4:	0de4      	lsrs	r4, r4, #23

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	while (i != buffer->tail) {
   80fc6:	429c      	cmp	r4, r3
   80fc8:	d1e7      	bne.n	80f9a <_ZN7Serial_6acceptEv+0x22>

		i = (i + 1) % CDC_SERIAL_BUFFER_SIZE;
	}

	// release the guard
	guard = 0;
   80fca:	4b02      	ldr	r3, [pc, #8]	; (80fd4 <_ZN7Serial_6acceptEv+0x5c>)
   80fcc:	2200      	movs	r2, #0
   80fce:	601a      	str	r2, [r3, #0]
   80fd0:	bd38      	pop	{r3, r4, r5, pc}
   80fd2:	bf00      	nop
   80fd4:	2007047c 	.word	0x2007047c
   80fd8:	20070274 	.word	0x20070274
   80fdc:	400ac228 	.word	0x400ac228

00080fe0 <_ZN7Serial_5writeEPKhj>:
{
	USBD_Flush(CDC_TX);
}

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
   80fe0:	b510      	push	{r4, lr}
	 the connection is closed are lost - just like with a UART. */

	// TODO - ZE - check behavior on different OSes and test what happens if an
	// open connection isn't broken cleanly (cable is yanked out, host dies
	// or locks up, or host virtual serial port hangs)
	if (_usbLineInfo.lineState > 0)
   80fe2:	4b08      	ldr	r3, [pc, #32]	; (81004 <_ZN7Serial_5writeEPKhj+0x24>)
{
	USBD_Flush(CDC_TX);
}

size_t Serial_::write(const uint8_t *buffer, size_t size)
{
   80fe4:	4604      	mov	r4, r0
	 the connection is closed are lost - just like with a UART. */

	// TODO - ZE - check behavior on different OSes and test what happens if an
	// open connection isn't broken cleanly (cable is yanked out, host dies
	// or locks up, or host virtual serial port hangs)
	if (_usbLineInfo.lineState > 0)
   80fe6:	79d8      	ldrb	r0, [r3, #7]
   80fe8:	b140      	cbz	r0, 80ffc <_ZN7Serial_5writeEPKhj+0x1c>
	{
		int r = USBD_Send(CDC_TX, buffer, size);
   80fea:	2003      	movs	r0, #3
   80fec:	f7ff f9d6 	bl	8039c <_Z9USBD_SendmPKvm>

		if (r > 0)
   80ff0:	2800      	cmp	r0, #0
   80ff2:	dc05      	bgt.n	81000 <_ZN7Serial_5writeEPKhj+0x20>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   80ff4:	2301      	movs	r3, #1
   80ff6:	6063      	str	r3, [r4, #4]
		{
			return r;
		} else
		{
			setWriteError();
			return 0;
   80ff8:	2000      	movs	r0, #0
   80ffa:	bd10      	pop	{r4, pc}
   80ffc:	2301      	movs	r3, #1
   80ffe:	6063      	str	r3, [r4, #4]
		}
	}
	setWriteError();
	return 0;
}
   81000:	bd10      	pop	{r4, pc}
   81002:	bf00      	nop
   81004:	2007003c 	.word	0x2007003c

00081008 <_Z16CDC_GetInterfacePh>:
};
_Pragma("pack()")

int WEAK CDC_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   81008:	7803      	ldrb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
   8100a:	4903      	ldr	r1, [pc, #12]	; (81018 <_Z16CDC_GetInterfacePh+0x10>)
};
_Pragma("pack()")

int WEAK CDC_GetInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   8100c:	3302      	adds	r3, #2
   8100e:	7003      	strb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
   81010:	2242      	movs	r2, #66	; 0x42
   81012:	2000      	movs	r0, #0
   81014:	f7ff b9e8 	b.w	803e8 <_Z16USBD_SendControlhPKvm>
   81018:	000825c2 	.word	0x000825c2

0008101c <_Z21CDC_GetOtherInterfacePh>:
}

int WEAK CDC_GetOtherInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   8101c:	7803      	ldrb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
   8101e:	4903      	ldr	r1, [pc, #12]	; (8102c <_Z21CDC_GetOtherInterfacePh+0x10>)
	return USBD_SendControl(0,&_cdcInterface,sizeof(_cdcInterface));
}

int WEAK CDC_GetOtherInterface(uint8_t* interfaceNum)
{
	interfaceNum[0] += 2;	// uses 2
   81020:	3302      	adds	r3, #2
   81022:	7003      	strb	r3, [r0, #0]
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
   81024:	2242      	movs	r2, #66	; 0x42
   81026:	2000      	movs	r0, #0
   81028:	f7ff b9de 	b.w	803e8 <_Z16USBD_SendControlhPKvm>
   8102c:	00082580 	.word	0x00082580

00081030 <_Z9CDC_SetupR5Setup>:
}

bool WEAK CDC_Setup(Setup& setup)
{
   81030:	b508      	push	{r3, lr}
	uint8_t r = setup.bRequest;
	uint8_t requestType = setup.bmRequestType;
   81032:	7802      	ldrb	r2, [r0, #0]
	return USBD_SendControl(0,&_cdcOtherInterface,sizeof(_cdcOtherInterface));
}

bool WEAK CDC_Setup(Setup& setup)
{
	uint8_t r = setup.bRequest;
   81034:	7843      	ldrb	r3, [r0, #1]
	uint8_t requestType = setup.bmRequestType;

	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
   81036:	2aa1      	cmp	r2, #161	; 0xa1
   81038:	d107      	bne.n	8104a <_Z9CDC_SetupR5Setup+0x1a>
	{
		if (CDC_GET_LINE_CODING == r)
		{
			USBD_SendControl(0,(void*)&_usbLineInfo,7);
   8103a:	2000      	movs	r0, #0
	uint8_t r = setup.bRequest;
	uint8_t requestType = setup.bmRequestType;

	if (REQUEST_DEVICETOHOST_CLASS_INTERFACE == requestType)
	{
		if (CDC_GET_LINE_CODING == r)
   8103c:	2b21      	cmp	r3, #33	; 0x21
   8103e:	d120      	bne.n	81082 <_Z9CDC_SetupR5Setup+0x52>
		{
			USBD_SendControl(0,(void*)&_usbLineInfo,7);
   81040:	4912      	ldr	r1, [pc, #72]	; (8108c <_Z9CDC_SetupR5Setup+0x5c>)
   81042:	2207      	movs	r2, #7
   81044:	f7ff f9d0 	bl	803e8 <_Z16USBD_SendControlhPKvm>
   81048:	e01e      	b.n	81088 <_Z9CDC_SetupR5Setup+0x58>
			return true;
		}
	}

	if (REQUEST_HOSTTODEVICE_CLASS_INTERFACE == requestType)
   8104a:	2a21      	cmp	r2, #33	; 0x21
   8104c:	d11a      	bne.n	81084 <_Z9CDC_SetupR5Setup+0x54>
	{
		if (CDC_SET_LINE_CODING == r)
   8104e:	2b20      	cmp	r3, #32
   81050:	d104      	bne.n	8105c <_Z9CDC_SetupR5Setup+0x2c>
		{
			USBD_RecvControl((void*)&_usbLineInfo,7);
   81052:	2107      	movs	r1, #7
   81054:	480d      	ldr	r0, [pc, #52]	; (8108c <_Z9CDC_SetupR5Setup+0x5c>)
   81056:	f7ff fa05 	bl	80464 <_Z16USBD_RecvControlPvm>
   8105a:	e015      	b.n	81088 <_Z9CDC_SetupR5Setup+0x58>
			return true;
		}

		if (CDC_SET_CONTROL_LINE_STATE == r)
   8105c:	2b22      	cmp	r3, #34	; 0x22
   8105e:	d111      	bne.n	81084 <_Z9CDC_SetupR5Setup+0x54>
		{
			_usbLineInfo.lineState = setup.wValueL;
   81060:	7882      	ldrb	r2, [r0, #2]
   81062:	4b0a      	ldr	r3, [pc, #40]	; (8108c <_Z9CDC_SetupR5Setup+0x5c>)
   81064:	71da      	strb	r2, [r3, #7]
			// auto-reset into the bootloader is triggered when the port, already
			// open at 1200 bps, is closed.
			if (1200 == _usbLineInfo.dwDTERate)
   81066:	681a      	ldr	r2, [r3, #0]
   81068:	f5b2 6f96 	cmp.w	r2, #1200	; 0x4b0
   8106c:	d10c      	bne.n	81088 <_Z9CDC_SetupR5Setup+0x58>
			{
				// We check DTR state to determine if host port is open (bit 0 of lineState).
				if ((_usbLineInfo.lineState & 0x01) == 0)
   8106e:	79db      	ldrb	r3, [r3, #7]
   81070:	07db      	lsls	r3, r3, #31
   81072:	d403      	bmi.n	8107c <_Z9CDC_SetupR5Setup+0x4c>
					initiateReset(250);
   81074:	20fa      	movs	r0, #250	; 0xfa
   81076:	f7ff f8e9 	bl	8024c <initiateReset>
   8107a:	e005      	b.n	81088 <_Z9CDC_SetupR5Setup+0x58>
				else
					cancelReset();
   8107c:	f7ff f8ec 	bl	80258 <cancelReset>
   81080:	e002      	b.n	81088 <_Z9CDC_SetupR5Setup+0x58>
   81082:	bd08      	pop	{r3, pc}
			}
			return true;
		}
	}
	return false;
   81084:	2000      	movs	r0, #0
   81086:	bd08      	pop	{r3, pc}
				if ((_usbLineInfo.lineState & 0x01) == 0)
					initiateReset(250);
				else
					cancelReset();
			}
			return true;
   81088:	2001      	movs	r0, #1
		}
	}
	return false;
}
   8108a:	bd08      	pop	{r3, pc}
   8108c:	2007003c 	.word	0x2007003c

00081090 <_GLOBAL__sub_I_cdc_rx_buffer>:
  public:
    Print() : write_error(0) {}
   81090:	4b04      	ldr	r3, [pc, #16]	; (810a4 <_GLOBAL__sub_I_cdc_rx_buffer+0x14>)
   81092:	2200      	movs	r2, #0
   81094:	605a      	str	r2, [r3, #4]
   81096:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8109a:	609a      	str	r2, [r3, #8]

//================================================================================
//================================================================================
//	Serial over CDC (Serial1 is the physical port)

class Serial_ : public Stream
   8109c:	4a02      	ldr	r2, [pc, #8]	; (810a8 <_GLOBAL__sub_I_cdc_rx_buffer+0x18>)
   8109e:	601a      	str	r2, [r3, #0]
   810a0:	4770      	bx	lr
   810a2:	bf00      	nop
   810a4:	20070480 	.word	0x20070480
   810a8:	00082560 	.word	0x00082560

000810ac <PIO_DisableInterrupt>:
   810ac:	6441      	str	r1, [r0, #68]	; 0x44
   810ae:	4770      	bx	lr

000810b0 <PIO_PullUp>:
   810b0:	b10a      	cbz	r2, 810b6 <PIO_PullUp+0x6>
   810b2:	6641      	str	r1, [r0, #100]	; 0x64
   810b4:	4770      	bx	lr
   810b6:	6601      	str	r1, [r0, #96]	; 0x60
   810b8:	4770      	bx	lr

000810ba <PIO_SetPeripheral>:
   810ba:	6442      	str	r2, [r0, #68]	; 0x44
   810bc:	2905      	cmp	r1, #5
   810be:	d80f      	bhi.n	810e0 <PIO_SetPeripheral+0x26>
   810c0:	e8df f001 	tbb	[pc, r1]
   810c4:	0f0a030f 	.word	0x0f0a030f
   810c8:	0f0f      	.short	0x0f0f
   810ca:	6f03      	ldr	r3, [r0, #112]	; 0x70
   810cc:	6f01      	ldr	r1, [r0, #112]	; 0x70
   810ce:	ea01 0303 	and.w	r3, r1, r3
   810d2:	ea23 0302 	bic.w	r3, r3, r2
   810d6:	e002      	b.n	810de <PIO_SetPeripheral+0x24>
   810d8:	6f03      	ldr	r3, [r0, #112]	; 0x70
   810da:	ea42 0303 	orr.w	r3, r2, r3
   810de:	6703      	str	r3, [r0, #112]	; 0x70
   810e0:	6042      	str	r2, [r0, #4]
   810e2:	4770      	bx	lr

000810e4 <PIO_SetInput>:
   810e4:	b570      	push	{r4, r5, r6, lr}
   810e6:	4b0d      	ldr	r3, [pc, #52]	; (8111c <PIO_SetInput+0x38>)
   810e8:	4604      	mov	r4, r0
   810ea:	460d      	mov	r5, r1
   810ec:	4616      	mov	r6, r2
   810ee:	4798      	blx	r3
   810f0:	4620      	mov	r0, r4
   810f2:	4629      	mov	r1, r5
   810f4:	f006 0201 	and.w	r2, r6, #1
   810f8:	4b09      	ldr	r3, [pc, #36]	; (81120 <PIO_SetInput+0x3c>)
   810fa:	4798      	blx	r3
   810fc:	f016 0f0a 	tst.w	r6, #10
   81100:	bf14      	ite	ne
   81102:	6225      	strne	r5, [r4, #32]
   81104:	6265      	streq	r5, [r4, #36]	; 0x24
   81106:	f016 0f02 	tst.w	r6, #2
   8110a:	d102      	bne.n	81112 <PIO_SetInput+0x2e>
   8110c:	f016 0f08 	tst.w	r6, #8
   81110:	d001      	beq.n	81116 <PIO_SetInput+0x32>
   81112:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   81116:	6165      	str	r5, [r4, #20]
   81118:	6025      	str	r5, [r4, #0]
   8111a:	bd70      	pop	{r4, r5, r6, pc}
   8111c:	000810ad 	.word	0x000810ad
   81120:	000810b1 	.word	0x000810b1

00081124 <PIO_SetOutput>:
   81124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81126:	4604      	mov	r4, r0
   81128:	460d      	mov	r5, r1
   8112a:	461f      	mov	r7, r3
   8112c:	4b09      	ldr	r3, [pc, #36]	; (81154 <PIO_SetOutput+0x30>)
   8112e:	4616      	mov	r6, r2
   81130:	4798      	blx	r3
   81132:	4620      	mov	r0, r4
   81134:	4629      	mov	r1, r5
   81136:	9a06      	ldr	r2, [sp, #24]
   81138:	4b07      	ldr	r3, [pc, #28]	; (81158 <PIO_SetOutput+0x34>)
   8113a:	4798      	blx	r3
   8113c:	b10f      	cbz	r7, 81142 <PIO_SetOutput+0x1e>
   8113e:	6525      	str	r5, [r4, #80]	; 0x50
   81140:	e000      	b.n	81144 <PIO_SetOutput+0x20>
   81142:	6565      	str	r5, [r4, #84]	; 0x54
   81144:	b10e      	cbz	r6, 8114a <PIO_SetOutput+0x26>
   81146:	6325      	str	r5, [r4, #48]	; 0x30
   81148:	e000      	b.n	8114c <PIO_SetOutput+0x28>
   8114a:	6365      	str	r5, [r4, #52]	; 0x34
   8114c:	6125      	str	r5, [r4, #16]
   8114e:	6025      	str	r5, [r4, #0]
   81150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81152:	bf00      	nop
   81154:	000810ad 	.word	0x000810ad
   81158:	000810b1 	.word	0x000810b1

0008115c <PIO_Configure>:
   8115c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   8115e:	461f      	mov	r7, r3
   81160:	1e4b      	subs	r3, r1, #1
   81162:	4605      	mov	r5, r0
   81164:	460e      	mov	r6, r1
   81166:	4614      	mov	r4, r2
   81168:	2b04      	cmp	r3, #4
   8116a:	d825      	bhi.n	811b8 <PIO_Configure+0x5c>
   8116c:	e8df f003 	tbb	[pc, r3]
   81170:	16100303 	.word	0x16100303
   81174:	16          	.byte	0x16
   81175:	00          	.byte	0x00
   81176:	4622      	mov	r2, r4
   81178:	4b10      	ldr	r3, [pc, #64]	; (811bc <PIO_Configure+0x60>)
   8117a:	4798      	blx	r3
   8117c:	4628      	mov	r0, r5
   8117e:	4621      	mov	r1, r4
   81180:	4b0f      	ldr	r3, [pc, #60]	; (811c0 <PIO_Configure+0x64>)
   81182:	4798      	blx	r3
   81184:	4628      	mov	r0, r5
   81186:	4621      	mov	r1, r4
   81188:	f007 0201 	and.w	r2, r7, #1
   8118c:	4b0d      	ldr	r3, [pc, #52]	; (811c4 <PIO_Configure+0x68>)
   8118e:	e002      	b.n	81196 <PIO_Configure+0x3a>
   81190:	4b0d      	ldr	r3, [pc, #52]	; (811c8 <PIO_Configure+0x6c>)
   81192:	4621      	mov	r1, r4
   81194:	463a      	mov	r2, r7
   81196:	4798      	blx	r3
   81198:	2001      	movs	r0, #1
   8119a:	e00e      	b.n	811ba <PIO_Configure+0x5e>
   8119c:	f007 0301 	and.w	r3, r7, #1
   811a0:	9300      	str	r3, [sp, #0]
   811a2:	f1a6 0305 	sub.w	r3, r6, #5
   811a6:	425a      	negs	r2, r3
   811a8:	4621      	mov	r1, r4
   811aa:	eb42 0203 	adc.w	r2, r2, r3
   811ae:	4c07      	ldr	r4, [pc, #28]	; (811cc <PIO_Configure+0x70>)
   811b0:	f3c7 0380 	ubfx	r3, r7, #2, #1
   811b4:	47a0      	blx	r4
   811b6:	e7ef      	b.n	81198 <PIO_Configure+0x3c>
   811b8:	2000      	movs	r0, #0
   811ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   811bc:	000810bb 	.word	0x000810bb
   811c0:	000810ad 	.word	0x000810ad
   811c4:	000810b1 	.word	0x000810b1
   811c8:	000810e5 	.word	0x000810e5
   811cc:	00081125 	.word	0x00081125

000811d0 <PIO_GetOutputDataStatus>:
   811d0:	6883      	ldr	r3, [r0, #8]
   811d2:	400b      	ands	r3, r1
   811d4:	d005      	beq.n	811e2 <PIO_GetOutputDataStatus+0x12>
   811d6:	6983      	ldr	r3, [r0, #24]
   811d8:	4219      	tst	r1, r3
   811da:	bf0c      	ite	eq
   811dc:	2000      	moveq	r0, #0
   811de:	2001      	movne	r0, #1
   811e0:	4770      	bx	lr
   811e2:	4618      	mov	r0, r3
   811e4:	4770      	bx	lr
	...

000811e8 <pmc_enable_upll_clock>:
   811e8:	4b04      	ldr	r3, [pc, #16]	; (811fc <pmc_enable_upll_clock+0x14>)
   811ea:	f44f 1244 	mov.w	r2, #3211264	; 0x310000
   811ee:	61da      	str	r2, [r3, #28]
   811f0:	4b02      	ldr	r3, [pc, #8]	; (811fc <pmc_enable_upll_clock+0x14>)
   811f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   811f4:	f013 0f40 	tst.w	r3, #64	; 0x40
   811f8:	d0fa      	beq.n	811f0 <pmc_enable_upll_clock+0x8>
   811fa:	4770      	bx	lr
   811fc:	400e0600 	.word	0x400e0600

00081200 <pmc_enable_periph_clk>:
   81200:	282c      	cmp	r0, #44	; 0x2c
   81202:	d81a      	bhi.n	8123a <pmc_enable_periph_clk+0x3a>
   81204:	281f      	cmp	r0, #31
   81206:	4b0f      	ldr	r3, [pc, #60]	; (81244 <pmc_enable_periph_clk+0x44>)
   81208:	f04f 0201 	mov.w	r2, #1
   8120c:	d808      	bhi.n	81220 <pmc_enable_periph_clk+0x20>
   8120e:	fa12 f000 	lsls.w	r0, r2, r0
   81212:	6999      	ldr	r1, [r3, #24]
   81214:	ea00 0201 	and.w	r2, r0, r1
   81218:	4282      	cmp	r2, r0
   8121a:	d00c      	beq.n	81236 <pmc_enable_periph_clk+0x36>
   8121c:	6118      	str	r0, [r3, #16]
   8121e:	e00a      	b.n	81236 <pmc_enable_periph_clk+0x36>
   81220:	3820      	subs	r0, #32
   81222:	fa12 f000 	lsls.w	r0, r2, r0
   81226:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
   8122a:	ea00 0201 	and.w	r2, r0, r1
   8122e:	4282      	cmp	r2, r0
   81230:	d005      	beq.n	8123e <pmc_enable_periph_clk+0x3e>
   81232:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
   81236:	2000      	movs	r0, #0
   81238:	4770      	bx	lr
   8123a:	2001      	movs	r0, #1
   8123c:	4770      	bx	lr
   8123e:	2000      	movs	r0, #0
   81240:	4770      	bx	lr
   81242:	bf00      	nop
   81244:	400e0600 	.word	0x400e0600

00081248 <pmc_disable_periph_clk>:
   81248:	282c      	cmp	r0, #44	; 0x2c
   8124a:	d81a      	bhi.n	81282 <pmc_disable_periph_clk+0x3a>
   8124c:	281f      	cmp	r0, #31
   8124e:	4b0f      	ldr	r3, [pc, #60]	; (8128c <pmc_disable_periph_clk+0x44>)
   81250:	f04f 0101 	mov.w	r1, #1
   81254:	d808      	bhi.n	81268 <pmc_disable_periph_clk+0x20>
   81256:	fa11 f000 	lsls.w	r0, r1, r0
   8125a:	699a      	ldr	r2, [r3, #24]
   8125c:	ea00 0202 	and.w	r2, r0, r2
   81260:	4282      	cmp	r2, r0
   81262:	d10c      	bne.n	8127e <pmc_disable_periph_clk+0x36>
   81264:	615a      	str	r2, [r3, #20]
   81266:	e00a      	b.n	8127e <pmc_disable_periph_clk+0x36>
   81268:	3820      	subs	r0, #32
   8126a:	fa11 f000 	lsls.w	r0, r1, r0
   8126e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81272:	ea00 0202 	and.w	r2, r0, r2
   81276:	4282      	cmp	r2, r0
   81278:	d105      	bne.n	81286 <pmc_disable_periph_clk+0x3e>
   8127a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   8127e:	2000      	movs	r0, #0
   81280:	4770      	bx	lr
   81282:	2001      	movs	r0, #1
   81284:	4770      	bx	lr
   81286:	2000      	movs	r0, #0
   81288:	4770      	bx	lr
   8128a:	bf00      	nop
   8128c:	400e0600 	.word	0x400e0600

00081290 <pmc_switch_udpck_to_upllck>:
   81290:	0202      	lsls	r2, r0, #8
   81292:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
   81296:	4b02      	ldr	r3, [pc, #8]	; (812a0 <pmc_switch_udpck_to_upllck+0x10>)
   81298:	f042 0201 	orr.w	r2, r2, #1
   8129c:	639a      	str	r2, [r3, #56]	; 0x38
   8129e:	4770      	bx	lr
   812a0:	400e0600 	.word	0x400e0600

000812a4 <pmc_enable_udpck>:
   812a4:	4b01      	ldr	r3, [pc, #4]	; (812ac <pmc_enable_udpck+0x8>)
   812a6:	2220      	movs	r2, #32
   812a8:	601a      	str	r2, [r3, #0]
   812aa:	4770      	bx	lr
   812ac:	400e0600 	.word	0x400e0600

000812b0 <TimeTick_Increment>:
   812b0:	4b02      	ldr	r3, [pc, #8]	; (812bc <TimeTick_Increment+0xc>)
   812b2:	681a      	ldr	r2, [r3, #0]
   812b4:	3201      	adds	r2, #1
   812b6:	601a      	str	r2, [r3, #0]
   812b8:	4770      	bx	lr
   812ba:	bf00      	nop
   812bc:	20070494 	.word	0x20070494

000812c0 <GetTickCount>:
   812c0:	4b01      	ldr	r3, [pc, #4]	; (812c8 <GetTickCount+0x8>)
   812c2:	6818      	ldr	r0, [r3, #0]
   812c4:	4770      	bx	lr
   812c6:	bf00      	nop
   812c8:	20070494 	.word	0x20070494

000812cc <WDT_Disable>:
   812cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   812d0:	6043      	str	r3, [r0, #4]
   812d2:	4770      	bx	lr

000812d4 <SystemInit>:
   812d4:	4a1e      	ldr	r2, [pc, #120]	; (81350 <SystemInit+0x7c>)
   812d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   812da:	6013      	str	r3, [r2, #0]
   812dc:	4a1d      	ldr	r2, [pc, #116]	; (81354 <SystemInit+0x80>)
   812de:	6013      	str	r3, [r2, #0]
   812e0:	4b1d      	ldr	r3, [pc, #116]	; (81358 <SystemInit+0x84>)
   812e2:	6a1a      	ldr	r2, [r3, #32]
   812e4:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
   812e8:	d106      	bne.n	812f8 <SystemInit+0x24>
   812ea:	4a1c      	ldr	r2, [pc, #112]	; (8135c <SystemInit+0x88>)
   812ec:	621a      	str	r2, [r3, #32]
   812ee:	4b1a      	ldr	r3, [pc, #104]	; (81358 <SystemInit+0x84>)
   812f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   812f2:	f013 0f01 	tst.w	r3, #1
   812f6:	d0fa      	beq.n	812ee <SystemInit+0x1a>
   812f8:	4a19      	ldr	r2, [pc, #100]	; (81360 <SystemInit+0x8c>)
   812fa:	4b17      	ldr	r3, [pc, #92]	; (81358 <SystemInit+0x84>)
   812fc:	621a      	str	r2, [r3, #32]
   812fe:	4b16      	ldr	r3, [pc, #88]	; (81358 <SystemInit+0x84>)
   81300:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   81302:	f412 3f80 	tst.w	r2, #65536	; 0x10000
   81306:	d0fa      	beq.n	812fe <SystemInit+0x2a>
   81308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8130a:	f022 0203 	bic.w	r2, r2, #3
   8130e:	f042 0201 	orr.w	r2, r2, #1
   81312:	631a      	str	r2, [r3, #48]	; 0x30
   81314:	4b10      	ldr	r3, [pc, #64]	; (81358 <SystemInit+0x84>)
   81316:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   81318:	f012 0f08 	tst.w	r2, #8
   8131c:	d0fa      	beq.n	81314 <SystemInit+0x40>
   8131e:	4a11      	ldr	r2, [pc, #68]	; (81364 <SystemInit+0x90>)
   81320:	629a      	str	r2, [r3, #40]	; 0x28
   81322:	4b0d      	ldr	r3, [pc, #52]	; (81358 <SystemInit+0x84>)
   81324:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   81326:	f012 0f02 	tst.w	r2, #2
   8132a:	d0fa      	beq.n	81322 <SystemInit+0x4e>
   8132c:	2211      	movs	r2, #17
   8132e:	631a      	str	r2, [r3, #48]	; 0x30
   81330:	4b09      	ldr	r3, [pc, #36]	; (81358 <SystemInit+0x84>)
   81332:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   81334:	f012 0f08 	tst.w	r2, #8
   81338:	d0fa      	beq.n	81330 <SystemInit+0x5c>
   8133a:	2212      	movs	r2, #18
   8133c:	631a      	str	r2, [r3, #48]	; 0x30
   8133e:	4b06      	ldr	r3, [pc, #24]	; (81358 <SystemInit+0x84>)
   81340:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   81342:	f013 0f08 	tst.w	r3, #8
   81346:	d0fa      	beq.n	8133e <SystemInit+0x6a>
   81348:	4a07      	ldr	r2, [pc, #28]	; (81368 <SystemInit+0x94>)
   8134a:	4b08      	ldr	r3, [pc, #32]	; (8136c <SystemInit+0x98>)
   8134c:	601a      	str	r2, [r3, #0]
   8134e:	4770      	bx	lr
   81350:	400e0a00 	.word	0x400e0a00
   81354:	400e0c00 	.word	0x400e0c00
   81358:	400e0600 	.word	0x400e0600
   8135c:	00370809 	.word	0x00370809
   81360:	01370809 	.word	0x01370809
   81364:	200d3f01 	.word	0x200d3f01
   81368:	0501bd00 	.word	0x0501bd00
   8136c:	20070044 	.word	0x20070044

00081370 <Reset_Handler>:
   81370:	b508      	push	{r3, lr}
   81372:	4a13      	ldr	r2, [pc, #76]	; (813c0 <Reset_Handler+0x50>)
   81374:	4b13      	ldr	r3, [pc, #76]	; (813c4 <Reset_Handler+0x54>)
   81376:	429a      	cmp	r2, r3
   81378:	d105      	bne.n	81386 <Reset_Handler+0x16>
   8137a:	4b13      	ldr	r3, [pc, #76]	; (813c8 <Reset_Handler+0x58>)
   8137c:	e00a      	b.n	81394 <Reset_Handler+0x24>
   8137e:	f852 1b04 	ldr.w	r1, [r2], #4
   81382:	f843 1b04 	str.w	r1, [r3], #4
   81386:	4911      	ldr	r1, [pc, #68]	; (813cc <Reset_Handler+0x5c>)
   81388:	428b      	cmp	r3, r1
   8138a:	d3f8      	bcc.n	8137e <Reset_Handler+0xe>
   8138c:	e7f5      	b.n	8137a <Reset_Handler+0xa>
   8138e:	2200      	movs	r2, #0
   81390:	f843 2b04 	str.w	r2, [r3], #4
   81394:	4a0e      	ldr	r2, [pc, #56]	; (813d0 <Reset_Handler+0x60>)
   81396:	4293      	cmp	r3, r2
   81398:	d3f9      	bcc.n	8138e <Reset_Handler+0x1e>
   8139a:	490e      	ldr	r1, [pc, #56]	; (813d4 <Reset_Handler+0x64>)
   8139c:	4b0e      	ldr	r3, [pc, #56]	; (813d8 <Reset_Handler+0x68>)
   8139e:	f021 4260 	bic.w	r2, r1, #3758096384	; 0xe0000000
   813a2:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
   813a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   813aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   813ae:	609a      	str	r2, [r3, #8]
   813b0:	d203      	bcs.n	813ba <Reset_Handler+0x4a>
   813b2:	689a      	ldr	r2, [r3, #8]
   813b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   813b8:	609a      	str	r2, [r3, #8]
   813ba:	4b08      	ldr	r3, [pc, #32]	; (813dc <Reset_Handler+0x6c>)
   813bc:	4798      	blx	r3
   813be:	e7fe      	b.n	813be <Reset_Handler+0x4e>
   813c0:	00082634 	.word	0x00082634
   813c4:	20070000 	.word	0x20070000
   813c8:	2007004c 	.word	0x2007004c
   813cc:	2007004c 	.word	0x2007004c
   813d0:	200704ec 	.word	0x200704ec
   813d4:	00080000 	.word	0x00080000
   813d8:	e000ed00 	.word	0xe000ed00
   813dc:	00080289 	.word	0x00080289

000813e0 <adc_init>:
   813e0:	b530      	push	{r4, r5, lr}
   813e2:	0052      	lsls	r2, r2, #1
   813e4:	2401      	movs	r4, #1
   813e6:	6004      	str	r4, [r0, #0]
   813e8:	f240 2502 	movw	r5, #514	; 0x202
   813ec:	3c01      	subs	r4, #1
   813ee:	fbb1 f2f2 	udiv	r2, r1, r2
   813f2:	6044      	str	r4, [r0, #4]
   813f4:	3a01      	subs	r2, #1
   813f6:	f8c0 5120 	str.w	r5, [r0, #288]	; 0x120
   813fa:	041b      	lsls	r3, r3, #16
   813fc:	f8c0 4104 	str.w	r4, [r0, #260]	; 0x104
   81400:	f8c0 4114 	str.w	r4, [r0, #276]	; 0x114
   81404:	6845      	ldr	r5, [r0, #4]
   81406:	0612      	lsls	r2, r2, #24
   81408:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   8140c:	ea43 4212 	orr.w	r2, r3, r2, lsr #16
   81410:	ea42 0505 	orr.w	r5, r2, r5
   81414:	6045      	str	r5, [r0, #4]
   81416:	4620      	mov	r0, r4
   81418:	bd30      	pop	{r4, r5, pc}

0008141a <adc_configure_trigger>:
   8141a:	6843      	ldr	r3, [r0, #4]
   8141c:	4319      	orrs	r1, r3
   8141e:	01d3      	lsls	r3, r2, #7
   81420:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   81424:	4319      	orrs	r1, r3
   81426:	6041      	str	r1, [r0, #4]
   81428:	4770      	bx	lr

0008142a <adc_configure_timing>:
   8142a:	b510      	push	{r4, lr}
   8142c:	6844      	ldr	r4, [r0, #4]
   8142e:	071b      	lsls	r3, r3, #28
   81430:	4322      	orrs	r2, r4
   81432:	060c      	lsls	r4, r1, #24
   81434:	f004 6470 	and.w	r4, r4, #251658240	; 0xf000000
   81438:	4322      	orrs	r2, r4
   8143a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
   8143e:	431a      	orrs	r2, r3
   81440:	6042      	str	r2, [r0, #4]
   81442:	bd10      	pop	{r4, pc}

00081444 <adc_disable_all_channel>:
   81444:	f64f 73ff 	movw	r3, #65535	; 0xffff
   81448:	6143      	str	r3, [r0, #20]
   8144a:	4770      	bx	lr

0008144c <adc_disable_interrupt>:
   8144c:	6281      	str	r1, [r0, #40]	; 0x28
   8144e:	4770      	bx	lr

00081450 <UDD_SetStack>:
   81450:	4b01      	ldr	r3, [pc, #4]	; (81458 <UDD_SetStack+0x8>)
   81452:	6018      	str	r0, [r3, #0]
   81454:	4770      	bx	lr
   81456:	bf00      	nop
   81458:	200704e8 	.word	0x200704e8

0008145c <UDD_Init>:
   8145c:	b510      	push	{r4, lr}
   8145e:	2300      	movs	r3, #0
   81460:	4a2a      	ldr	r2, [pc, #168]	; (8150c <UDD_Init+0xb0>)
   81462:	2400      	movs	r4, #0
   81464:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   81468:	4a29      	ldr	r2, [pc, #164]	; (81510 <UDD_Init+0xb4>)
   8146a:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
   8146e:	3301      	adds	r3, #1
   81470:	2b0a      	cmp	r3, #10
   81472:	d1f5      	bne.n	81460 <UDD_Init+0x4>
   81474:	2028      	movs	r0, #40	; 0x28
   81476:	4b27      	ldr	r3, [pc, #156]	; (81514 <UDD_Init+0xb8>)
   81478:	4798      	blx	r3
   8147a:	4b27      	ldr	r3, [pc, #156]	; (81518 <UDD_Init+0xbc>)
   8147c:	4798      	blx	r3
   8147e:	4620      	mov	r0, r4
   81480:	4b26      	ldr	r3, [pc, #152]	; (8151c <UDD_Init+0xc0>)
   81482:	4798      	blx	r3
   81484:	4b26      	ldr	r3, [pc, #152]	; (81520 <UDD_Init+0xc4>)
   81486:	4798      	blx	r3
   81488:	4b26      	ldr	r3, [pc, #152]	; (81524 <UDD_Init+0xc8>)
   8148a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8148e:	f883 4328 	strb.w	r4, [r3, #808]	; 0x328
   81492:	605a      	str	r2, [r3, #4]
   81494:	4b24      	ldr	r3, [pc, #144]	; (81528 <UDD_Init+0xcc>)
   81496:	4620      	mov	r0, r4
   81498:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8149c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   814a0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   814a4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   814a8:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   814ac:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   814b0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   814b4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   814b8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   814bc:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   814c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   814c4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   814c8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   814cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   814d0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   814d4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   814d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   814dc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   814e0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   814e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   814e8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   814ec:	681a      	ldr	r2, [r3, #0]
   814ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   814f2:	601a      	str	r2, [r3, #0]
   814f4:	681a      	ldr	r2, [r3, #0]
   814f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
   814fa:	601a      	str	r2, [r3, #0]
   814fc:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   81500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   81504:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   81508:	bd10      	pop	{r4, pc}
   8150a:	bf00      	nop
   8150c:	200704c0 	.word	0x200704c0
   81510:	20070498 	.word	0x20070498
   81514:	00081201 	.word	0x00081201
   81518:	000811e9 	.word	0x000811e9
   8151c:	00081291 	.word	0x00081291
   81520:	000812a5 	.word	0x000812a5
   81524:	e000e100 	.word	0xe000e100
   81528:	400ac000 	.word	0x400ac000

0008152c <UDD_Attach>:
   8152c:	4b10      	ldr	r3, [pc, #64]	; (81570 <UDD_Attach+0x44>)
   8152e:	6819      	ldr	r1, [r3, #0]
   81530:	b672      	cpsid	i
   81532:	f3bf 8f5f 	dmb	sy
   81536:	2200      	movs	r2, #0
   81538:	601a      	str	r2, [r3, #0]
   8153a:	4a0e      	ldr	r2, [pc, #56]	; (81574 <UDD_Attach+0x48>)
   8153c:	f8d2 0800 	ldr.w	r0, [r2, #2048]	; 0x800
   81540:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
   81544:	f8c2 0800 	str.w	r0, [r2, #2048]	; 0x800
   81548:	461a      	mov	r2, r3
   8154a:	4b0a      	ldr	r3, [pc, #40]	; (81574 <UDD_Attach+0x48>)
   8154c:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
   81550:	f410 4f80 	tst.w	r0, #16384	; 0x4000
   81554:	d0f9      	beq.n	8154a <UDD_Attach+0x1e>
   81556:	6818      	ldr	r0, [r3, #0]
   81558:	f420 7080 	bic.w	r0, r0, #256	; 0x100
   8155c:	6018      	str	r0, [r3, #0]
   8155e:	2008      	movs	r0, #8
   81560:	6198      	str	r0, [r3, #24]
   81562:	b121      	cbz	r1, 8156e <UDD_Attach+0x42>
   81564:	2301      	movs	r3, #1
   81566:	6013      	str	r3, [r2, #0]
   81568:	f3bf 8f5f 	dmb	sy
   8156c:	b662      	cpsie	i
   8156e:	4770      	bx	lr
   81570:	20070048 	.word	0x20070048
   81574:	400ac000 	.word	0x400ac000

00081578 <UDD_InitEP>:
   81578:	4b09      	ldr	r3, [pc, #36]	; (815a0 <UDD_InitEP+0x28>)
   8157a:	f000 000f 	and.w	r0, r0, #15
   8157e:	f100 0240 	add.w	r2, r0, #64	; 0x40
   81582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   81586:	2201      	movs	r2, #1
   81588:	4082      	lsls	r2, r0
   8158a:	69d9      	ldr	r1, [r3, #28]
   8158c:	430a      	orrs	r2, r1
   8158e:	61da      	str	r2, [r3, #28]
   81590:	4b04      	ldr	r3, [pc, #16]	; (815a4 <UDD_InitEP+0x2c>)
   81592:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   81596:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   8159a:	d100      	bne.n	8159e <UDD_InitEP+0x26>
   8159c:	e7fe      	b.n	8159c <UDD_InitEP+0x24>
   8159e:	4770      	bx	lr
   815a0:	400ac000 	.word	0x400ac000
   815a4:	400ac130 	.word	0x400ac130

000815a8 <UDD_InitEndpoints>:
   815a8:	b570      	push	{r4, r5, r6, lr}
   815aa:	2301      	movs	r3, #1
   815ac:	4c0b      	ldr	r4, [pc, #44]	; (815dc <UDD_InitEndpoints+0x34>)
   815ae:	e012      	b.n	815d6 <UDD_InitEndpoints+0x2e>
   815b0:	4a0b      	ldr	r2, [pc, #44]	; (815e0 <UDD_InitEndpoints+0x38>)
   815b2:	f850 6f04 	ldr.w	r6, [r0, #4]!
   815b6:	f103 0540 	add.w	r5, r3, #64	; 0x40
   815ba:	f842 6025 	str.w	r6, [r2, r5, lsl #2]
   815be:	2501      	movs	r5, #1
   815c0:	409d      	lsls	r5, r3
   815c2:	69d6      	ldr	r6, [r2, #28]
   815c4:	4335      	orrs	r5, r6
   815c6:	61d5      	str	r5, [r2, #28]
   815c8:	f854 2b04 	ldr.w	r2, [r4], #4
   815cc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
   815d0:	d100      	bne.n	815d4 <UDD_InitEndpoints+0x2c>
   815d2:	e7fe      	b.n	815d2 <UDD_InitEndpoints+0x2a>
   815d4:	3301      	adds	r3, #1
   815d6:	428b      	cmp	r3, r1
   815d8:	d3ea      	bcc.n	815b0 <UDD_InitEndpoints+0x8>
   815da:	bd70      	pop	{r4, r5, r6, pc}
   815dc:	400ac134 	.word	0x400ac134
   815e0:	400ac000 	.word	0x400ac000

000815e4 <UDD_WaitIN>:
   815e4:	4b03      	ldr	r3, [pc, #12]	; (815f4 <UDD_WaitIN+0x10>)
   815e6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   815ea:	f013 0f01 	tst.w	r3, #1
   815ee:	d0f9      	beq.n	815e4 <UDD_WaitIN>
   815f0:	4770      	bx	lr
   815f2:	bf00      	nop
   815f4:	400ac000 	.word	0x400ac000

000815f8 <UDD_WaitOUT>:
   815f8:	4b03      	ldr	r3, [pc, #12]	; (81608 <UDD_WaitOUT+0x10>)
   815fa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   815fe:	f013 0f02 	tst.w	r3, #2
   81602:	d0f9      	beq.n	815f8 <UDD_WaitOUT>
   81604:	4770      	bx	lr
   81606:	bf00      	nop
   81608:	400ac000 	.word	0x400ac000

0008160c <UDD_ClearIN>:
   8160c:	4b03      	ldr	r3, [pc, #12]	; (8161c <UDD_ClearIN+0x10>)
   8160e:	2201      	movs	r2, #1
   81610:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   81614:	4b02      	ldr	r3, [pc, #8]	; (81620 <UDD_ClearIN+0x14>)
   81616:	3a01      	subs	r2, #1
   81618:	601a      	str	r2, [r3, #0]
   8161a:	4770      	bx	lr
   8161c:	400ac000 	.word	0x400ac000
   81620:	200704c0 	.word	0x200704c0

00081624 <UDD_ClearOUT>:
   81624:	4b03      	ldr	r3, [pc, #12]	; (81634 <UDD_ClearOUT+0x10>)
   81626:	2202      	movs	r2, #2
   81628:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   8162c:	4b02      	ldr	r3, [pc, #8]	; (81638 <UDD_ClearOUT+0x14>)
   8162e:	3a02      	subs	r2, #2
   81630:	601a      	str	r2, [r3, #0]
   81632:	4770      	bx	lr
   81634:	400ac000 	.word	0x400ac000
   81638:	20070498 	.word	0x20070498

0008163c <UDD_ReceivedSetupInt>:
   8163c:	4b02      	ldr	r3, [pc, #8]	; (81648 <UDD_ReceivedSetupInt+0xc>)
   8163e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   81642:	f000 0004 	and.w	r0, r0, #4
   81646:	4770      	bx	lr
   81648:	400ac000 	.word	0x400ac000

0008164c <UDD_ClearSetupInt>:
   8164c:	4b02      	ldr	r3, [pc, #8]	; (81658 <UDD_ClearSetupInt+0xc>)
   8164e:	2204      	movs	r2, #4
   81650:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   81654:	4770      	bx	lr
   81656:	bf00      	nop
   81658:	400ac000 	.word	0x400ac000

0008165c <UDD_Send>:
   8165c:	b570      	push	{r4, r5, r6, lr}
   8165e:	4615      	mov	r5, r2
   81660:	03c2      	lsls	r2, r0, #15
   81662:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   81666:	4603      	mov	r3, r0
   81668:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   8166c:	481c      	ldr	r0, [pc, #112]	; (816e0 <UDD_Send+0x84>)
   8166e:	f103 044c 	add.w	r4, r3, #76	; 0x4c
   81672:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   81676:	f010 0f01 	tst.w	r0, #1
   8167a:	d0f7      	beq.n	8166c <UDD_Send+0x10>
   8167c:	4c19      	ldr	r4, [pc, #100]	; (816e4 <UDD_Send+0x88>)
   8167e:	b93b      	cbnz	r3, 81690 <UDD_Send+0x34>
   81680:	6820      	ldr	r0, [r4, #0]
   81682:	1828      	adds	r0, r5, r0
   81684:	2840      	cmp	r0, #64	; 0x40
   81686:	d906      	bls.n	81696 <UDD_Send+0x3a>
   81688:	6825      	ldr	r5, [r4, #0]
   8168a:	f1c5 0540 	rsb	r5, r5, #64	; 0x40
   8168e:	e002      	b.n	81696 <UDD_Send+0x3a>
   81690:	2000      	movs	r0, #0
   81692:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
   81696:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
   8169a:	1810      	adds	r0, r2, r0
   8169c:	2200      	movs	r2, #0
   8169e:	e002      	b.n	816a6 <UDD_Send+0x4a>
   816a0:	5c8e      	ldrb	r6, [r1, r2]
   816a2:	5486      	strb	r6, [r0, r2]
   816a4:	3201      	adds	r2, #1
   816a6:	42aa      	cmp	r2, r5
   816a8:	d1fa      	bne.n	816a0 <UDD_Send+0x44>
   816aa:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   816ae:	18aa      	adds	r2, r5, r2
   816b0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   816b4:	b933      	cbnz	r3, 816c4 <UDD_Send+0x68>
   816b6:	4b0b      	ldr	r3, [pc, #44]	; (816e4 <UDD_Send+0x88>)
   816b8:	681b      	ldr	r3, [r3, #0]
   816ba:	2b40      	cmp	r3, #64	; 0x40
   816bc:	d10d      	bne.n	816da <UDD_Send+0x7e>
   816be:	4b0a      	ldr	r3, [pc, #40]	; (816e8 <UDD_Send+0x8c>)
   816c0:	4798      	blx	r3
   816c2:	e00a      	b.n	816da <UDD_Send+0x7e>
   816c4:	4a06      	ldr	r2, [pc, #24]	; (816e0 <UDD_Send+0x84>)
   816c6:	f103 0158 	add.w	r1, r3, #88	; 0x58
   816ca:	2001      	movs	r0, #1
   816cc:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
   816d0:	3388      	adds	r3, #136	; 0x88
   816d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   816d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   816da:	4628      	mov	r0, r5
   816dc:	bd70      	pop	{r4, r5, r6, pc}
   816de:	bf00      	nop
   816e0:	400ac000 	.word	0x400ac000
   816e4:	200704c0 	.word	0x200704c0
   816e8:	0008160d 	.word	0x0008160d

000816ec <UDD_Send8>:
   816ec:	4b08      	ldr	r3, [pc, #32]	; (81710 <UDD_Send8+0x24>)
   816ee:	b510      	push	{r4, lr}
   816f0:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   816f4:	03c4      	lsls	r4, r0, #15
   816f6:	18a2      	adds	r2, r4, r2
   816f8:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   816fc:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
   81700:	7011      	strb	r1, [r2, #0]
   81702:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
   81706:	3201      	adds	r2, #1
   81708:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   8170c:	bd10      	pop	{r4, pc}
   8170e:	bf00      	nop
   81710:	200704c0 	.word	0x200704c0

00081714 <UDD_Recv8>:
   81714:	4a08      	ldr	r2, [pc, #32]	; (81738 <UDD_Recv8+0x24>)
   81716:	4603      	mov	r3, r0
   81718:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
   8171c:	03c0      	lsls	r0, r0, #15
   8171e:	1841      	adds	r1, r0, r1
   81720:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
   81724:	f501 11c0 	add.w	r1, r1, #1572864	; 0x180000
   81728:	7808      	ldrb	r0, [r1, #0]
   8172a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   8172e:	3101      	adds	r1, #1
   81730:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   81734:	4770      	bx	lr
   81736:	bf00      	nop
   81738:	20070498 	.word	0x20070498

0008173c <UDD_Recv>:
   8173c:	b570      	push	{r4, r5, r6, lr}
   8173e:	4c0b      	ldr	r4, [pc, #44]	; (8176c <UDD_Recv+0x30>)
   81740:	03c3      	lsls	r3, r0, #15
   81742:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   81746:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
   8174a:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
   8174e:	195d      	adds	r5, r3, r5
   81750:	2300      	movs	r3, #0
   81752:	e002      	b.n	8175a <UDD_Recv+0x1e>
   81754:	5cee      	ldrb	r6, [r5, r3]
   81756:	54ce      	strb	r6, [r1, r3]
   81758:	3301      	adds	r3, #1
   8175a:	4293      	cmp	r3, r2
   8175c:	d1fa      	bne.n	81754 <UDD_Recv+0x18>
   8175e:	f854 2020 	ldr.w	r2, [r4, r0, lsl #2]
   81762:	189b      	adds	r3, r3, r2
   81764:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
   81768:	bd70      	pop	{r4, r5, r6, pc}
   8176a:	bf00      	nop
   8176c:	20070498 	.word	0x20070498

00081770 <UDD_Stall>:
   81770:	4b03      	ldr	r3, [pc, #12]	; (81780 <UDD_Stall+0x10>)
   81772:	2201      	movs	r2, #1
   81774:	61da      	str	r2, [r3, #28]
   81776:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8177a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
   8177e:	4770      	bx	lr
   81780:	400ac000 	.word	0x400ac000

00081784 <UDD_FifoByteCount>:
   81784:	4b04      	ldr	r3, [pc, #16]	; (81798 <UDD_FifoByteCount+0x14>)
   81786:	304c      	adds	r0, #76	; 0x4c
   81788:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   8178c:	4803      	ldr	r0, [pc, #12]	; (8179c <UDD_FifoByteCount+0x18>)
   8178e:	ea03 0000 	and.w	r0, r3, r0
   81792:	0d00      	lsrs	r0, r0, #20
   81794:	4770      	bx	lr
   81796:	bf00      	nop
   81798:	400ac000 	.word	0x400ac000
   8179c:	7ff00000 	.word	0x7ff00000

000817a0 <UDD_ReleaseRX>:
   817a0:	4b08      	ldr	r3, [pc, #32]	; (817c4 <UDD_ReleaseRX+0x24>)
   817a2:	f100 0258 	add.w	r2, r0, #88	; 0x58
   817a6:	2102      	movs	r1, #2
   817a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   817ac:	f100 0288 	add.w	r2, r0, #136	; 0x88
   817b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   817b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   817b8:	4b03      	ldr	r3, [pc, #12]	; (817c8 <UDD_ReleaseRX+0x28>)
   817ba:	2200      	movs	r2, #0
   817bc:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   817c0:	4770      	bx	lr
   817c2:	bf00      	nop
   817c4:	400ac000 	.word	0x400ac000
   817c8:	20070498 	.word	0x20070498

000817cc <UDD_ReleaseTX>:
   817cc:	4b08      	ldr	r3, [pc, #32]	; (817f0 <UDD_ReleaseTX+0x24>)
   817ce:	f100 0258 	add.w	r2, r0, #88	; 0x58
   817d2:	2101      	movs	r1, #1
   817d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   817d8:	f100 0288 	add.w	r2, r0, #136	; 0x88
   817dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   817e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   817e4:	4b03      	ldr	r3, [pc, #12]	; (817f4 <UDD_ReleaseTX+0x28>)
   817e6:	2200      	movs	r2, #0
   817e8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
   817ec:	4770      	bx	lr
   817ee:	bf00      	nop
   817f0:	400ac000 	.word	0x400ac000
   817f4:	200704c0 	.word	0x200704c0

000817f8 <UDD_SetAddress>:
   817f8:	4b06      	ldr	r3, [pc, #24]	; (81814 <UDD_SetAddress+0x1c>)
   817fa:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   817fe:	681a      	ldr	r2, [r3, #0]
   81800:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81804:	ea40 0202 	orr.w	r2, r0, r2
   81808:	601a      	str	r2, [r3, #0]
   8180a:	681a      	ldr	r2, [r3, #0]
   8180c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   81810:	601a      	str	r2, [r3, #0]
   81812:	4770      	bx	lr
   81814:	400ac000 	.word	0x400ac000

00081818 <UOTGHS_Handler>:
   81818:	b508      	push	{r3, lr}
   8181a:	4b02      	ldr	r3, [pc, #8]	; (81824 <UOTGHS_Handler+0xc>)
   8181c:	681b      	ldr	r3, [r3, #0]
   8181e:	b103      	cbz	r3, 81822 <UOTGHS_Handler+0xa>
   81820:	4798      	blx	r3
   81822:	bd08      	pop	{r3, pc}
   81824:	200704e8 	.word	0x200704e8

00081828 <__libc_init_array>:
   81828:	b570      	push	{r4, r5, r6, lr}
   8182a:	f242 6610 	movw	r6, #9744	; 0x2610
   8182e:	f242 6510 	movw	r5, #9744	; 0x2610
   81832:	f2c0 0608 	movt	r6, #8
   81836:	f2c0 0508 	movt	r5, #8
   8183a:	1b76      	subs	r6, r6, r5
   8183c:	10b6      	asrs	r6, r6, #2
   8183e:	d006      	beq.n	8184e <__libc_init_array+0x26>
   81840:	2400      	movs	r4, #0
   81842:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   81846:	3401      	adds	r4, #1
   81848:	4798      	blx	r3
   8184a:	42a6      	cmp	r6, r4
   8184c:	d8f9      	bhi.n	81842 <__libc_init_array+0x1a>
   8184e:	f242 6510 	movw	r5, #9744	; 0x2610
   81852:	f242 6624 	movw	r6, #9764	; 0x2624
   81856:	f2c0 0508 	movt	r5, #8
   8185a:	f2c0 0608 	movt	r6, #8
   8185e:	1b76      	subs	r6, r6, r5
   81860:	f000 fed0 	bl	82604 <_init>
   81864:	10b6      	asrs	r6, r6, #2
   81866:	d006      	beq.n	81876 <__libc_init_array+0x4e>
   81868:	2400      	movs	r4, #0
   8186a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   8186e:	3401      	adds	r4, #1
   81870:	4798      	blx	r3
   81872:	42a6      	cmp	r6, r4
   81874:	d8f9      	bhi.n	8186a <__libc_init_array+0x42>
   81876:	bd70      	pop	{r4, r5, r6, pc}

00081878 <memset>:
   81878:	2a03      	cmp	r2, #3
   8187a:	b2c9      	uxtb	r1, r1
   8187c:	b430      	push	{r4, r5}
   8187e:	d807      	bhi.n	81890 <memset+0x18>
   81880:	b122      	cbz	r2, 8188c <memset+0x14>
   81882:	2300      	movs	r3, #0
   81884:	54c1      	strb	r1, [r0, r3]
   81886:	3301      	adds	r3, #1
   81888:	4293      	cmp	r3, r2
   8188a:	d1fb      	bne.n	81884 <memset+0xc>
   8188c:	bc30      	pop	{r4, r5}
   8188e:	4770      	bx	lr
   81890:	eb00 0c02 	add.w	ip, r0, r2
   81894:	4603      	mov	r3, r0
   81896:	e001      	b.n	8189c <memset+0x24>
   81898:	f803 1c01 	strb.w	r1, [r3, #-1]
   8189c:	f003 0403 	and.w	r4, r3, #3
   818a0:	461a      	mov	r2, r3
   818a2:	3301      	adds	r3, #1
   818a4:	2c00      	cmp	r4, #0
   818a6:	d1f7      	bne.n	81898 <memset+0x20>
   818a8:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
   818ac:	ebc2 040c 	rsb	r4, r2, ip
   818b0:	fb03 f301 	mul.w	r3, r3, r1
   818b4:	e01f      	b.n	818f6 <memset+0x7e>
   818b6:	f842 3c40 	str.w	r3, [r2, #-64]
   818ba:	f842 3c3c 	str.w	r3, [r2, #-60]
   818be:	f842 3c38 	str.w	r3, [r2, #-56]
   818c2:	f842 3c34 	str.w	r3, [r2, #-52]
   818c6:	f842 3c30 	str.w	r3, [r2, #-48]
   818ca:	f842 3c2c 	str.w	r3, [r2, #-44]
   818ce:	f842 3c28 	str.w	r3, [r2, #-40]
   818d2:	f842 3c24 	str.w	r3, [r2, #-36]
   818d6:	f842 3c20 	str.w	r3, [r2, #-32]
   818da:	f842 3c1c 	str.w	r3, [r2, #-28]
   818de:	f842 3c18 	str.w	r3, [r2, #-24]
   818e2:	f842 3c14 	str.w	r3, [r2, #-20]
   818e6:	f842 3c10 	str.w	r3, [r2, #-16]
   818ea:	f842 3c0c 	str.w	r3, [r2, #-12]
   818ee:	f842 3c08 	str.w	r3, [r2, #-8]
   818f2:	f842 3c04 	str.w	r3, [r2, #-4]
   818f6:	4615      	mov	r5, r2
   818f8:	3240      	adds	r2, #64	; 0x40
   818fa:	2c3f      	cmp	r4, #63	; 0x3f
   818fc:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
   81900:	dcd9      	bgt.n	818b6 <memset+0x3e>
   81902:	462a      	mov	r2, r5
   81904:	ebc5 040c 	rsb	r4, r5, ip
   81908:	e007      	b.n	8191a <memset+0xa2>
   8190a:	f842 3c10 	str.w	r3, [r2, #-16]
   8190e:	f842 3c0c 	str.w	r3, [r2, #-12]
   81912:	f842 3c08 	str.w	r3, [r2, #-8]
   81916:	f842 3c04 	str.w	r3, [r2, #-4]
   8191a:	4615      	mov	r5, r2
   8191c:	3210      	adds	r2, #16
   8191e:	2c0f      	cmp	r4, #15
   81920:	f1a4 0410 	sub.w	r4, r4, #16
   81924:	dcf1      	bgt.n	8190a <memset+0x92>
   81926:	462a      	mov	r2, r5
   81928:	ebc5 050c 	rsb	r5, r5, ip
   8192c:	e001      	b.n	81932 <memset+0xba>
   8192e:	f842 3c04 	str.w	r3, [r2, #-4]
   81932:	4614      	mov	r4, r2
   81934:	3204      	adds	r2, #4
   81936:	2d03      	cmp	r5, #3
   81938:	f1a5 0504 	sub.w	r5, r5, #4
   8193c:	dcf7      	bgt.n	8192e <memset+0xb6>
   8193e:	e001      	b.n	81944 <memset+0xcc>
   81940:	f804 1b01 	strb.w	r1, [r4], #1
   81944:	4564      	cmp	r4, ip
   81946:	d3fb      	bcc.n	81940 <memset+0xc8>
   81948:	e7a0      	b.n	8188c <memset+0x14>
   8194a:	bf00      	nop

0008194c <STRING_PRODUCT>:
   8194c:	7241 7564 6e69 206f 7544 0065               Arduino Due.

00081958 <USB_DeviceDescriptor>:
   81958:	0112 0200 0000 4000 2341 003e 0100 0201     .......@A#>.....
   81968:	0100 0000                                   ....

0008196c <_ZL9EndPoints>:
   8196c:	2032 0000 3936 0000 3066 0000 3166 0000     2 ..69..f0..f1..
   8197c:	3936 0000                                   69..

00081980 <STRING_LANGUAGE>:
   81980:	0304 0409                                   ....

00081984 <_ZL18test_packet_buffer>:
	...
   8198c:	aa00 aaaa aaaa aaaa eeaa eeee eeee eeee     ................
   8199c:	feee ffff ffff ffff ffff ffff 7fff dfbf     ................
   819ac:	f7ef fdfb 7efc dfbf f7ef fdfb 417e               .....~......~

000819b9 <STRING_MANUFACTURER>:
   819b9:	7241 7564 6e69 206f 4c4c 0043               Arduino LLC.

000819c5 <USB_DeviceDescriptorA>:
   819c5:	0112 0200 0002 4000 2341 003e 0100 0201     .......@A#>.....
   819d5:	0100                                        ..

000819d7 <_ZL19USB_DeviceQualifier>:
   819d7:	060a 0200 0000 4000 0001 0000 0000 0000     .......@........
	...

000819f0 <_ZTV9Keyboard_>:
	...
   819f8:	097d 0008 0d49 0008 0ab5 0008 0a4d 0008     }...I.......M...
   81a08:	0a35 0008 0000 0000                         5.......

00081a10 <_asciimap>:
	...
   81a18:	2b2a 0028 0000 0000 0000 0000 0000 0000     *+(.............
	...
   81a30:	9e2c a0b4 a2a1 34a4 a7a6 aea5 2d36 3837     ,......4....6-78
   81a40:	1e27 201f 2221 2423 2625 33b3 2eb6 b8b7     '.. !"#$%&.3....
   81a50:	849f 8685 8887 8a89 8c8b 8e8d 908f 9291     ................
   81a60:	9493 9695 9897 9a99 9c9b 2f9d 3031 ada3     .........../10..
   81a70:	0435 0605 0807 0a09 0c0b 0e0d 100f 1211     5...............
   81a80:	1413 1615 1817 1a19 1c1b af1d b0b1 00b5     ................

00081a90 <_hidInterface>:
   81a90:	0409 0002 0301 0000 0900 0121 0001 2201     ..........!...."
   81aa0:	0065 0507 0384 0040 0501                         e.....@..

00081aa9 <_hidReportDescriptor>:
   81aa9:	0105 0209 01a1 0109 00a1 0185 0905 0119     ................
   81ab9:	0329 0015 0125 0395 0175 0281 0195 0575     )...%...u.....u.
   81ac9:	0381 0105 3009 3109 3809 8115 7f25 0875     .....0.1.8..%.u.
   81ad9:	0395 0681 c0c0 0105 0609 01a1 0285 0705     ................
   81ae9:	e019 e729 0015 0125 0175 0895 0281 0195     ..)...%.u.......
   81af9:	0875 0381 0695 0875 0015 6525 0705 0019     u.....u...%e....
   81b09:	6529 0081 00c0 0000                              )e.....

00081b10 <g_APinDescription>:
   81b10:	0e00 400e 0100 0000 000b 0000 0001 0000     ...@............
   81b20:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   81b30:	0200 0000 000b 0000 0001 0000 0000 0000     ................
   81b40:	0004 0000 ffff ffff 1000 400e 0000 0200     ...........@....
   81b50:	000c 0000 0002 0000 0000 0000 0014 0000     ................
   81b60:	ffff 00ff 1200 400e 0000 1000 000d 0000     .......@........
   81b70:	0002 0000 0000 0000 0014 0000 ffff 0eff     ................
   81b80:	1200 400e 0000 0400 000d 0000 0002 0000     ...@............
   81b90:	0000 0000 0014 0000 ffff 0dff 1200 400e     ...............@
   81ba0:	0000 0200 000d 0000 0002 0000 0000 0000     ................
   81bb0:	0014 0000 ffff 0cff 1200 400e 0000 0100     ...........@....
   81bc0:	000d 0000 0002 0000 0000 0000 000c 0000     ................
   81bd0:	ffff ff07 1200 400e 0000 0080 000d 0000     .......@........
   81be0:	0002 0000 0000 0000 000c 0000 ffff ff06     ................
   81bf0:	1200 400e 0000 0040 000d 0000 0002 0000     ...@..@.........
   81c00:	0000 0000 000c 0000 ffff ff05 1200 400e     ...............@
   81c10:	0000 0020 000d 0000 0002 0000 0000 0000     .. .............
   81c20:	000c 0000 ffff ff04 1200 400e 0000 2000     ...........@... 
   81c30:	000d 0000 0002 0000 0000 0000 0014 0000     ................
   81c40:	ffff 0fff 1400 400e 0080 0000 000e 0000     .......@........
   81c50:	0002 0000 0000 0000 0014 0000 ffff 10ff     ................
   81c60:	1400 400e 0100 0000 000e 0000 0002 0000     ...@............
   81c70:	0000 0000 0014 0000 ffff 11ff 1000 400e     ...............@
   81c80:	0000 0800 000c 0000 0002 0000 0000 0000     ................
   81c90:	0014 0000 ffff 01ff 1400 400e 0010 0000     ...........@....
   81ca0:	000e 0000 0002 0000 0000 0000 0004 0000     ................
   81cb0:	ffff ffff 1400 400e 0020 0000 000e 0000     .......@ .......
   81cc0:	0002 0000 0000 0000 0004 0000 ffff ffff     ................
   81cd0:	0e00 400e 2000 0000 000b 0000 0001 0000     ...@. ..........
   81ce0:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   81cf0:	1000 0000 000b 0000 0001 0000 0000 0000     ................
   81d00:	0004 0000 ffff ffff 0e00 400e 0800 0000     ...........@....
   81d10:	000b 0000 0001 0000 0000 0000 0004 0000     ................
   81d20:	ffff ffff 0e00 400e 0400 0000 000b 0000     .......@........
   81d30:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   81d40:	1000 400e 1000 0000 000c 0000 0001 0000     ...@............
   81d50:	0000 0000 0004 0000 ffff ffff 1000 400e     ...............@
   81d60:	2000 0000 000c 0000 0001 0000 0000 0000     . ..............
   81d70:	0004 0000 ffff ffff 1000 400e 0000 0400     ...........@....
   81d80:	000c 0000 0004 0000 0000 0000 0004 0000     ................
   81d90:	ffff ffff 0e00 400e 4000 0000 000b 0000     .......@.@......
   81da0:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   81db0:	0e00 400e 8000 0000 000b 0000 0004 0000     ...@............
   81dc0:	0000 0000 0004 0000 ffff ffff 1400 400e     ...............@
   81dd0:	0001 0000 000e 0000 0004 0000 0000 0000     ................
   81de0:	0004 0000 ffff ffff 1400 400e 0002 0000     ...........@....
   81df0:	000e 0000 0004 0000 0000 0000 0004 0000     ................
   81e00:	ffff ffff 1400 400e 0004 0000 000e 0000     .......@........
   81e10:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   81e20:	1400 400e 0008 0000 000e 0000 0004 0000     ...@............
   81e30:	0000 0000 0004 0000 ffff ffff 1400 400e     ...............@
   81e40:	0040 0000 000e 0000 0004 0000 0000 0000     @...............
   81e50:	0004 0000 ffff ffff 1400 400e 0200 0000     ...........@....
   81e60:	000e 0000 0004 0000 0000 0000 0004 0000     ................
   81e70:	ffff ffff 0e00 400e 0080 0000 000b 0000     .......@........
   81e80:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   81e90:	1400 400e 0400 0000 000e 0000 0004 0000     ...@............
   81ea0:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   81eb0:	0002 0000 000d 0000 0004 0000 0000 0000     ................
   81ec0:	0004 0000 ffff ffff 1200 400e 0004 0000     ...........@....
   81ed0:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   81ee0:	ffff ffff 1200 400e 0008 0000 000d 0000     .......@........
   81ef0:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   81f00:	1200 400e 0010 0000 000d 0000 0004 0000     ...@............
   81f10:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   81f20:	0020 0000 000d 0000 0004 0000 0000 0000      ...............
   81f30:	0004 0000 ffff ffff 1200 400e 0040 0000     ...........@@...
   81f40:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   81f50:	ffff ffff 1200 400e 0080 0000 000d 0000     .......@........
   81f60:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   81f70:	1200 400e 0100 0000 000d 0000 0004 0000     ...@............
   81f80:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   81f90:	0200 0000 000d 0000 0004 0000 0000 0000     ................
   81fa0:	0004 0000 ffff ffff 0e00 400e 0000 0008     ...........@....
   81fb0:	000b 0000 0004 0000 0000 0000 0004 0000     ................
   81fc0:	ffff ffff 0e00 400e 0000 0010 000b 0000     .......@........
   81fd0:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   81fe0:	1200 400e 0000 0008 000d 0000 0004 0000     ...@............
   81ff0:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   82000:	0000 0004 000d 0000 0004 0000 0000 0000     ................
   82010:	0004 0000 ffff ffff 1200 400e 0000 0002     ...........@....
   82020:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   82030:	ffff ffff 1200 400e 0000 0001 000d 0000     .......@........
   82040:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   82050:	1200 400e 8000 0000 000d 0000 0004 0000     ...@............
   82060:	0000 0000 0004 0000 ffff ffff 1200 400e     ...............@
   82070:	4000 0000 000d 0000 0004 0000 0000 0000     .@..............
   82080:	0004 0000 ffff ffff 1200 400e 2000 0000     ...........@. ..
   82090:	000d 0000 0004 0000 0000 0000 0004 0000     ................
   820a0:	ffff ffff 1200 400e 1000 0000 000d 0000     .......@........
   820b0:	0004 0000 0000 0000 0004 0000 ffff ffff     ................
   820c0:	1000 400e 0000 0020 000c 0000 0004 0000     ...@.. .........
   820d0:	0000 0000 0004 0000 ffff ffff 1000 400e     ...............@
   820e0:	4000 0000 000c 0000 0004 0000 0000 0000     .@..............
   820f0:	0004 0000 ffff ffff 0e00 400e 0000 0001     ...........@....
   82100:	000b 0000 0003 0000 0000 0000 0002 0000     ................
   82110:	0700 ffff 0e00 400e 0000 0100 000b 0000     .......@........
   82120:	0003 0000 0000 0000 0002 0000 0601 ffff     ................
   82130:	0e00 400e 0000 0080 000b 0000 0003 0000     ...@............
   82140:	0000 0000 0002 0000 0502 ffff 0e00 400e     ...............@
   82150:	0000 0040 000b 0000 0003 0000 0000 0000     ..@.............
   82160:	0002 0000 0403 ffff 0e00 400e 0040 0000     ...........@@...
   82170:	000b 0000 0003 0000 0000 0000 0002 0000     ................
   82180:	0304 05ff 0e00 400e 0010 0000 000b 0000     .......@........
   82190:	0003 0000 0000 0000 0002 0000 0205 ffff     ................
   821a0:	0e00 400e 0008 0000 000b 0000 0003 0000     ...@............
   821b0:	0000 0000 0002 0000 0106 03ff 0e00 400e     ...............@
   821c0:	0004 0000 000b 0000 0003 0000 0000 0000     ................
   821d0:	0002 0000 0007 02ff 1000 400e 0000 0002     ...........@....
   821e0:	000c 0000 0003 0000 0000 0000 0002 0000     ................
   821f0:	0a08 ffff 1000 400e 0000 0004 000c 0000     .......@........
   82200:	0003 0000 0000 0000 0002 0000 0b09 ffff     ................
   82210:	1000 400e 0000 0008 000c 0000 0003 0000     ...@............
   82220:	0000 0000 0002 0000 0c0a ffff 1000 400e     ...............@
   82230:	0000 0010 000c 0000 0003 0000 0000 0000     ................
   82240:	0002 0000 0d0b ffff 1000 400e 8000 0000     ...........@....
   82250:	000c 0000 0003 0000 0000 0000 0002 0000     ................
   82260:	100c ffff 1000 400e 0000 0001 000c 0000     .......@........
   82270:	0003 0000 0000 0000 0002 0000 110d ffff     ................
   82280:	0e00 400e 0002 0000 000b 0000 0001 0000     ...@............
   82290:	0000 0000 0004 0000 ff0e ffff 0e00 400e     ...............@
   822a0:	0001 0000 000b 0000 0001 0000 0000 0000     ................
   822b0:	0004 0000 ff0f ffff 0e00 400e 0000 0002     ...........@....
   822c0:	000b 0000 0001 0000 0000 0000 0004 0000     ................
   822d0:	ffff ffff 0e00 400e 0000 0004 000b 0000     .......@........
   822e0:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   822f0:	1200 400e 0000 4000 000d 0000 0004 0000     ...@...@........
   82300:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   82310:	0000 0020 000b 0000 0004 0000 0000 0000     .. .............
   82320:	0004 0000 ffff ffff 0e00 400e 0000 0200     ...........@....
   82330:	000b 0000 0001 0000 0000 0000 0004 0000     ................
   82340:	ffff ffff 0e00 400e 0000 0400 000b 0000     .......@........
   82350:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   82360:	0e00 400e 0000 0800 000b 0000 0001 0000     ...@............
   82370:	0000 0000 0004 0000 ffff ffff 0e00 400e     ...............@
   82380:	0000 1000 000b 0000 0001 0000 0000 0000     ................
   82390:	0004 0000 ffff ffff 1000 400e 0000 0080     ...........@....
   823a0:	000c 0000 0002 0000 0000 0000 0004 0000     ................
   823b0:	ffff ffff 0e00 400e 0000 0006 000b 0000     .......@........
   823c0:	0001 0000 0000 0000 0005 0000 ffff ffff     ................
   823d0:	1000 400e 3000 0000 000c 0000 0001 0000     ...@.0..........
   823e0:	0000 0000 0005 0000 ffff ffff 0e00 400e     ...............@
   823f0:	0300 0000 000b 0000 0001 0000 0000 0000     ................
   82400:	0005 0000 ffff ffff 0e00 400e 0c00 0000     ...........@....
   82410:	000b 0000 0001 0000 0000 0000 0005 0000     ................
   82420:	ffff ffff 0e00 400e 3000 0000 000b 0000     .......@.0......
   82430:	0001 0000 0000 0000 0005 0000 ffff ffff     ................
   82440:	1400 400e 0030 0000 000e 0000 0002 0000     ...@0...........
   82450:	0000 0000 0005 0000 ffff ffff 1000 400e     ...............@
   82460:	0c00 0000 000c 0000 0001 0000 0000 0000     ................
   82470:	0004 0000 ffff ffff 1000 400e 0000 0020     ...........@.. .
   82480:	000c 0000 0002 0000 0000 0000 0004 0000     ................
   82490:	ffff ffff 0e00 400e 0000 2000 000b 0000     .......@... ....
   824a0:	0001 0000 0000 0000 0004 0000 ffff ffff     ................
   824b0:	1000 400e 8000 0000 000c 0000 0001 0000     ...@............
   824c0:	0000 0000 0004 0000 ffff ffff 1000 400e     ...............@
   824d0:	4000 0000 000c 0000 0001 0000 0000 0000     .@..............
   824e0:	0004 0000 ffff ffff 0000 0000 0000 0000     ................
	...
   82500:	ffff ffff 0000 0000                         ........

00082508 <_ZTV10USARTClass>:
	...
   82510:	0de1 0008 0d49 0008 0d9b 0008 0dbb 0008     ....I...........
   82520:	0da9 0008 0dd7 0008 0d97 0008 0000 0000     ................

00082530 <_ZTV9UARTClass>:
	...
   82538:	0e87 0008 0d49 0008 0e41 0008 0e61 0008     ....I...A...a...
   82548:	0e4f 0008 0e7d 0008 0e3d 0008 0000 0000     O...}...=.......

00082558 <_ZTV7Serial_>:
	...
   82560:	0f19 0008 0fe1 0008 0ee1 0008 0f35 0008     ............5...
   82570:	0ef9 0008 0f2d 0008 0f79 0008 0000 0000     ....-...y.......

00082580 <_ZL18_cdcOtherInterface>:
   82580:	0b08 0200 0202 0001 0409 0000 0201 0002     ................
   82590:	0500 0024 0110 2405 0101 0401 0224 0506     ..$....$....$...
   825a0:	0624 0100 0507 0381 0010 0910 0104 0200     $...............
   825b0:	000a 0000 0507 0202 0040 0700 8305 4002     ........@......@
	...

000825c2 <_ZL13_cdcInterface>:
   825c2:	0b08 0200 0202 0001 0409 0000 0201 0002     ................
   825d2:	0500 0024 0110 2405 0101 0401 0224 0506     ..$....$....$...
   825e2:	0624 0100 0507 0381 0010 0910 0104 0200     $...............
   825f2:	000a 0000 0507 0202 0200 0700 8305 0002     ................
   82602:	0002                                        ..

00082604 <_init>:
   82604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82606:	bf00      	nop
   82608:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8260a:	bc08      	pop	{r3}
   8260c:	469e      	mov	lr, r3
   8260e:	4770      	bx	lr

00082610 <__init_array_start>:
   82610:	00080109 	.word	0x00080109
   82614:	00080971 	.word	0x00080971
   82618:	00080b41 	.word	0x00080b41
   8261c:	00080ca1 	.word	0x00080ca1
   82620:	00081091 	.word	0x00081091

00082624 <_fini>:
   82624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82626:	bf00      	nop
   82628:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8262a:	bc08      	pop	{r3}
   8262c:	469e      	mov	lr, r3
   8262e:	4770      	bx	lr

00082630 <__fini_array_start>:
   82630:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <banzai>:
20070000:	b672      	cpsid	i
	__disable_irq();

	// Set bootflag to run SAM-BA bootloader at restart
	const int EEFC_FCMD_CGPB = 0x0C;
	const int EEFC_KEY = 0x5A;
	while (EFC0->EEFC_FSR & EEFC_FSR_FRDY == 0);
20070002:	4b06      	ldr	r3, [pc, #24]	; (2007001c <banzai+0x1c>)
20070004:	689a      	ldr	r2, [r3, #8]
	EFC0->EEFC_FCR =
		EEFC_FCR_FCMD(EEFC_FCMD_CGPB) |
		EEFC_FCR_FARG(1) |
		EEFC_FCR_FKEY(EEFC_KEY);
20070006:	4a06      	ldr	r2, [pc, #24]	; (20070020 <banzai+0x20>)
20070008:	605a      	str	r2, [r3, #4]
	while (EFC0->EEFC_FSR & EEFC_FSR_FRDY == 0);
2007000a:	689b      	ldr	r3, [r3, #8]
2007000c:	4b05      	ldr	r3, [pc, #20]	; (20070024 <banzai+0x24>)

	// From here flash memory is no more available.

	// Memory swap needs some time to stabilize
	for (uint32_t i=0; i<1000000; i++)
2007000e:	3b01      	subs	r3, #1
20070010:	d1fd      	bne.n	2007000e <banzai+0xe>
	// BANZAIIIIIII!!!
	const int RSTC_KEY = 0xA5;
	RSTC->RSTC_CR =
		RSTC_CR_KEY(RSTC_KEY) |
		RSTC_CR_PROCRST |
		RSTC_CR_PERRST;
20070012:	4a05      	ldr	r2, [pc, #20]	; (20070028 <banzai+0x28>)
20070014:	4b05      	ldr	r3, [pc, #20]	; (2007002c <banzai+0x2c>)
20070016:	601a      	str	r2, [r3, #0]
20070018:	e7fe      	b.n	20070018 <banzai+0x18>
2007001a:	bf00      	nop
2007001c:	400e0a00 	.word	0x400e0a00
20070020:	5a00010c 	.word	0x5a00010c
20070024:	000f4240 	.word	0x000f4240
20070028:	a5000005 	.word	0xa5000005
2007002c:	400e1a00 	.word	0x400e1a00

20070030 <led>:
20070030:	0000000d                                ....

20070034 <_ZL5ticks>:
20070034:	ffffffff                                ....

20070038 <_hid_protocol>:
20070038:	00000101                                         .

20070039 <_hid_idle>:
20070039:	00000001                                         ...

2007003c <_ZL12_usbLineInfo>:
2007003c:	0000e100 00080000                       ........

20070044 <SystemCoreClock>:
20070044:	003d0900                                ..=.

20070048 <g_interrupt_enabled>:
20070048:	00000001                                ....
